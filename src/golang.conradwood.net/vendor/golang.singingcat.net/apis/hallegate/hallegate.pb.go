// Code generated by protoc-gen-go.
// source: golang.singingcat.net/apis/hallegate/hallegate.proto
// DO NOT EDIT!

/*
Package hallegate is a generated protocol buffer package.

It is generated from these files:
	golang.singingcat.net/apis/hallegate/hallegate.proto

It has these top-level messages:
	HalleUser
	GateLog
*/
package hallegate

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import h2gproxy "golang.conradwood.net/apis/h2gproxy"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// store authentication in database
type HalleUser struct {
	ID        uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	AuthCode  string `protobuf:"bytes,2,opt,name=AuthCode" json:"AuthCode,omitempty"`
	Firstname string `protobuf:"bytes,3,opt,name=Firstname" json:"Firstname,omitempty"`
	Lastname  string `protobuf:"bytes,4,opt,name=Lastname" json:"Lastname,omitempty"`
	Email     string `protobuf:"bytes,5,opt,name=Email" json:"Email,omitempty"`
	CreatedBy string `protobuf:"bytes,6,opt,name=CreatedBy" json:"CreatedBy,omitempty"`
	Created   uint32 `protobuf:"varint,7,opt,name=Created" json:"Created,omitempty"`
	Active    bool   `protobuf:"varint,8,opt,name=Active" json:"Active,omitempty"`
}

func (m *HalleUser) Reset()                    { *m = HalleUser{} }
func (m *HalleUser) String() string            { return proto.CompactTextString(m) }
func (*HalleUser) ProtoMessage()               {}
func (*HalleUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HalleUser) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *HalleUser) GetAuthCode() string {
	if m != nil {
		return m.AuthCode
	}
	return ""
}

func (m *HalleUser) GetFirstname() string {
	if m != nil {
		return m.Firstname
	}
	return ""
}

func (m *HalleUser) GetLastname() string {
	if m != nil {
		return m.Lastname
	}
	return ""
}

func (m *HalleUser) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *HalleUser) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *HalleUser) GetCreated() uint32 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *HalleUser) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

// event log of gates
type GateLog struct {
	ID           uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	HalleUserID  uint64 `protobuf:"varint,2,opt,name=HalleUserID" json:"HalleUserID,omitempty"`
	Created      uint32 `protobuf:"varint,3,opt,name=Created" json:"Created,omitempty"`
	UserAgent    string `protobuf:"bytes,4,opt,name=UserAgent" json:"UserAgent,omitempty"`
	SourceIP     string `protobuf:"bytes,5,opt,name=SourceIP" json:"SourceIP,omitempty"`
	ErrorMessage string `protobuf:"bytes,6,opt,name=ErrorMessage" json:"ErrorMessage,omitempty"`
	Success      bool   `protobuf:"varint,7,opt,name=Success" json:"Success,omitempty"`
	Longitude    string `protobuf:"bytes,8,opt,name=Longitude" json:"Longitude,omitempty"`
	Latitude     string `protobuf:"bytes,9,opt,name=Latitude" json:"Latitude,omitempty"`
}

func (m *GateLog) Reset()                    { *m = GateLog{} }
func (m *GateLog) String() string            { return proto.CompactTextString(m) }
func (*GateLog) ProtoMessage()               {}
func (*GateLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GateLog) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *GateLog) GetHalleUserID() uint64 {
	if m != nil {
		return m.HalleUserID
	}
	return 0
}

func (m *GateLog) GetCreated() uint32 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *GateLog) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *GateLog) GetSourceIP() string {
	if m != nil {
		return m.SourceIP
	}
	return ""
}

func (m *GateLog) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GateLog) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GateLog) GetLongitude() string {
	if m != nil {
		return m.Longitude
	}
	return ""
}

func (m *GateLog) GetLatitude() string {
	if m != nil {
		return m.Latitude
	}
	return ""
}

func init() {
	proto.RegisterType((*HalleUser)(nil), "hallegate.HalleUser")
	proto.RegisterType((*GateLog)(nil), "hallegate.GateLog")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HalleGateService service

type HalleGateServiceClient interface {
	ServeHTML(ctx context.Context, in *h2gproxy.ServeRequest, opts ...grpc.CallOption) (*h2gproxy.ServeResponse, error)
}

type halleGateServiceClient struct {
	cc *grpc.ClientConn
}

func NewHalleGateServiceClient(cc *grpc.ClientConn) HalleGateServiceClient {
	return &halleGateServiceClient{cc}
}

func (c *halleGateServiceClient) ServeHTML(ctx context.Context, in *h2gproxy.ServeRequest, opts ...grpc.CallOption) (*h2gproxy.ServeResponse, error) {
	out := new(h2gproxy.ServeResponse)
	err := grpc.Invoke(ctx, "/hallegate.HalleGateService/ServeHTML", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HalleGateService service

type HalleGateServiceServer interface {
	ServeHTML(context.Context, *h2gproxy.ServeRequest) (*h2gproxy.ServeResponse, error)
}

func RegisterHalleGateServiceServer(s *grpc.Server, srv HalleGateServiceServer) {
	s.RegisterService(&_HalleGateService_serviceDesc, srv)
}

func _HalleGateService_ServeHTML_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(h2gproxy.ServeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HalleGateServiceServer).ServeHTML(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hallegate.HalleGateService/ServeHTML",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HalleGateServiceServer).ServeHTML(ctx, req.(*h2gproxy.ServeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HalleGateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hallegate.HalleGateService",
	HandlerType: (*HalleGateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServeHTML",
			Handler:    _HalleGateService_ServeHTML_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.singingcat.net/apis/hallegate/hallegate.proto",
}

func init() {
	proto.RegisterFile("golang.singingcat.net/apis/hallegate/hallegate.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x92, 0xdf, 0x6a, 0xdb, 0x30,
	0x14, 0xc6, 0x71, 0x9a, 0x26, 0x91, 0xf6, 0x87, 0x21, 0x46, 0x27, 0x42, 0x2f, 0x4c, 0x18, 0x23,
	0x57, 0x2e, 0x64, 0xbb, 0xdc, 0x4d, 0xda, 0x74, 0x6b, 0x20, 0x85, 0xa2, 0x6c, 0x0f, 0xa0, 0xd9,
	0x07, 0x55, 0x90, 0x4a, 0x9e, 0x24, 0x77, 0xeb, 0x13, 0xec, 0x11, 0xf7, 0x3a, 0x45, 0x96, 0x2c,
	0xbb, 0xe4, 0x4e, 0xdf, 0x77, 0x74, 0xce, 0xe1, 0x77, 0xf8, 0xf0, 0x17, 0xa1, 0x0f, 0x5c, 0x89,
	0xc2, 0x4a, 0x25, 0xa4, 0x12, 0x25, 0x77, 0x85, 0x02, 0x77, 0xc1, 0x6b, 0x69, 0x2f, 0xee, 0xf9,
	0xe1, 0x00, 0x82, 0x3b, 0xe8, 0x5f, 0x45, 0x6d, 0xb4, 0xd3, 0x04, 0x25, 0x63, 0xbe, 0x8a, 0x03,
	0x4a, 0xad, 0x0c, 0xaf, 0xfe, 0x68, 0x5d, 0x0d, 0x06, 0xac, 0x44, 0x6d, 0xf4, 0xdf, 0xa7, 0xf4,
	0x08, 0xed, 0x8b, 0xff, 0x19, 0x46, 0x37, 0x7e, 0xc2, 0x4f, 0x0b, 0x86, 0xbc, 0xc5, 0xa3, 0xed,
	0x86, 0x66, 0x79, 0xb6, 0x1c, 0xb3, 0xd1, 0x76, 0x43, 0xe6, 0x78, 0xb6, 0x6e, 0xdc, 0xfd, 0x95,
	0xae, 0x80, 0x8e, 0xf2, 0x6c, 0x89, 0x58, 0xd2, 0xe4, 0x1c, 0xa3, 0x6f, 0xd2, 0x58, 0xa7, 0xf8,
	0x03, 0xd0, 0x93, 0xb6, 0xd8, 0x1b, 0xbe, 0x73, 0xc7, 0x63, 0x71, 0x1c, 0x3a, 0x3b, 0x4d, 0xde,
	0xe3, 0xd3, 0xeb, 0x07, 0x2e, 0x0f, 0xf4, 0xb4, 0x2d, 0x04, 0xe1, 0xe7, 0x5d, 0x19, 0xe0, 0x0e,
	0xaa, 0xcb, 0x27, 0x3a, 0x09, 0xf3, 0x92, 0x41, 0x28, 0x9e, 0x46, 0x41, 0xa7, 0x79, 0xb6, 0x7c,
	0xc3, 0x3a, 0x49, 0xce, 0xf0, 0x64, 0x5d, 0x3a, 0xf9, 0x08, 0x74, 0x96, 0x67, 0xcb, 0x19, 0x8b,
	0x6a, 0xf1, 0x6f, 0x84, 0xa7, 0xdf, 0xb9, 0x83, 0x9d, 0x16, 0x47, 0x5c, 0x39, 0x7e, 0x95, 0xa0,
	0xb7, 0x9b, 0x16, 0x6d, 0xcc, 0x86, 0xd6, 0x70, 0xdf, 0xc9, 0xcb, 0x7d, 0xe7, 0x18, 0xf9, 0x3f,
	0x6b, 0x01, 0xca, 0x45, 0xb4, 0xde, 0xf0, 0xdc, 0x7b, 0xdd, 0x98, 0x12, 0xb6, 0x77, 0x11, 0x2f,
	0x69, 0xb2, 0xc0, 0xaf, 0xaf, 0x8d, 0xd1, 0xe6, 0x16, 0xac, 0xe5, 0x02, 0x22, 0xe4, 0x0b, 0xcf,
	0xef, 0xdd, 0x37, 0x65, 0x09, 0xd6, 0xb6, 0x9c, 0x33, 0xd6, 0x49, 0xbf, 0x77, 0xa7, 0x95, 0x90,
	0xae, 0xa9, 0x02, 0x2a, 0x62, 0xbd, 0x11, 0xee, 0xed, 0x42, 0x11, 0x75, 0xf7, 0x0e, 0x7a, 0x75,
	0x87, 0xdf, 0xb5, 0x68, 0xfe, 0x1a, 0x7b, 0x30, 0x8f, 0xb2, 0x04, 0xf2, 0x15, 0x23, 0xff, 0x84,
	0x9b, 0x1f, 0xb7, 0x3b, 0x72, 0x56, 0xa4, 0x54, 0xb4, 0x26, 0x83, 0xdf, 0x0d, 0x58, 0x37, 0xff,
	0x70, 0xe4, 0xdb, 0x5a, 0x2b, 0x0b, 0x97, 0x9f, 0xf0, 0x47, 0x05, 0x6e, 0x98, 0xd4, 0x18, 0x3d,
	0x9f, 0xb5, 0x22, 0x25, 0xf2, 0xd7, 0xa4, 0x0d, 0xd9, 0xe7, 0xe7, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xdc, 0xfc, 0x1c, 0x77, 0xdb, 0x02, 0x00, 0x00,
}
