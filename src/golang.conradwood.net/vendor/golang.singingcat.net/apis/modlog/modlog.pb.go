// Code generated by protoc-gen-go.
// source: golang.singingcat.net/apis/modlog/modlog.proto
// DO NOT EDIT!

/*
Package modlog is a generated protocol buffer package.

It is generated from these files:
	golang.singingcat.net/apis/modlog/modlog.proto

It has these top-level messages:
*/
package modlog

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"
import scmodcomms "golang.singingcat.net/apis/scmodcomms"
import singingcat "golang.singingcat.net/apis/singingcat"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ModLog service

type ModLogClient interface {
	// called for each 'log' command
	CommandReceived(ctx context.Context, in *scmodcomms.Response, opts ...grpc.CallOption) (*common.Void, error)
	// enable logging on a module
	EnableLogging(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*common.Void, error)
	// disable logging on a module
	DisableLogging(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*common.Void, error)
}

type modLogClient struct {
	cc *grpc.ClientConn
}

func NewModLogClient(cc *grpc.ClientConn) ModLogClient {
	return &modLogClient{cc}
}

func (c *modLogClient) CommandReceived(ctx context.Context, in *scmodcomms.Response, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/modlog.ModLog/CommandReceived", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modLogClient) EnableLogging(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/modlog.ModLog/EnableLogging", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modLogClient) DisableLogging(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/modlog.ModLog/DisableLogging", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ModLog service

type ModLogServer interface {
	// called for each 'log' command
	CommandReceived(context.Context, *scmodcomms.Response) (*common.Void, error)
	// enable logging on a module
	EnableLogging(context.Context, *singingcat.ModuleRef) (*common.Void, error)
	// disable logging on a module
	DisableLogging(context.Context, *singingcat.ModuleRef) (*common.Void, error)
}

func RegisterModLogServer(s *grpc.Server, srv ModLogServer) {
	s.RegisterService(&_ModLog_serviceDesc, srv)
}

func _ModLog_CommandReceived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(scmodcomms.Response)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModLogServer).CommandReceived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modlog.ModLog/CommandReceived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModLogServer).CommandReceived(ctx, req.(*scmodcomms.Response))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModLog_EnableLogging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(singingcat.ModuleRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModLogServer).EnableLogging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modlog.ModLog/EnableLogging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModLogServer).EnableLogging(ctx, req.(*singingcat.ModuleRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModLog_DisableLogging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(singingcat.ModuleRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModLogServer).DisableLogging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modlog.ModLog/DisableLogging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModLogServer).DisableLogging(ctx, req.(*singingcat.ModuleRef))
	}
	return interceptor(ctx, in, info, handler)
}

var _ModLog_serviceDesc = grpc.ServiceDesc{
	ServiceName: "modlog.ModLog",
	HandlerType: (*ModLogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommandReceived",
			Handler:    _ModLog_CommandReceived_Handler,
		},
		{
			MethodName: "EnableLogging",
			Handler:    _ModLog_EnableLogging_Handler,
		},
		{
			MethodName: "DisableLogging",
			Handler:    _ModLog_DisableLogging_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.singingcat.net/apis/modlog/modlog.proto",
}

func init() { proto.RegisterFile("golang.singingcat.net/apis/modlog/modlog.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x90, 0xcd, 0x4e, 0x04, 0x21,
	0x10, 0x84, 0xe3, 0x65, 0x0e, 0xc4, 0x9f, 0x84, 0xe8, 0x85, 0xf8, 0x0c, 0x6c, 0xa2, 0xae, 0x0f,
	0xe0, 0xcf, 0x6d, 0xf7, 0x32, 0x07, 0xef, 0x2c, 0xdd, 0x12, 0x12, 0xe8, 0x9a, 0x2c, 0xa8, 0x2f,
	0xe5, 0x43, 0x9a, 0x91, 0x51, 0x89, 0x07, 0xe3, 0x9e, 0xba, 0x21, 0xf5, 0x51, 0x55, 0x28, 0x1b,
	0x90, 0x9c, 0x04, 0x5b, 0xa2, 0x84, 0x28, 0xc1, 0xbb, 0x6a, 0x85, 0xeb, 0xca, 0x4d, 0xb1, 0xac,
	0x32, 0x28, 0x21, 0x2c, 0xc3, 0x4e, 0x7b, 0x54, 0xe8, 0xa1, 0x9d, 0xcc, 0x17, 0xe7, 0x21, 0x7b,
	0x47, 0x6f, 0x00, 0xfd, 0x70, 0x1e, 0x39, 0x43, 0x96, 0xd1, 0x38, 0x73, 0xfb, 0x87, 0x4f, 0xf1,
	0x19, 0x34, 0xab, 0xfb, 0xf5, 0x3f, 0xdc, 0xf7, 0x5d, 0xb7, 0x36, 0xee, 0xea, 0xfd, 0x48, 0x0d,
	0x5b, 0xd0, 0x06, 0x41, 0xaf, 0xd5, 0xd9, 0x3d, 0x72, 0x76, 0x42, 0x23, 0x7b, 0x8e, 0xaf, 0x4c,
	0xfa, 0xdc, 0x76, 0x46, 0x23, 0x97, 0x09, 0x52, 0xd8, 0x1c, 0xdb, 0x25, 0xf2, 0x13, 0x22, 0xe9,
	0x1b, 0x75, 0xf2, 0x28, 0x6e, 0x97, 0x78, 0x83, 0x30, 0xbf, 0xad, 0x2f, 0xfa, 0x10, 0x5b, 0xd0,
	0x4b, 0xe2, 0x91, 0x9f, 0x7f, 0x51, 0x6b, 0x75, 0xfa, 0x10, 0xcb, 0xa1, 0xd8, 0xdd, 0xa5, 0x32,
	0xc2, 0xb5, 0x57, 0xce, 0x0d, 0x6d, 0xfb, 0xec, 0xdd, 0xf0, 0xd9, 0xe9, 0xfa, 0x23, 0x00, 0x00,
	0xff, 0xff, 0x35, 0xde, 0xdd, 0x8a, 0xad, 0x01, 0x00, 0x00,
}
