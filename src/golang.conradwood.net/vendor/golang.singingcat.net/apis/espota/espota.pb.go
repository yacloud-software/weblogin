// Code generated by protoc-gen-go.
// source: golang.singingcat.net/apis/espota/espota.proto
// DO NOT EDIT!

/*
Package espota is a generated protocol buffer package.

It is generated from these files:
	golang.singingcat.net/apis/espota/espota.proto

It has these top-level messages:
	Pin
	CustomNode
	NodeRequest
	ChipConfig
	Config
	ConfigResponse
	UpdateLogEntry
*/
package espota

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import h2gproxy "golang.conradwood.net/apis/h2gproxy"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Pin struct {
	Number    uint32 `protobuf:"varint,1,opt,name=Number" json:"Number,omitempty"`
	ActiveLow bool   `protobuf:"varint,2,opt,name=ActiveLow" json:"ActiveLow,omitempty"`
}

func (m *Pin) Reset()                    { *m = Pin{} }
func (m *Pin) String() string            { return proto.CompactTextString(m) }
func (*Pin) ProtoMessage()               {}
func (*Pin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Pin) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Pin) GetActiveLow() bool {
	if m != nil {
		return m.ActiveLow
	}
	return false
}

type CustomNode struct {
	ID        uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Mac       uint64 `protobuf:"varint,2,opt,name=Mac" json:"Mac,omitempty"`
	MacString string `protobuf:"bytes,3,opt,name=MacString" json:"MacString,omitempty"`
	Name      string `protobuf:"bytes,4,opt,name=Name" json:"Name,omitempty"`
	RelayPins []*Pin `protobuf:"bytes,5,rep,name=RelayPins" json:"RelayPins,omitempty"`
}

func (m *CustomNode) Reset()                    { *m = CustomNode{} }
func (m *CustomNode) String() string            { return proto.CompactTextString(m) }
func (*CustomNode) ProtoMessage()               {}
func (*CustomNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CustomNode) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *CustomNode) GetMac() uint64 {
	if m != nil {
		return m.Mac
	}
	return 0
}

func (m *CustomNode) GetMacString() string {
	if m != nil {
		return m.MacString
	}
	return ""
}

func (m *CustomNode) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CustomNode) GetRelayPins() []*Pin {
	if m != nil {
		return m.RelayPins
	}
	return nil
}

type NodeRequest struct {
	Mac uint64 `protobuf:"varint,1,opt,name=Mac" json:"Mac,omitempty"`
}

func (m *NodeRequest) Reset()                    { *m = NodeRequest{} }
func (m *NodeRequest) String() string            { return proto.CompactTextString(m) }
func (*NodeRequest) ProtoMessage()               {}
func (*NodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *NodeRequest) GetMac() uint64 {
	if m != nil {
		return m.Mac
	}
	return 0
}

type ChipConfig struct {
	ConfiguredBuild    uint64 `protobuf:"varint,1,opt,name=ConfiguredBuild" json:"ConfiguredBuild,omitempty"`
	UseLatestSafeBuild bool   `protobuf:"varint,2,opt,name=UseLatestSafeBuild" json:"UseLatestSafeBuild,omitempty"`
	DisableUpdates     bool   `protobuf:"varint,3,opt,name=DisableUpdates" json:"DisableUpdates,omitempty"`
}

func (m *ChipConfig) Reset()                    { *m = ChipConfig{} }
func (m *ChipConfig) String() string            { return proto.CompactTextString(m) }
func (*ChipConfig) ProtoMessage()               {}
func (*ChipConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ChipConfig) GetConfiguredBuild() uint64 {
	if m != nil {
		return m.ConfiguredBuild
	}
	return 0
}

func (m *ChipConfig) GetUseLatestSafeBuild() bool {
	if m != nil {
		return m.UseLatestSafeBuild
	}
	return false
}

func (m *ChipConfig) GetDisableUpdates() bool {
	if m != nil {
		return m.DisableUpdates
	}
	return false
}

type Config struct {
	ChipConfigs       map[uint32]*ChipConfig `protobuf:"bytes,1,rep,name=ChipConfigs" json:"ChipConfigs,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	EarlyModules      []uint64               `protobuf:"varint,2,rep,packed,name=EarlyModules" json:"EarlyModules,omitempty"`
	ServeTravelRouter bool                   `protobuf:"varint,3,opt,name=ServeTravelRouter" json:"ServeTravelRouter,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Config) GetChipConfigs() map[uint32]*ChipConfig {
	if m != nil {
		return m.ChipConfigs
	}
	return nil
}

func (m *Config) GetEarlyModules() []uint64 {
	if m != nil {
		return m.EarlyModules
	}
	return nil
}

func (m *Config) GetServeTravelRouter() bool {
	if m != nil {
		return m.ServeTravelRouter
	}
	return false
}

type ConfigResponse struct {
	Config           *Config           `protobuf:"bytes,1,opt,name=Config" json:"Config,omitempty"`
	LatestSafeBuilds map[uint32]uint64 `protobuf:"bytes,2,rep,name=LatestSafeBuilds" json:"LatestSafeBuilds,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *ConfigResponse) Reset()                    { *m = ConfigResponse{} }
func (m *ConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*ConfigResponse) ProtoMessage()               {}
func (*ConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ConfigResponse) GetConfig() *Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ConfigResponse) GetLatestSafeBuilds() map[uint32]uint64 {
	if m != nil {
		return m.LatestSafeBuilds
	}
	return nil
}

type UpdateLogEntry struct {
	ID            uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	ModuleID      uint64 `protobuf:"varint,2,opt,name=ModuleID" json:"ModuleID,omitempty"`
	Occured       uint32 `protobuf:"varint,3,opt,name=Occured" json:"Occured,omitempty"`
	ReportedBuild uint64 `protobuf:"varint,4,opt,name=ReportedBuild" json:"ReportedBuild,omitempty"`
	UpdateToBuild uint64 `protobuf:"varint,5,opt,name=UpdateToBuild" json:"UpdateToBuild,omitempty"`
	Download      bool   `protobuf:"varint,6,opt,name=Download" json:"Download,omitempty"`
	Chip          uint32 `protobuf:"varint,7,opt,name=Chip" json:"Chip,omitempty"`
}

func (m *UpdateLogEntry) Reset()                    { *m = UpdateLogEntry{} }
func (m *UpdateLogEntry) String() string            { return proto.CompactTextString(m) }
func (*UpdateLogEntry) ProtoMessage()               {}
func (*UpdateLogEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UpdateLogEntry) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *UpdateLogEntry) GetModuleID() uint64 {
	if m != nil {
		return m.ModuleID
	}
	return 0
}

func (m *UpdateLogEntry) GetOccured() uint32 {
	if m != nil {
		return m.Occured
	}
	return 0
}

func (m *UpdateLogEntry) GetReportedBuild() uint64 {
	if m != nil {
		return m.ReportedBuild
	}
	return 0
}

func (m *UpdateLogEntry) GetUpdateToBuild() uint64 {
	if m != nil {
		return m.UpdateToBuild
	}
	return 0
}

func (m *UpdateLogEntry) GetDownload() bool {
	if m != nil {
		return m.Download
	}
	return false
}

func (m *UpdateLogEntry) GetChip() uint32 {
	if m != nil {
		return m.Chip
	}
	return 0
}

func init() {
	proto.RegisterType((*Pin)(nil), "espota.Pin")
	proto.RegisterType((*CustomNode)(nil), "espota.CustomNode")
	proto.RegisterType((*NodeRequest)(nil), "espota.NodeRequest")
	proto.RegisterType((*ChipConfig)(nil), "espota.ChipConfig")
	proto.RegisterType((*Config)(nil), "espota.Config")
	proto.RegisterType((*ConfigResponse)(nil), "espota.ConfigResponse")
	proto.RegisterType((*UpdateLogEntry)(nil), "espota.UpdateLogEntry")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ESPOtaService service

type ESPOtaServiceClient interface {
	GetNode(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*CustomNode, error)
	StreamHTTP(ctx context.Context, in *h2gproxy.StreamRequest, opts ...grpc.CallOption) (ESPOtaService_StreamHTTPClient, error)
	SetConfig(ctx context.Context, in *Config, opts ...grpc.CallOption) (*common.Void, error)
	GetConfig(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*ConfigResponse, error)
}

type eSPOtaServiceClient struct {
	cc *grpc.ClientConn
}

func NewESPOtaServiceClient(cc *grpc.ClientConn) ESPOtaServiceClient {
	return &eSPOtaServiceClient{cc}
}

func (c *eSPOtaServiceClient) GetNode(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*CustomNode, error) {
	out := new(CustomNode)
	err := grpc.Invoke(ctx, "/espota.ESPOtaService/GetNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eSPOtaServiceClient) StreamHTTP(ctx context.Context, in *h2gproxy.StreamRequest, opts ...grpc.CallOption) (ESPOtaService_StreamHTTPClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ESPOtaService_serviceDesc.Streams[0], c.cc, "/espota.ESPOtaService/StreamHTTP", opts...)
	if err != nil {
		return nil, err
	}
	x := &eSPOtaServiceStreamHTTPClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ESPOtaService_StreamHTTPClient interface {
	Recv() (*h2gproxy.StreamDataResponse, error)
	grpc.ClientStream
}

type eSPOtaServiceStreamHTTPClient struct {
	grpc.ClientStream
}

func (x *eSPOtaServiceStreamHTTPClient) Recv() (*h2gproxy.StreamDataResponse, error) {
	m := new(h2gproxy.StreamDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eSPOtaServiceClient) SetConfig(ctx context.Context, in *Config, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/espota.ESPOtaService/SetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eSPOtaServiceClient) GetConfig(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := grpc.Invoke(ctx, "/espota.ESPOtaService/GetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ESPOtaService service

type ESPOtaServiceServer interface {
	GetNode(context.Context, *NodeRequest) (*CustomNode, error)
	StreamHTTP(*h2gproxy.StreamRequest, ESPOtaService_StreamHTTPServer) error
	SetConfig(context.Context, *Config) (*common.Void, error)
	GetConfig(context.Context, *common.Void) (*ConfigResponse, error)
}

func RegisterESPOtaServiceServer(s *grpc.Server, srv ESPOtaServiceServer) {
	s.RegisterService(&_ESPOtaService_serviceDesc, srv)
}

func _ESPOtaService_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ESPOtaServiceServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/espota.ESPOtaService/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ESPOtaServiceServer).GetNode(ctx, req.(*NodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ESPOtaService_StreamHTTP_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(h2gproxy.StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ESPOtaServiceServer).StreamHTTP(m, &eSPOtaServiceStreamHTTPServer{stream})
}

type ESPOtaService_StreamHTTPServer interface {
	Send(*h2gproxy.StreamDataResponse) error
	grpc.ServerStream
}

type eSPOtaServiceStreamHTTPServer struct {
	grpc.ServerStream
}

func (x *eSPOtaServiceStreamHTTPServer) Send(m *h2gproxy.StreamDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ESPOtaService_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ESPOtaServiceServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/espota.ESPOtaService/SetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ESPOtaServiceServer).SetConfig(ctx, req.(*Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _ESPOtaService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ESPOtaServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/espota.ESPOtaService/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ESPOtaServiceServer).GetConfig(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _ESPOtaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "espota.ESPOtaService",
	HandlerType: (*ESPOtaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNode",
			Handler:    _ESPOtaService_GetNode_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _ESPOtaService_SetConfig_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _ESPOtaService_GetConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamHTTP",
			Handler:       _ESPOtaService_StreamHTTP_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "golang.singingcat.net/apis/espota/espota.proto",
}

func init() { proto.RegisterFile("golang.singingcat.net/apis/espota/espota.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 705 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x54, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0x96, 0x93, 0x34, 0x6d, 0x4e, 0x9a, 0xdc, 0xde, 0xb9, 0x97, 0x62, 0x59, 0x95, 0x1a, 0x02,
	0xaa, 0x82, 0x54, 0xb9, 0x60, 0x36, 0x08, 0x56, 0x6d, 0x13, 0x95, 0x4a, 0xfd, 0x89, 0x26, 0x29,
	0x62, 0x3b, 0xb5, 0xa7, 0xae, 0x85, 0x33, 0x13, 0xec, 0x71, 0x4a, 0x9e, 0x01, 0x89, 0x87, 0x63,
	0xc3, 0x2b, 0xb0, 0xe5, 0x0d, 0xd0, 0xfc, 0xd8, 0x49, 0xdc, 0x88, 0xd5, 0x9c, 0x39, 0xe7, 0xfb,
	0xe6, 0xfc, 0xce, 0x01, 0x37, 0xe4, 0x31, 0x61, 0xa1, 0x9b, 0x46, 0x2c, 0x8c, 0x58, 0xe8, 0x13,
	0xe1, 0x32, 0x2a, 0x8e, 0xc8, 0x34, 0x4a, 0x8f, 0x68, 0x3a, 0xe5, 0x82, 0x98, 0xc3, 0x9d, 0x26,
	0x5c, 0x70, 0x54, 0xd7, 0x37, 0xc7, 0x33, 0x3c, 0x9f, 0xb3, 0x84, 0x04, 0x0f, 0x9c, 0x07, 0x0b,
	0xde, 0xbd, 0x17, 0x4e, 0x13, 0xfe, 0x75, 0x5e, 0x08, 0x9a, 0xeb, 0xb8, 0x7f, 0xe1, 0xf8, 0x7c,
	0x32, 0xe1, 0xcc, 0x1c, 0x1a, 0xdf, 0x7d, 0x0f, 0xd5, 0x61, 0xc4, 0xd0, 0x2e, 0xd4, 0xaf, 0xb2,
	0xc9, 0x2d, 0x4d, 0x6c, 0xab, 0x63, 0xf5, 0x5a, 0xd8, 0xdc, 0xd0, 0x1e, 0x34, 0x8e, 0x7d, 0x11,
	0xcd, 0xe8, 0x05, 0x7f, 0xb0, 0x2b, 0x1d, 0xab, 0xb7, 0x85, 0x17, 0x8a, 0xee, 0x37, 0x0b, 0xe0,
	0x34, 0x4b, 0x05, 0x9f, 0x5c, 0xf1, 0x80, 0xa2, 0x36, 0x54, 0xce, 0xfb, 0xea, 0x81, 0x1a, 0xae,
	0x9c, 0xf7, 0xd1, 0x0e, 0x54, 0x2f, 0x89, 0xaf, 0x68, 0x35, 0x2c, 0x45, 0xf9, 0xdc, 0x25, 0xf1,
	0x47, 0x22, 0x89, 0x58, 0x68, 0x57, 0x3b, 0x56, 0xaf, 0x81, 0x17, 0x0a, 0x84, 0xa0, 0x76, 0x45,
	0x26, 0xd4, 0xae, 0x29, 0x83, 0x92, 0xd1, 0x4b, 0x68, 0x60, 0x1a, 0x93, 0xf9, 0x30, 0x62, 0xa9,
	0xbd, 0xd1, 0xa9, 0xf6, 0x9a, 0x5e, 0xd3, 0x35, 0xd5, 0x1a, 0x46, 0x0c, 0x2f, 0xac, 0xdd, 0x7d,
	0x68, 0xca, 0x30, 0x30, 0xfd, 0x92, 0xd1, 0x54, 0xe4, 0xde, 0xad, 0xc2, 0x7b, 0xf7, 0xbb, 0x0c,
	0xf7, 0x3e, 0x9a, 0x9e, 0x72, 0x76, 0x17, 0x85, 0xa8, 0x07, 0xff, 0x68, 0x29, 0x4b, 0x68, 0x70,
	0x92, 0x45, 0x71, 0x60, 0xc0, 0x65, 0x35, 0x72, 0x01, 0xdd, 0xa4, 0xf4, 0x82, 0x08, 0x9a, 0x8a,
	0x11, 0xb9, 0xa3, 0x1a, 0xac, 0xcb, 0xb1, 0xc6, 0x82, 0x0e, 0xa0, 0xdd, 0x8f, 0x52, 0x72, 0x1b,
	0xd3, 0x9b, 0x69, 0x20, 0x6d, 0x2a, 0xd7, 0x2d, 0x5c, 0xd2, 0x76, 0x7f, 0x5b, 0x50, 0x37, 0xc1,
	0x1c, 0x43, 0x73, 0x11, 0x5a, 0x6a, 0x5b, 0x2a, 0xd3, 0xfd, 0x3c, 0x53, 0xad, 0x76, 0x97, 0x10,
	0x03, 0x26, 0x92, 0x39, 0x5e, 0xe6, 0xa0, 0x2e, 0x6c, 0x0f, 0x48, 0x12, 0xcf, 0x2f, 0x79, 0x90,
	0xc5, 0x34, 0xb5, 0x2b, 0x9d, 0x6a, 0xaf, 0x86, 0x57, 0x74, 0xe8, 0x10, 0xfe, 0x1d, 0xd1, 0x64,
	0x46, 0xc7, 0x09, 0x99, 0xd1, 0x18, 0xf3, 0x4c, 0xd0, 0xc4, 0x04, 0xf7, 0xd8, 0xe0, 0x60, 0xd8,
	0x29, 0xbb, 0x94, 0x65, 0xfd, 0x4c, 0xe7, 0x66, 0x4c, 0xa4, 0x88, 0x7a, 0xb0, 0x31, 0x23, 0x71,
	0x46, 0x55, 0x41, 0x9a, 0x1e, 0x2a, 0x82, 0x2e, 0xa8, 0x58, 0x03, 0xde, 0x55, 0xde, 0x5a, 0xdd,
	0x9f, 0x16, 0xb4, 0x8d, 0x56, 0xe2, 0x58, 0x4a, 0xd1, 0x41, 0x5e, 0x05, 0xf5, 0x6a, 0xd3, 0x6b,
	0xaf, 0xa6, 0x8d, 0xf3, 0x1a, 0x7d, 0x82, 0x9d, 0x52, 0xa5, 0x75, 0x92, 0x4d, 0xef, 0xb0, 0xc4,
	0x30, 0x2f, 0xbb, 0x65, 0xb8, 0xae, 0xda, 0xa3, 0x57, 0x9c, 0x53, 0x78, 0xb2, 0x16, 0xba, 0x26,
	0xdb, 0xff, 0x97, 0xb3, 0xad, 0x2d, 0x67, 0xf6, 0xc3, 0x82, 0xb6, 0xee, 0xec, 0x05, 0x0f, 0x35,
	0xbd, 0xfc, 0x23, 0x1c, 0xd8, 0xd2, 0x9d, 0x38, 0xef, 0x1b, 0x7e, 0x71, 0x47, 0x36, 0x6c, 0x5e,
	0xfb, 0xbe, 0x1c, 0x3a, 0xd5, 0x90, 0x16, 0xce, 0xaf, 0xe8, 0x05, 0xb4, 0x30, 0x9d, 0xf2, 0x44,
	0xe4, 0x63, 0x5a, 0x53, 0xd4, 0x55, 0xa5, 0x44, 0x69, 0xef, 0x63, 0xae, 0x51, 0x1b, 0x1a, 0xb5,
	0xa2, 0x94, 0x11, 0xf4, 0xf9, 0x03, 0x8b, 0x39, 0x09, 0xec, 0xba, 0xea, 0x7b, 0x71, 0x97, 0xff,
	0x4f, 0xf6, 0xcc, 0xde, 0x54, 0xee, 0x95, 0xec, 0xfd, 0xb2, 0xa0, 0x35, 0x18, 0x0d, 0xaf, 0x05,
	0x91, 0xe3, 0x11, 0xf9, 0x14, 0x79, 0xb0, 0x79, 0x46, 0x85, 0xfa, 0xf0, 0xff, 0xe5, 0x65, 0x5f,
	0xfa, 0x77, 0xce, 0xa2, 0xff, 0x8b, 0xcd, 0x30, 0x00, 0x18, 0x89, 0x84, 0x92, 0xc9, 0x87, 0xf1,
	0x78, 0x88, 0x9e, 0xba, 0xc5, 0xd2, 0xd2, 0xda, 0x9c, 0xba, 0x57, 0x36, 0xf4, 0x89, 0x20, 0x79,
	0x33, 0x5f, 0x59, 0x72, 0x19, 0x8c, 0xa8, 0x30, 0xd3, 0x50, 0x9a, 0x12, 0x67, 0xdb, 0x35, 0x8b,
	0xed, 0x23, 0x8f, 0x02, 0xf4, 0x1a, 0x1a, 0x67, 0x05, 0x74, 0xc5, 0xe4, 0xec, 0xae, 0x1f, 0x96,
	0x93, 0xe7, 0xf0, 0x8c, 0x51, 0xb1, 0xbc, 0x39, 0xcd, 0x2e, 0x95, 0xcb, 0xd3, 0x70, 0x6e, 0xeb,
	0x6a, 0x6d, 0xbe, 0xf9, 0x13, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x52, 0xec, 0xcc, 0xd4, 0x05, 0x00,
	0x00,
}
