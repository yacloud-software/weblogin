// Code generated by protoc-gen-go.
// source: golang.singingcat.net/apis/sensorapi/sensorapi.proto
// DO NOT EDIT!

/*
Package sensorapi is a generated protocol buffer package.

It is generated from these files:
	golang.singingcat.net/apis/sensorapi/sensorapi.proto

It has these top-level messages:
	RecentSensorValueRequest
	SensorValueResponse
*/
package sensorapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import singingcat "golang.singingcat.net/apis/singingcat"
import scweb "golang.singingcat.net/apis/scweb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//  get a recent sensor value.
type RecentSensorValueRequest struct {
	SensorID uint64 `protobuf:"varint,1,opt,name=SensorID" json:"SensorID,omitempty"`
}

func (m *RecentSensorValueRequest) Reset()                    { *m = RecentSensorValueRequest{} }
func (m *RecentSensorValueRequest) String() string            { return proto.CompactTextString(m) }
func (*RecentSensorValueRequest) ProtoMessage()               {}
func (*RecentSensorValueRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RecentSensorValueRequest) GetSensorID() uint64 {
	if m != nil {
		return m.SensorID
	}
	return 0
}

type SensorValueResponse struct {
	Value     float64               `protobuf:"fixed64,1,opt,name=Value" json:"Value,omitempty"`
	Type      singingcat.SensorType `protobuf:"varint,2,opt,name=Type,enum=singingcat.SensorType" json:"Type,omitempty"`
	Timestamp uint32                `protobuf:"varint,3,opt,name=Timestamp" json:"Timestamp,omitempty"`
	Unit      *scweb.SensorUnit     `protobuf:"bytes,4,opt,name=Unit" json:"Unit,omitempty"`
}

func (m *SensorValueResponse) Reset()                    { *m = SensorValueResponse{} }
func (m *SensorValueResponse) String() string            { return proto.CompactTextString(m) }
func (*SensorValueResponse) ProtoMessage()               {}
func (*SensorValueResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SensorValueResponse) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *SensorValueResponse) GetType() singingcat.SensorType {
	if m != nil {
		return m.Type
	}
	return singingcat.SensorType_SENSORTYPE_UNDEFINED
}

func (m *SensorValueResponse) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *SensorValueResponse) GetUnit() *scweb.SensorUnit {
	if m != nil {
		return m.Unit
	}
	return nil
}

func init() {
	proto.RegisterType((*RecentSensorValueRequest)(nil), "sensorapi.RecentSensorValueRequest")
	proto.RegisterType((*SensorValueResponse)(nil), "sensorapi.SensorValueResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SensorAPIService service

type SensorAPIServiceClient interface {
	// get the most recent sensorvalue for a sensor
	GetMostRecent(ctx context.Context, in *RecentSensorValueRequest, opts ...grpc.CallOption) (*SensorValueResponse, error)
}

type sensorAPIServiceClient struct {
	cc *grpc.ClientConn
}

func NewSensorAPIServiceClient(cc *grpc.ClientConn) SensorAPIServiceClient {
	return &sensorAPIServiceClient{cc}
}

func (c *sensorAPIServiceClient) GetMostRecent(ctx context.Context, in *RecentSensorValueRequest, opts ...grpc.CallOption) (*SensorValueResponse, error) {
	out := new(SensorValueResponse)
	err := grpc.Invoke(ctx, "/sensorapi.SensorAPIService/GetMostRecent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SensorAPIService service

type SensorAPIServiceServer interface {
	// get the most recent sensorvalue for a sensor
	GetMostRecent(context.Context, *RecentSensorValueRequest) (*SensorValueResponse, error)
}

func RegisterSensorAPIServiceServer(s *grpc.Server, srv SensorAPIServiceServer) {
	s.RegisterService(&_SensorAPIService_serviceDesc, srv)
}

func _SensorAPIService_GetMostRecent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecentSensorValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorAPIServiceServer).GetMostRecent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensorapi.SensorAPIService/GetMostRecent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorAPIServiceServer).GetMostRecent(ctx, req.(*RecentSensorValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SensorAPIService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sensorapi.SensorAPIService",
	HandlerType: (*SensorAPIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMostRecent",
			Handler:    _SensorAPIService_GetMostRecent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.singingcat.net/apis/sensorapi/sensorapi.proto",
}

func init() {
	proto.RegisterFile("golang.singingcat.net/apis/sensorapi/sensorapi.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x50, 0x5f, 0x4b, 0xfb, 0x30,
	0x14, 0x25, 0xbf, 0x5f, 0x15, 0x77, 0x65, 0xa2, 0x51, 0xa4, 0x14, 0x91, 0x32, 0xff, 0x50, 0x44,
	0x32, 0xa8, 0xb2, 0x77, 0x45, 0x90, 0x3d, 0x08, 0x92, 0x55, 0xdf, 0xb3, 0x72, 0xa9, 0x81, 0x2d,
	0x89, 0x4d, 0xa6, 0xf8, 0x5d, 0xfc, 0xb0, 0xd2, 0x44, 0xda, 0x0a, 0xba, 0x97, 0x72, 0xef, 0xb9,
	0xe7, 0x9c, 0xe6, 0x1c, 0xb8, 0xae, 0xf4, 0x42, 0xa8, 0x8a, 0x59, 0xa9, 0x2a, 0xa9, 0xaa, 0x52,
	0x38, 0xa6, 0xd0, 0x8d, 0x85, 0x91, 0x76, 0x6c, 0x51, 0x59, 0x5d, 0x0b, 0x23, 0xbb, 0x89, 0x99,
	0x5a, 0x3b, 0x4d, 0x07, 0x2d, 0x90, 0x4c, 0xd6, 0x19, 0xb4, 0x58, 0x6f, 0x0c, 0x16, 0xc9, 0xe5,
	0x3a, 0x5d, 0xf9, 0x8e, 0xf3, 0xf0, 0x0d, 0xec, 0xd1, 0x04, 0x62, 0x8e, 0x25, 0x2a, 0x37, 0xf3,
	0x3f, 0x7e, 0x16, 0x8b, 0x15, 0x72, 0x7c, 0x5d, 0xa1, 0x75, 0x34, 0x81, 0xad, 0x80, 0x4e, 0xef,
	0x62, 0x92, 0x92, 0x2c, 0xe2, 0xed, 0x3e, 0xfa, 0x24, 0xb0, 0xff, 0x43, 0x62, 0x8d, 0x56, 0x16,
	0xe9, 0x01, 0x6c, 0x78, 0xc0, 0x0b, 0x08, 0x0f, 0x0b, 0xbd, 0x80, 0xa8, 0xf8, 0x30, 0x18, 0xff,
	0x4b, 0x49, 0xb6, 0x93, 0x1f, 0xf6, 0xdf, 0x16, 0x4c, 0x9a, 0x2b, 0xf7, 0x1c, 0x7a, 0x04, 0x83,
	0x42, 0x2e, 0xd1, 0x3a, 0xb1, 0x34, 0xf1, 0xff, 0x94, 0x64, 0x43, 0xde, 0x01, 0xf4, 0x0c, 0xa2,
	0x27, 0x25, 0x5d, 0x1c, 0xa5, 0x24, 0xdb, 0xce, 0xf7, 0x58, 0xc8, 0x12, 0x4c, 0x9a, 0x03, 0xf7,
	0xe7, 0xfc, 0x05, 0x76, 0x03, 0x76, 0xf3, 0x38, 0x9d, 0x61, 0xfd, 0x26, 0x4b, 0xa4, 0x05, 0x0c,
	0xef, 0xd1, 0x3d, 0x68, 0xeb, 0x42, 0x62, 0x7a, 0xc2, 0xba, 0xfa, 0xff, 0x2a, 0x21, 0x39, 0xee,
	0x91, 0x7e, 0x09, 0x7c, 0x7b, 0x0e, 0xa7, 0x0a, 0x5d, 0x3f, 0xd1, 0x77, 0xff, 0x4d, 0xe1, 0x9d,
	0x76, 0xbe, 0xe9, 0xfb, 0xbe, 0xfa, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xfa, 0x66, 0x2e, 0xe3, 0x18,
	0x02, 0x00, 0x00,
}
