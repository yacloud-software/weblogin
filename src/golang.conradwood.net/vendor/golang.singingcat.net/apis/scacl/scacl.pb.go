// Code generated by protoc-gen-go.
// source: golang.singingcat.net/apis/scacl/scacl.proto
// DO NOT EDIT!

package scacl

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "golang.conradwood.net/apis/common"
import _ "golang.conradwood.net/apis/auth"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ModuleIDRequest struct {
	ModuleID uint64 `protobuf:"varint,1,opt,name=ModuleID" json:"ModuleID,omitempty"`
}

func (m *ModuleIDRequest) Reset()                    { *m = ModuleIDRequest{} }
func (m *ModuleIDRequest) String() string            { return proto.CompactTextString(m) }
func (*ModuleIDRequest) ProtoMessage()               {}
func (*ModuleIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ModuleIDRequest) GetModuleID() uint64 {
	if m != nil {
		return m.ModuleID
	}
	return 0
}

// response with an access right check
type ModuleAccessResponse struct {
	Granted bool `protobuf:"varint,1,opt,name=Granted" json:"Granted,omitempty"`
}

func (m *ModuleAccessResponse) Reset()                    { *m = ModuleAccessResponse{} }
func (m *ModuleAccessResponse) String() string            { return proto.CompactTextString(m) }
func (*ModuleAccessResponse) ProtoMessage()               {}
func (*ModuleAccessResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ModuleAccessResponse) GetGranted() bool {
	if m != nil {
		return m.Granted
	}
	return false
}

func init() {
	proto.RegisterType((*ModuleIDRequest)(nil), "scacl.ModuleIDRequest")
	proto.RegisterType((*ModuleAccessResponse)(nil), "scacl.ModuleAccessResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SCAclService service

type SCAclServiceClient interface {
	// get the acess rights for current user (context)
	ModuleByID(ctx context.Context, in *ModuleIDRequest, opts ...grpc.CallOption) (*ModuleAccessResponse, error)
}

type sCAclServiceClient struct {
	cc *grpc.ClientConn
}

func NewSCAclServiceClient(cc *grpc.ClientConn) SCAclServiceClient {
	return &sCAclServiceClient{cc}
}

func (c *sCAclServiceClient) ModuleByID(ctx context.Context, in *ModuleIDRequest, opts ...grpc.CallOption) (*ModuleAccessResponse, error) {
	out := new(ModuleAccessResponse)
	err := grpc.Invoke(ctx, "/scacl.SCAclService/ModuleByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SCAclService service

type SCAclServiceServer interface {
	// get the acess rights for current user (context)
	ModuleByID(context.Context, *ModuleIDRequest) (*ModuleAccessResponse, error)
}

func RegisterSCAclServiceServer(s *grpc.Server, srv SCAclServiceServer) {
	s.RegisterService(&_SCAclService_serviceDesc, srv)
}

func _SCAclService_ModuleByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModuleIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCAclServiceServer).ModuleByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scacl.SCAclService/ModuleByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCAclServiceServer).ModuleByID(ctx, req.(*ModuleIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SCAclService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scacl.SCAclService",
	HandlerType: (*SCAclServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ModuleByID",
			Handler:    _SCAclService_ModuleByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.singingcat.net/apis/scacl/scacl.proto",
}

func init() { proto.RegisterFile("golang.singingcat.net/apis/scacl/scacl.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x90, 0xcf, 0x4a, 0x03, 0x31,
	0x10, 0x87, 0x29, 0xf8, 0xa7, 0x0c, 0x82, 0x10, 0x44, 0xca, 0x7a, 0x29, 0x7b, 0x12, 0xd1, 0x54,
	0xf4, 0x09, 0xb6, 0x16, 0xa4, 0x07, 0x0f, 0x6e, 0x9f, 0x20, 0xce, 0x0e, 0xeb, 0xc2, 0x76, 0x66,
	0xcd, 0x64, 0x15, 0xdf, 0x5e, 0x4c, 0xb6, 0xea, 0x7a, 0xe8, 0x65, 0x92, 0xdf, 0x30, 0x5f, 0x92,
	0x2f, 0x70, 0x5d, 0x4b, 0xeb, 0xb8, 0xb6, 0xda, 0x70, 0xdd, 0x70, 0x8d, 0x2e, 0x58, 0xa6, 0xb0,
	0x70, 0x5d, 0xa3, 0x0b, 0x45, 0x87, 0x6d, 0xaa, 0xb6, 0xf3, 0x12, 0xc4, 0x1c, 0xc6, 0x90, 0xd9,
	0x01, 0x42, 0x61, 0xef, 0xaa, 0x0f, 0x91, 0xea, 0x17, 0x42, 0xd9, 0x6e, 0x85, 0x87, 0x25, 0x61,
	0xd9, 0xd5, 0x9e, 0x79, 0xd7, 0x87, 0xd7, 0x58, 0xd2, 0x6c, 0x7e, 0x03, 0xa7, 0x4f, 0x52, 0xf5,
	0x2d, 0xad, 0x57, 0x25, 0xbd, 0xf5, 0xa4, 0xc1, 0x64, 0x30, 0xdd, 0xb5, 0x66, 0x93, 0xf9, 0xe4,
	0xf2, 0xa0, 0xfc, 0xc9, 0xf9, 0x2d, 0x9c, 0xa5, 0x7d, 0x81, 0x48, 0xaa, 0x25, 0x69, 0x27, 0xac,
	0x64, 0x66, 0x70, 0xfc, 0xe8, 0x1d, 0x07, 0xaa, 0x22, 0x32, 0x2d, 0x77, 0xf1, 0xee, 0x19, 0x4e,
	0x36, 0x0f, 0x05, 0xb6, 0x1b, 0xf2, 0xef, 0x0d, 0x92, 0x29, 0x00, 0xd2, 0x09, 0xcb, 0xcf, 0xf5,
	0xca, 0x9c, 0xdb, 0xe4, 0xfb, 0xef, 0x0d, 0xd9, 0xc5, 0xa8, 0x3f, 0xbe, 0x6c, 0x99, 0xc3, 0x9c,
	0x29, 0xfc, 0xfd, 0xc3, 0x41, 0xf8, 0xdb, 0x30, 0x81, 0x2f, 0x47, 0x51, 0xef, 0xfe, 0x2b, 0x00,
	0x00, 0xff, 0xff, 0x07, 0xe2, 0xfb, 0xfd, 0x71, 0x01, 0x00, 0x00,
}
