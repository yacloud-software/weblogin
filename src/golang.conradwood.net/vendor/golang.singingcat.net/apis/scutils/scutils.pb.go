// Code generated by protoc-gen-go.
// source: golang.singingcat.net/apis/scutils/scutils.proto
// DO NOT EDIT!

/*
Package scutils is a generated protocol buffer package.

It is generated from these files:
	golang.singingcat.net/apis/scutils/scutils.proto

It has these top-level messages:
	ColourRequest
	ColourResponse
	Void
	ColourList
*/
package scutils

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ColourRequest struct {
	Text string `protobuf:"bytes,1,opt,name=Text" json:"Text,omitempty"`
}

func (m *ColourRequest) Reset()                    { *m = ColourRequest{} }
func (m *ColourRequest) String() string            { return proto.CompactTextString(m) }
func (*ColourRequest) ProtoMessage()               {}
func (*ColourRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ColourRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type ColourResponse struct {
	RGB        uint64 `protobuf:"varint,1,opt,name=RGB" json:"RGB,omitempty"`
	Brightness uint32 `protobuf:"varint,2,opt,name=Brightness" json:"Brightness,omitempty"`
	ColourName string `protobuf:"bytes,3,opt,name=ColourName" json:"ColourName,omitempty"`
}

func (m *ColourResponse) Reset()                    { *m = ColourResponse{} }
func (m *ColourResponse) String() string            { return proto.CompactTextString(m) }
func (*ColourResponse) ProtoMessage()               {}
func (*ColourResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ColourResponse) GetRGB() uint64 {
	if m != nil {
		return m.RGB
	}
	return 0
}

func (m *ColourResponse) GetBrightness() uint32 {
	if m != nil {
		return m.Brightness
	}
	return 0
}

func (m *ColourResponse) GetColourName() string {
	if m != nil {
		return m.ColourName
	}
	return ""
}

type Void struct {
}

func (m *Void) Reset()                    { *m = Void{} }
func (m *Void) String() string            { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()               {}
func (*Void) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ColourList struct {
	Colours []*ColourResponse `protobuf:"bytes,1,rep,name=Colours" json:"Colours,omitempty"`
}

func (m *ColourList) Reset()                    { *m = ColourList{} }
func (m *ColourList) String() string            { return proto.CompactTextString(m) }
func (*ColourList) ProtoMessage()               {}
func (*ColourList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ColourList) GetColours() []*ColourResponse {
	if m != nil {
		return m.Colours
	}
	return nil
}

func init() {
	proto.RegisterType((*ColourRequest)(nil), "scutils.ColourRequest")
	proto.RegisterType((*ColourResponse)(nil), "scutils.ColourResponse")
	proto.RegisterType((*Void)(nil), "scutils.Void")
	proto.RegisterType((*ColourList)(nil), "scutils.ColourList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SCUtilsServer service

type SCUtilsServerClient interface {
	// "decode" a colour string to useful values (e.g. red to 0xFF0000)
	DecodeColour(ctx context.Context, in *ColourRequest, opts ...grpc.CallOption) (*ColourResponse, error)
	GetColours(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ColourList, error)
}

type sCUtilsServerClient struct {
	cc *grpc.ClientConn
}

func NewSCUtilsServerClient(cc *grpc.ClientConn) SCUtilsServerClient {
	return &sCUtilsServerClient{cc}
}

func (c *sCUtilsServerClient) DecodeColour(ctx context.Context, in *ColourRequest, opts ...grpc.CallOption) (*ColourResponse, error) {
	out := new(ColourResponse)
	err := grpc.Invoke(ctx, "/scutils.SCUtilsServer/DecodeColour", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCUtilsServerClient) GetColours(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ColourList, error) {
	out := new(ColourList)
	err := grpc.Invoke(ctx, "/scutils.SCUtilsServer/GetColours", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SCUtilsServer service

type SCUtilsServerServer interface {
	// "decode" a colour string to useful values (e.g. red to 0xFF0000)
	DecodeColour(context.Context, *ColourRequest) (*ColourResponse, error)
	GetColours(context.Context, *Void) (*ColourList, error)
}

func RegisterSCUtilsServerServer(s *grpc.Server, srv SCUtilsServerServer) {
	s.RegisterService(&_SCUtilsServer_serviceDesc, srv)
}

func _SCUtilsServer_DecodeColour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCUtilsServerServer).DecodeColour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scutils.SCUtilsServer/DecodeColour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCUtilsServerServer).DecodeColour(ctx, req.(*ColourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCUtilsServer_GetColours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCUtilsServerServer).GetColours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scutils.SCUtilsServer/GetColours",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCUtilsServerServer).GetColours(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _SCUtilsServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scutils.SCUtilsServer",
	HandlerType: (*SCUtilsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DecodeColour",
			Handler:    _SCUtilsServer_DecodeColour_Handler,
		},
		{
			MethodName: "GetColours",
			Handler:    _SCUtilsServer_GetColours_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.singingcat.net/apis/scutils/scutils.proto",
}

func init() { proto.RegisterFile("golang.singingcat.net/apis/scutils/scutils.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x91, 0x4f, 0x4b, 0xf3, 0x40,
	0x10, 0xc6, 0xc9, 0x9b, 0xd0, 0xf2, 0x8e, 0x46, 0x64, 0x05, 0x0d, 0x3d, 0x48, 0x88, 0x1e, 0x72,
	0x4a, 0x6b, 0xfd, 0x00, 0x85, 0x54, 0xe8, 0x45, 0x3c, 0x6c, 0xd5, 0x7b, 0x9a, 0x0e, 0x71, 0x21,
	0xee, 0xc6, 0xcc, 0x44, 0x3c, 0xfb, 0xc9, 0x65, 0xf3, 0xa7, 0x44, 0xc5, 0x53, 0x66, 0x26, 0xbf,
	0x79, 0xf6, 0x19, 0x1e, 0x58, 0x14, 0xa6, 0xcc, 0x74, 0x91, 0x90, 0xd2, 0x85, 0xd2, 0x45, 0x9e,
	0x71, 0xa2, 0x91, 0xe7, 0x59, 0xa5, 0x68, 0x4e, 0x79, 0xc3, 0xaa, 0x3c, 0x7c, 0x93, 0xaa, 0x36,
	0x6c, 0xc4, 0xb4, 0x6f, 0xa3, 0x2b, 0xf0, 0xd7, 0xa6, 0x34, 0x4d, 0x2d, 0xf1, 0xad, 0x41, 0x62,
	0x21, 0xc0, 0x7b, 0xc4, 0x0f, 0x0e, 0x9c, 0xd0, 0x89, 0xff, 0xcb, 0xb6, 0x8e, 0x76, 0x70, 0x32,
	0x40, 0x54, 0x19, 0x4d, 0x28, 0x4e, 0xc1, 0x95, 0x9b, 0xb4, 0x85, 0x3c, 0x69, 0x4b, 0x71, 0x09,
	0x90, 0xd6, 0xaa, 0x78, 0x61, 0x8d, 0x44, 0xc1, 0xbf, 0xd0, 0x89, 0x7d, 0x39, 0x9a, 0xd8, 0xff,
	0x9d, 0xc6, 0x43, 0xf6, 0x8a, 0x81, 0xdb, 0xaa, 0x8f, 0x26, 0xd1, 0x04, 0xbc, 0x67, 0xa3, 0xf6,
	0xd1, 0x6a, 0xe0, 0xee, 0x15, 0xb1, 0xb8, 0x81, 0x69, 0xd7, 0x51, 0xe0, 0x84, 0x6e, 0x7c, 0xb4,
	0xbc, 0x48, 0x86, 0x43, 0xbe, 0x3b, 0x92, 0x03, 0xb7, 0xfc, 0x74, 0xc0, 0xdf, 0xae, 0x9f, 0x2c,
	0xb3, 0xc5, 0xfa, 0x1d, 0x6b, 0xb1, 0x82, 0xe3, 0x3b, 0xcc, 0xcd, 0x1e, 0x3b, 0x44, 0x9c, 0xff,
	0xd2, 0x68, 0x4f, 0x9f, 0xfd, 0xa5, 0x2d, 0x16, 0x00, 0x1b, 0xe4, 0xfe, 0x01, 0xe1, 0x1f, 0x30,
	0x6b, 0x78, 0x76, 0xf6, 0x63, 0xcb, 0xfa, 0x4e, 0xaf, 0x21, 0xd2, 0xc8, 0xe3, 0x40, 0xfa, 0x88,
	0x6c, 0x26, 0xc3, 0xc2, 0x6e, 0xd2, 0x86, 0x71, 0xfb, 0x15, 0x00, 0x00, 0xff, 0xff, 0x2c, 0xfd,
	0x29, 0xc4, 0xc0, 0x01, 0x00, 0x00,
}
