// Code generated by protoc-gen-go.
// source: conradwood.net/apis/banking/banking.proto
// DO NOT EDIT!

/*
Package banking is a generated protocol buffer package.

It is generated from these files:
	conradwood.net/apis/banking/banking.proto

It has these top-level messages:
	BankAccountRequest
	BankAccount
	Transaction
	TransactionList
	ByBankIDRequest
	EmailLog
	RecentRequest
	AccountByIDRequest
	SetBalanceRequest
*/
package banking

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BankAccountRequest struct {
	// propper IBAN
	IBAN string `protobuf:"bytes,1,opt,name=IBAN" json:"IBAN,omitempty"`
	// propper bic ;)
	BIC string `protobuf:"bytes,2,opt,name=BIC" json:"BIC,omitempty"`
	// UK style "account"
	Account string `protobuf:"bytes,3,opt,name=Account" json:"Account,omitempty"`
	// UK style "sortcode"
	SortCode string `protobuf:"bytes,4,opt,name=SortCode" json:"SortCode,omitempty"`
	// optional if exists, required for create
	Currency common.Currency `protobuf:"varint,5,opt,name=Currency,enum=common.Currency" json:"Currency,omitempty"`
}

func (m *BankAccountRequest) Reset()                    { *m = BankAccountRequest{} }
func (m *BankAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*BankAccountRequest) ProtoMessage()               {}
func (*BankAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BankAccountRequest) GetIBAN() string {
	if m != nil {
		return m.IBAN
	}
	return ""
}

func (m *BankAccountRequest) GetBIC() string {
	if m != nil {
		return m.BIC
	}
	return ""
}

func (m *BankAccountRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *BankAccountRequest) GetSortCode() string {
	if m != nil {
		return m.SortCode
	}
	return ""
}

func (m *BankAccountRequest) GetCurrency() common.Currency {
	if m != nil {
		return m.Currency
	}
	return common.Currency_UNKNOWN_CURRENCY
}

type BankAccount struct {
	ID uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	// propper IBAN
	IBAN string `protobuf:"bytes,2,opt,name=IBAN" json:"IBAN,omitempty"`
	BIC  string `protobuf:"bytes,3,opt,name=BIC" json:"BIC,omitempty"`
	// UK style "account"
	Account string `protobuf:"bytes,4,opt,name=Account" json:"Account,omitempty"`
	// UK style "sortcode"
	SortCode string `protobuf:"bytes,5,opt,name=SortCode" json:"SortCode,omitempty"`
	// the UserID of the owner of information about this bankaccount
	Owner string `protobuf:"bytes,6,opt,name=Owner" json:"Owner,omitempty"`
	// a user description
	Description string `protobuf:"bytes,7,opt,name=Description" json:"Description,omitempty"`
	// the currency of the account
	Currency common.Currency `protobuf:"varint,8,opt,name=Currency,enum=common.Currency" json:"Currency,omitempty"`
	// current balance
	Balance int64 `protobuf:"varint,9,opt,name=Balance" json:"Balance,omitempty"`
	// lastBalance set
	LastBalance uint32 `protobuf:"varint,10,opt,name=LastBalance" json:"LastBalance,omitempty"`
}

func (m *BankAccount) Reset()                    { *m = BankAccount{} }
func (m *BankAccount) String() string            { return proto.CompactTextString(m) }
func (*BankAccount) ProtoMessage()               {}
func (*BankAccount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BankAccount) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *BankAccount) GetIBAN() string {
	if m != nil {
		return m.IBAN
	}
	return ""
}

func (m *BankAccount) GetBIC() string {
	if m != nil {
		return m.BIC
	}
	return ""
}

func (m *BankAccount) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *BankAccount) GetSortCode() string {
	if m != nil {
		return m.SortCode
	}
	return ""
}

func (m *BankAccount) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *BankAccount) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *BankAccount) GetCurrency() common.Currency {
	if m != nil {
		return m.Currency
	}
	return common.Currency_UNKNOWN_CURRENCY
}

func (m *BankAccount) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *BankAccount) GetLastBalance() uint32 {
	if m != nil {
		return m.LastBalance
	}
	return 0
}

type Transaction struct {
	ID uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	// account to or from which transaction was logged
	BankAccountID uint64 `protobuf:"varint,2,opt,name=BankAccountID" json:"BankAccountID,omitempty"`
	// the ID the bank assigned to the transaction
	BankAssignedID string `protobuf:"bytes,3,opt,name=BankAssignedID" json:"BankAssignedID,omitempty"`
	// when the transaction was processed
	TransactionTime uint32 `protobuf:"varint,4,opt,name=TransactionTime" json:"TransactionTime,omitempty"`
	// the time we imported the transaction
	ImportedTime uint32 `protobuf:"varint,5,opt,name=ImportedTime" json:"ImportedTime,omitempty"`
	// name of the peer who we banked with (the entity) (Banks have multiline peers)
	PeerName1 string          `protobuf:"bytes,6,opt,name=PeerName1" json:"PeerName1,omitempty"`
	PeerName2 string          `protobuf:"bytes,7,opt,name=PeerName2" json:"PeerName2,omitempty"`
	Currency  common.Currency `protobuf:"varint,8,opt,name=Currency,enum=common.Currency" json:"Currency,omitempty"`
	Amount    uint64          `protobuf:"varint,9,opt,name=Amount" json:"Amount,omitempty"`
	Reference string          `protobuf:"bytes,10,opt,name=Reference" json:"Reference,omitempty"`
	// if true it is a payment, otherwise we received funds.
	Outbound bool `protobuf:"varint,11,opt,name=Outbound" json:"Outbound,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Transaction) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Transaction) GetBankAccountID() uint64 {
	if m != nil {
		return m.BankAccountID
	}
	return 0
}

func (m *Transaction) GetBankAssignedID() string {
	if m != nil {
		return m.BankAssignedID
	}
	return ""
}

func (m *Transaction) GetTransactionTime() uint32 {
	if m != nil {
		return m.TransactionTime
	}
	return 0
}

func (m *Transaction) GetImportedTime() uint32 {
	if m != nil {
		return m.ImportedTime
	}
	return 0
}

func (m *Transaction) GetPeerName1() string {
	if m != nil {
		return m.PeerName1
	}
	return ""
}

func (m *Transaction) GetPeerName2() string {
	if m != nil {
		return m.PeerName2
	}
	return ""
}

func (m *Transaction) GetCurrency() common.Currency {
	if m != nil {
		return m.Currency
	}
	return common.Currency_UNKNOWN_CURRENCY
}

func (m *Transaction) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Transaction) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

func (m *Transaction) GetOutbound() bool {
	if m != nil {
		return m.Outbound
	}
	return false
}

type TransactionList struct {
	Transactions []*Transaction `protobuf:"bytes,1,rep,name=Transactions" json:"Transactions,omitempty"`
}

func (m *TransactionList) Reset()                    { *m = TransactionList{} }
func (m *TransactionList) String() string            { return proto.CompactTextString(m) }
func (*TransactionList) ProtoMessage()               {}
func (*TransactionList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TransactionList) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type ByBankIDRequest struct {
	BankAccountID  uint64 `protobuf:"varint,1,opt,name=BankAccountID" json:"BankAccountID,omitempty"`
	BankAssignedID string `protobuf:"bytes,2,opt,name=BankAssignedID" json:"BankAssignedID,omitempty"`
}

func (m *ByBankIDRequest) Reset()                    { *m = ByBankIDRequest{} }
func (m *ByBankIDRequest) String() string            { return proto.CompactTextString(m) }
func (*ByBankIDRequest) ProtoMessage()               {}
func (*ByBankIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ByBankIDRequest) GetBankAccountID() uint64 {
	if m != nil {
		return m.BankAccountID
	}
	return 0
}

func (m *ByBankIDRequest) GetBankAssignedID() string {
	if m != nil {
		return m.BankAssignedID
	}
	return ""
}

type EmailLog struct {
	ID            uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	TransactionID uint64 `protobuf:"varint,2,opt,name=TransactionID" json:"TransactionID,omitempty"`
	RecipientID   string `protobuf:"bytes,3,opt,name=RecipientID" json:"RecipientID,omitempty"`
	Email         string `protobuf:"bytes,4,opt,name=Email" json:"Email,omitempty"`
	EmailDate     uint32 `protobuf:"varint,5,opt,name=EmailDate" json:"EmailDate,omitempty"`
}

func (m *EmailLog) Reset()                    { *m = EmailLog{} }
func (m *EmailLog) String() string            { return proto.CompactTextString(m) }
func (*EmailLog) ProtoMessage()               {}
func (*EmailLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *EmailLog) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *EmailLog) GetTransactionID() uint64 {
	if m != nil {
		return m.TransactionID
	}
	return 0
}

func (m *EmailLog) GetRecipientID() string {
	if m != nil {
		return m.RecipientID
	}
	return ""
}

func (m *EmailLog) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *EmailLog) GetEmailDate() uint32 {
	if m != nil {
		return m.EmailDate
	}
	return 0
}

type RecentRequest struct {
	// timestamp with the cut off date - transactions earlier than this won't be shown (0 to disable)
	Cutoff uint32 `protobuf:"varint,1,opt,name=Cutoff" json:"Cutoff,omitempty"`
	// maximum number of transactions to show (0 to disable)
	MaxTransactions uint32 `protobuf:"varint,2,opt,name=MaxTransactions" json:"MaxTransactions,omitempty"`
}

func (m *RecentRequest) Reset()                    { *m = RecentRequest{} }
func (m *RecentRequest) String() string            { return proto.CompactTextString(m) }
func (*RecentRequest) ProtoMessage()               {}
func (*RecentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RecentRequest) GetCutoff() uint32 {
	if m != nil {
		return m.Cutoff
	}
	return 0
}

func (m *RecentRequest) GetMaxTransactions() uint32 {
	if m != nil {
		return m.MaxTransactions
	}
	return 0
}

type AccountByIDRequest struct {
	ID uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *AccountByIDRequest) Reset()                    { *m = AccountByIDRequest{} }
func (m *AccountByIDRequest) String() string            { return proto.CompactTextString(m) }
func (*AccountByIDRequest) ProtoMessage()               {}
func (*AccountByIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AccountByIDRequest) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type SetBalanceRequest struct {
	BankAccountID uint64 `protobuf:"varint,1,opt,name=BankAccountID" json:"BankAccountID,omitempty"`
	Amount        int64  `protobuf:"varint,2,opt,name=Amount" json:"Amount,omitempty"`
}

func (m *SetBalanceRequest) Reset()                    { *m = SetBalanceRequest{} }
func (m *SetBalanceRequest) String() string            { return proto.CompactTextString(m) }
func (*SetBalanceRequest) ProtoMessage()               {}
func (*SetBalanceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SetBalanceRequest) GetBankAccountID() uint64 {
	if m != nil {
		return m.BankAccountID
	}
	return 0
}

func (m *SetBalanceRequest) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func init() {
	proto.RegisterType((*BankAccountRequest)(nil), "banking.BankAccountRequest")
	proto.RegisterType((*BankAccount)(nil), "banking.BankAccount")
	proto.RegisterType((*Transaction)(nil), "banking.Transaction")
	proto.RegisterType((*TransactionList)(nil), "banking.TransactionList")
	proto.RegisterType((*ByBankIDRequest)(nil), "banking.ByBankIDRequest")
	proto.RegisterType((*EmailLog)(nil), "banking.EmailLog")
	proto.RegisterType((*RecentRequest)(nil), "banking.RecentRequest")
	proto.RegisterType((*AccountByIDRequest)(nil), "banking.AccountByIDRequest")
	proto.RegisterType((*SetBalanceRequest)(nil), "banking.SetBalanceRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Banking service

type BankingClient interface {
	// get a bankaccount by ID
	GetAccountByID(ctx context.Context, in *AccountByIDRequest, opts ...grpc.CallOption) (*BankAccount, error)
	// get a bankaccount by IBAN or sortcode
	GetAccount(ctx context.Context, in *BankAccountRequest, opts ...grpc.CallOption) (*BankAccount, error)
	// create an account
	CreateAccount(ctx context.Context, in *BankAccount, opts ...grpc.CallOption) (*BankAccount, error)
	// get or create an account
	GetOrCreateAccount(ctx context.Context, in *BankAccountRequest, opts ...grpc.CallOption) (*BankAccount, error)
	// add Transaction
	AddTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Transaction, error)
	// most recent transactions..
	MostRecent(ctx context.Context, in *RecentRequest, opts ...grpc.CallOption) (*TransactionList, error)
	// set balance on account
	SetBalance(ctx context.Context, in *SetBalanceRequest, opts ...grpc.CallOption) (*common.Void, error)
	// get a transaction by bankassignedid and account (check if it was already imported)
	ByBankID(ctx context.Context, in *ByBankIDRequest, opts ...grpc.CallOption) (*TransactionList, error)
}

type bankingClient struct {
	cc *grpc.ClientConn
}

func NewBankingClient(cc *grpc.ClientConn) BankingClient {
	return &bankingClient{cc}
}

func (c *bankingClient) GetAccountByID(ctx context.Context, in *AccountByIDRequest, opts ...grpc.CallOption) (*BankAccount, error) {
	out := new(BankAccount)
	err := grpc.Invoke(ctx, "/banking.Banking/GetAccountByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingClient) GetAccount(ctx context.Context, in *BankAccountRequest, opts ...grpc.CallOption) (*BankAccount, error) {
	out := new(BankAccount)
	err := grpc.Invoke(ctx, "/banking.Banking/GetAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingClient) CreateAccount(ctx context.Context, in *BankAccount, opts ...grpc.CallOption) (*BankAccount, error) {
	out := new(BankAccount)
	err := grpc.Invoke(ctx, "/banking.Banking/CreateAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingClient) GetOrCreateAccount(ctx context.Context, in *BankAccountRequest, opts ...grpc.CallOption) (*BankAccount, error) {
	out := new(BankAccount)
	err := grpc.Invoke(ctx, "/banking.Banking/GetOrCreateAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingClient) AddTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := grpc.Invoke(ctx, "/banking.Banking/AddTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingClient) MostRecent(ctx context.Context, in *RecentRequest, opts ...grpc.CallOption) (*TransactionList, error) {
	out := new(TransactionList)
	err := grpc.Invoke(ctx, "/banking.Banking/MostRecent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingClient) SetBalance(ctx context.Context, in *SetBalanceRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/banking.Banking/SetBalance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingClient) ByBankID(ctx context.Context, in *ByBankIDRequest, opts ...grpc.CallOption) (*TransactionList, error) {
	out := new(TransactionList)
	err := grpc.Invoke(ctx, "/banking.Banking/ByBankID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Banking service

type BankingServer interface {
	// get a bankaccount by ID
	GetAccountByID(context.Context, *AccountByIDRequest) (*BankAccount, error)
	// get a bankaccount by IBAN or sortcode
	GetAccount(context.Context, *BankAccountRequest) (*BankAccount, error)
	// create an account
	CreateAccount(context.Context, *BankAccount) (*BankAccount, error)
	// get or create an account
	GetOrCreateAccount(context.Context, *BankAccountRequest) (*BankAccount, error)
	// add Transaction
	AddTransaction(context.Context, *Transaction) (*Transaction, error)
	// most recent transactions..
	MostRecent(context.Context, *RecentRequest) (*TransactionList, error)
	// set balance on account
	SetBalance(context.Context, *SetBalanceRequest) (*common.Void, error)
	// get a transaction by bankassignedid and account (check if it was already imported)
	ByBankID(context.Context, *ByBankIDRequest) (*TransactionList, error)
}

func RegisterBankingServer(s *grpc.Server, srv BankingServer) {
	s.RegisterService(&_Banking_serviceDesc, srv)
}

func _Banking_GetAccountByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServer).GetAccountByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banking.Banking/GetAccountByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServer).GetAccountByID(ctx, req.(*AccountByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banking_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banking.Banking/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServer).GetAccount(ctx, req.(*BankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banking_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banking.Banking/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServer).CreateAccount(ctx, req.(*BankAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banking_GetOrCreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServer).GetOrCreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banking.Banking/GetOrCreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServer).GetOrCreateAccount(ctx, req.(*BankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banking_AddTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServer).AddTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banking.Banking/AddTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServer).AddTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banking_MostRecent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServer).MostRecent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banking.Banking/MostRecent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServer).MostRecent(ctx, req.(*RecentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banking_SetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServer).SetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banking.Banking/SetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServer).SetBalance(ctx, req.(*SetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banking_ByBankID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByBankIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServer).ByBankID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banking.Banking/ByBankID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServer).ByBankID(ctx, req.(*ByBankIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Banking_serviceDesc = grpc.ServiceDesc{
	ServiceName: "banking.Banking",
	HandlerType: (*BankingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountByID",
			Handler:    _Banking_GetAccountByID_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _Banking_GetAccount_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _Banking_CreateAccount_Handler,
		},
		{
			MethodName: "GetOrCreateAccount",
			Handler:    _Banking_GetOrCreateAccount_Handler,
		},
		{
			MethodName: "AddTransaction",
			Handler:    _Banking_AddTransaction_Handler,
		},
		{
			MethodName: "MostRecent",
			Handler:    _Banking_MostRecent_Handler,
		},
		{
			MethodName: "SetBalance",
			Handler:    _Banking_SetBalance_Handler,
		},
		{
			MethodName: "ByBankID",
			Handler:    _Banking_ByBankID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "conradwood.net/apis/banking/banking.proto",
}

func init() { proto.RegisterFile("conradwood.net/apis/banking/banking.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 775 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x55, 0xcf, 0x6b, 0xdb, 0x48,
	0x14, 0x46, 0xf2, 0x8f, 0xd8, 0xcf, 0xb1, 0x93, 0x1d, 0x42, 0x50, 0x9c, 0x5d, 0x30, 0x22, 0x2c,
	0xde, 0x8b, 0xc3, 0x3a, 0xb0, 0x04, 0x76, 0xc9, 0x62, 0xd9, 0x25, 0x88, 0xe6, 0x47, 0x33, 0x09,
	0xbd, 0x96, 0x89, 0x34, 0x31, 0x22, 0xf1, 0x8c, 0x2b, 0x8d, 0x49, 0x73, 0xcd, 0xb5, 0xe7, 0x5e,
	0x7a, 0xec, 0xa5, 0xd0, 0xbf, 0xb2, 0xcc, 0x48, 0xb2, 0x46, 0xb2, 0x4c, 0x49, 0x7b, 0x92, 0xde,
	0xf7, 0xde, 0xcc, 0x7c, 0xfa, 0xde, 0xf7, 0x46, 0xf0, 0x97, 0xc7, 0x59, 0x48, 0xfc, 0x47, 0xce,
	0xfd, 0x01, 0xa3, 0xe2, 0x90, 0xcc, 0x83, 0xe8, 0xf0, 0x96, 0xb0, 0xfb, 0x80, 0x4d, 0xd3, 0xe7,
	0x60, 0x1e, 0x72, 0xc1, 0xd1, 0x46, 0x12, 0x76, 0x07, 0x53, 0xfe, 0x40, 0xd8, 0x74, 0x50, 0xb6,
	0xd4, 0xe3, 0xb3, 0x19, 0x67, 0xc9, 0x23, 0x5e, 0x68, 0x7f, 0x33, 0x00, 0x39, 0x84, 0xdd, 0x8f,
	0x3c, 0x8f, 0x2f, 0x98, 0xc0, 0xf4, 0xfd, 0x82, 0x46, 0x02, 0x21, 0xa8, 0xba, 0xce, 0xe8, 0xc2,
	0x32, 0x7a, 0x46, 0xbf, 0x89, 0xd5, 0x3b, 0xda, 0x86, 0x8a, 0xe3, 0x8e, 0x2d, 0x53, 0x41, 0xf2,
	0x15, 0x59, 0xb0, 0x91, 0xac, 0xb3, 0x2a, 0x0a, 0x4d, 0x43, 0xd4, 0x85, 0xc6, 0x35, 0x0f, 0xc5,
	0x98, 0xfb, 0xd4, 0xaa, 0xaa, 0xd4, 0x32, 0x46, 0xc7, 0xd0, 0x18, 0x2f, 0xc2, 0x90, 0x32, 0xef,
	0xc9, 0xaa, 0xf5, 0x8c, 0x7e, 0x67, 0xb8, 0x3d, 0x48, 0x38, 0xa5, 0xb8, 0x03, 0x9f, 0x9f, 0xf7,
	0xea, 0x8b, 0x80, 0x89, 0xa3, 0x21, 0x5e, 0x56, 0xdb, 0x5f, 0x4d, 0x68, 0x69, 0x64, 0x51, 0x07,
	0x4c, 0x77, 0xa2, 0x38, 0x56, 0xb1, 0xe9, 0x4e, 0x96, 0xac, 0xcd, 0x55, 0xd6, 0x95, 0x52, 0xd6,
	0xd5, 0xf5, 0xac, 0x6b, 0x05, 0xd6, 0x3b, 0x50, 0xbb, 0x7c, 0x64, 0x34, 0xb4, 0xea, 0x2a, 0x11,
	0x07, 0xa8, 0x07, 0xad, 0x09, 0x8d, 0xbc, 0x30, 0x98, 0x8b, 0x80, 0x33, 0x6b, 0x43, 0xe5, 0x74,
	0x28, 0xf7, 0xb5, 0x8d, 0x97, 0x7c, 0xad, 0xe4, 0xe9, 0x90, 0x07, 0xc2, 0x3c, 0x6a, 0x35, 0x7b,
	0x46, 0xbf, 0x82, 0xd3, 0x50, 0x9e, 0x7a, 0x46, 0x22, 0x91, 0x66, 0xa1, 0x67, 0xf4, 0xdb, 0x58,
	0x87, 0xec, 0x4f, 0x15, 0x68, 0xdd, 0x84, 0x84, 0x45, 0xc4, 0x53, 0x2c, 0x8a, 0x4a, 0x1d, 0x43,
	0x5b, 0x13, 0xd2, 0x9d, 0x28, 0xc9, 0xaa, 0x0e, 0xfa, 0xf2, 0xbc, 0xd7, 0x91, 0x56, 0x22, 0x71,
	0x62, 0x10, 0xf8, 0x38, 0x5f, 0x88, 0xfe, 0x84, 0x8e, 0x02, 0xa2, 0x28, 0x98, 0x32, 0xea, 0xbb,
	0x93, 0x44, 0xda, 0x02, 0x8a, 0xfa, 0xb0, 0xa5, 0x11, 0xb8, 0x09, 0x66, 0xb1, 0x11, 0xda, 0xb8,
	0x08, 0x23, 0x1b, 0x36, 0xdd, 0xd9, 0x9c, 0x87, 0x82, 0xfa, 0xaa, 0xac, 0xa6, 0xca, 0x72, 0x18,
	0xfa, 0x1d, 0x9a, 0x6f, 0x28, 0x0d, 0x2f, 0xc8, 0x8c, 0xfe, 0x9d, 0x74, 0x20, 0x03, 0xf4, 0xec,
	0x30, 0xe9, 0x41, 0x06, 0xfc, 0x42, 0x07, 0x76, 0xa1, 0x3e, 0x9a, 0x29, 0xa3, 0x34, 0x95, 0x72,
	0x49, 0x24, 0xcf, 0xc3, 0xf4, 0x8e, 0xca, 0xa2, 0x58, 0xfd, 0x26, 0xce, 0x00, 0xe9, 0xa2, 0xcb,
	0x85, 0xb8, 0xe5, 0x0b, 0xe6, 0x5b, 0xad, 0x9e, 0xd1, 0x6f, 0xe0, 0x65, 0x6c, 0xbf, 0xce, 0xa9,
	0x72, 0x16, 0x44, 0x02, 0x1d, 0xc3, 0xa6, 0x06, 0x45, 0x96, 0xd1, 0xab, 0xf4, 0x5b, 0xc3, 0x9d,
	0x41, 0x3a, 0xe0, 0x5a, 0x12, 0xe7, 0x2a, 0xed, 0x77, 0xb0, 0xe5, 0x3c, 0x49, 0xd9, 0xdd, 0x49,
	0x3a, 0xb7, 0x07, 0xc5, 0xbe, 0xc6, 0x2d, 0xff, 0x61, 0x0f, 0xcd, 0xb2, 0x1e, 0xca, 0xcb, 0xa1,
	0xf1, 0x6a, 0x46, 0x82, 0x87, 0x33, 0x3e, 0x2d, 0xb3, 0x90, 0xc6, 0x26, 0x6f, 0x21, 0x91, 0x25,
	0x94, 0x85, 0x72, 0x85, 0xd2, 0xbe, 0x98, 0x7a, 0xc1, 0x3c, 0xa0, 0x8a, 0x62, 0xec, 0x1f, 0x1d,
	0x92, 0xc3, 0xa6, 0xce, 0x4d, 0x06, 0x34, 0x0e, 0xa4, 0xec, 0xea, 0x65, 0x42, 0x44, 0xea, 0x92,
	0x0c, 0xb0, 0xaf, 0xa0, 0x8d, 0xa9, 0x47, 0xb3, 0x3b, 0x6c, 0x17, 0xea, 0xe3, 0x85, 0xe0, 0x77,
	0x77, 0x8a, 0x74, 0x1b, 0x27, 0x91, 0x74, 0xe6, 0x39, 0xf9, 0x90, 0xd3, 0xdc, 0x8c, 0x9d, 0x59,
	0x80, 0xed, 0x03, 0x40, 0x89, 0x68, 0xce, 0x53, 0xa6, 0x71, 0x41, 0x08, 0xfb, 0x0a, 0x7e, 0xbb,
	0xa6, 0xe9, 0xe4, 0xbd, 0xac, 0x11, 0x99, 0xc1, 0x4c, 0x35, 0xe1, 0x49, 0x34, 0xfc, 0x58, 0x95,
	0xb3, 0xaf, 0xfa, 0x8f, 0xc6, 0xd0, 0x39, 0xa5, 0x42, 0xe3, 0x81, 0xf6, 0x97, 0xde, 0x58, 0x65,
	0xd7, 0xcd, 0x8c, 0xa3, 0xdf, 0x94, 0xff, 0x03, 0x64, 0x9b, 0x68, 0x1b, 0xac, 0x5e, 0xfd, 0x6b,
	0x36, 0xf8, 0x17, 0xda, 0xe3, 0x90, 0x12, 0x41, 0x53, 0xa0, 0xb4, 0x6c, 0xcd, 0xe2, 0x53, 0x40,
	0xa7, 0x54, 0x5c, 0x86, 0xf9, 0x1d, 0x7e, 0x82, 0xc5, 0x7f, 0xd0, 0x19, 0xf9, 0xbe, 0x7e, 0xb1,
	0x95, 0xce, 0x49, 0xb7, 0x14, 0x45, 0x27, 0x00, 0xe7, 0x3c, 0x12, 0xb1, 0x4b, 0xd0, 0xee, 0xb2,
	0x26, 0x67, 0x9b, 0xae, 0x55, 0xb6, 0x56, 0x4d, 0xea, 0x3f, 0x00, 0x59, 0xa3, 0x51, 0x77, 0x59,
	0xb7, 0xd2, 0xfd, 0xee, 0x66, 0x7a, 0xc1, 0xbc, 0xe5, 0x81, 0x8f, 0x4e, 0xa0, 0x91, 0xce, 0x29,
	0xca, 0x76, 0x2f, 0x8c, 0xee, 0xfa, 0x73, 0x9d, 0x3f, 0x60, 0x9f, 0x51, 0xa1, 0xff, 0xd2, 0xe5,
	0xef, 0x3c, 0x2d, 0xbf, 0xad, 0xab, 0x3f, 0xf9, 0xd1, 0xf7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0d,
	0x3d, 0xbf, 0x81, 0x2f, 0x08, 0x00, 0x00,
}
