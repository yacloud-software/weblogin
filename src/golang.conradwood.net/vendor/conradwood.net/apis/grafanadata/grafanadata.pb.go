// Code generated by protoc-gen-go.
// source: conradwood.net/apis/grafanadata/grafanadata.proto
// DO NOT EDIT!

/*
Package grafanadata is a generated protocol buffer package.

It is generated from these files:
	conradwood.net/apis/grafanadata/grafanadata.proto

It has these top-level messages:
	PingResponse
*/
package grafanadata

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// comment: message pingresponse
type PingResponse struct {
	// comment: field pingresponse.response
	Response string `protobuf:"bytes,1,opt,name=Response" json:"Response,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PingResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func init() {
	proto.RegisterType((*PingResponse)(nil), "grafanadata.PingResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GrafanaData service

type GrafanaDataClient interface {
	// comment: rpc ping
	Ping(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PingResponse, error)
}

type grafanaDataClient struct {
	cc *grpc.ClientConn
}

func NewGrafanaDataClient(cc *grpc.ClientConn) GrafanaDataClient {
	return &grafanaDataClient{cc}
}

func (c *grafanaDataClient) Ping(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/grafanadata.GrafanaData/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GrafanaData service

type GrafanaDataServer interface {
	// comment: rpc ping
	Ping(context.Context, *common.Void) (*PingResponse, error)
}

func RegisterGrafanaDataServer(s *grpc.Server, srv GrafanaDataServer) {
	s.RegisterService(&_GrafanaData_serviceDesc, srv)
}

func _GrafanaData_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafanaDataServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafanadata.GrafanaData/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafanaDataServer).Ping(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _GrafanaData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grafanadata.GrafanaData",
	HandlerType: (*GrafanaDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GrafanaData_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "conradwood.net/apis/grafanadata/grafanadata.proto",
}

func init() { proto.RegisterFile("conradwood.net/apis/grafanadata/grafanadata.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 173 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x32, 0x4c, 0xce, 0xcf, 0x2b,
	0x4a, 0x4c, 0x29, 0xcf, 0xcf, 0x4f, 0xd1, 0xcb, 0x4b, 0x2d, 0xd1, 0x4f, 0x2c, 0xc8, 0x2c, 0xd6,
	0x4f, 0x2f, 0x4a, 0x4c, 0x4b, 0xcc, 0x4b, 0x4c, 0x49, 0x2c, 0x49, 0x44, 0x66, 0xeb, 0x15, 0x14,
	0xe5, 0x97, 0xe4, 0x0b, 0x71, 0x23, 0x09, 0x49, 0xe9, 0xa5, 0xe7, 0xe7, 0x24, 0xe6, 0xa5, 0xeb,
	0x61, 0x33, 0x26, 0x39, 0x3f, 0x37, 0x37, 0x3f, 0x0f, 0x4a, 0x41, 0x34, 0x2b, 0x69, 0x71, 0xf1,
	0x04, 0x64, 0xe6, 0xa5, 0x07, 0xa5, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x49, 0x71, 0x71,
	0xc0, 0xd8, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x70, 0xbe, 0x91, 0x1d, 0x17, 0xb7, 0x3b,
	0xc4, 0x2a, 0x97, 0xc4, 0x92, 0x44, 0x21, 0x7d, 0x2e, 0x16, 0x90, 0x56, 0x21, 0x1e, 0x3d, 0xa8,
	0x89, 0x61, 0xf9, 0x99, 0x29, 0x52, 0x92, 0x7a, 0xc8, 0x2e, 0x44, 0x36, 0xdb, 0x49, 0x91, 0x4b,
	0x3e, 0x2f, 0xb5, 0x04, 0xd9, 0x69, 0x20, 0x67, 0x21, 0xab, 0x4f, 0x62, 0x03, 0xbb, 0xca, 0x18,
	0x10, 0x00, 0x00, 0xff, 0xff, 0x52, 0xd4, 0x99, 0x7a, 0x07, 0x01, 0x00, 0x00,
}
