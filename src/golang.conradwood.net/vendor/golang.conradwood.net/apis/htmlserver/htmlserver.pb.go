// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/htmlserver/htmlserver.proto
// DO NOT EDIT!

/*
Package htmlserver is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/htmlserver/htmlserver.proto

It has these top-level messages:
	PageRequest
	Page
*/
package htmlserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import h2gproxy "golang.conradwood.net/apis/h2gproxy"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PageRequest struct {
	Page   string `protobuf:"bytes,1,opt,name=Page" json:"Page,omitempty"`
	Title  string `protobuf:"bytes,2,opt,name=Title" json:"Title,omitempty"`
	Text   string `protobuf:"bytes,3,opt,name=Text" json:"Text,omitempty"`
	Header string `protobuf:"bytes,4,opt,name=Header" json:"Header,omitempty"`
}

func (m *PageRequest) Reset()                    { *m = PageRequest{} }
func (m *PageRequest) String() string            { return proto.CompactTextString(m) }
func (*PageRequest) ProtoMessage()               {}
func (*PageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PageRequest) GetPage() string {
	if m != nil {
		return m.Page
	}
	return ""
}

func (m *PageRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PageRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *PageRequest) GetHeader() string {
	if m != nil {
		return m.Header
	}
	return ""
}

type Page struct {
	Body string `protobuf:"bytes,1,opt,name=Body" json:"Body,omitempty"`
}

func (m *Page) Reset()                    { *m = Page{} }
func (m *Page) String() string            { return proto.CompactTextString(m) }
func (*Page) ProtoMessage()               {}
func (*Page) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Page) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func init() {
	proto.RegisterType((*PageRequest)(nil), "htmlserver.PageRequest")
	proto.RegisterType((*Page)(nil), "htmlserver.Page")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HTMLServerService service

type HTMLServerServiceClient interface {
	GetPage(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*Page, error)
	ServeHTML(ctx context.Context, in *h2gproxy.ServeRequest, opts ...grpc.CallOption) (*h2gproxy.ServeResponse, error)
}

type hTMLServerServiceClient struct {
	cc *grpc.ClientConn
}

func NewHTMLServerServiceClient(cc *grpc.ClientConn) HTMLServerServiceClient {
	return &hTMLServerServiceClient{cc}
}

func (c *hTMLServerServiceClient) GetPage(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := grpc.Invoke(ctx, "/htmlserver.HTMLServerService/GetPage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTMLServerServiceClient) ServeHTML(ctx context.Context, in *h2gproxy.ServeRequest, opts ...grpc.CallOption) (*h2gproxy.ServeResponse, error) {
	out := new(h2gproxy.ServeResponse)
	err := grpc.Invoke(ctx, "/htmlserver.HTMLServerService/ServeHTML", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HTMLServerService service

type HTMLServerServiceServer interface {
	GetPage(context.Context, *PageRequest) (*Page, error)
	ServeHTML(context.Context, *h2gproxy.ServeRequest) (*h2gproxy.ServeResponse, error)
}

func RegisterHTMLServerServiceServer(s *grpc.Server, srv HTMLServerServiceServer) {
	s.RegisterService(&_HTMLServerService_serviceDesc, srv)
}

func _HTMLServerService_GetPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTMLServerServiceServer).GetPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/htmlserver.HTMLServerService/GetPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTMLServerServiceServer).GetPage(ctx, req.(*PageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTMLServerService_ServeHTML_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(h2gproxy.ServeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTMLServerServiceServer).ServeHTML(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/htmlserver.HTMLServerService/ServeHTML",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTMLServerServiceServer).ServeHTML(ctx, req.(*h2gproxy.ServeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HTMLServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "htmlserver.HTMLServerService",
	HandlerType: (*HTMLServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPage",
			Handler:    _HTMLServerService_GetPage_Handler,
		},
		{
			MethodName: "ServeHTML",
			Handler:    _HTMLServerService_ServeHTML_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/htmlserver/htmlserver.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/htmlserver/htmlserver.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x50, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x25, 0x5a, 0x2b, 0x1d, 0x2f, 0xba, 0x48, 0x1b, 0x72, 0x92, 0x82, 0xe8, 0x69, 0x0b, 0x51,
	0x3c, 0x79, 0xea, 0xc5, 0x1e, 0x14, 0xa4, 0xe6, 0x07, 0xd6, 0x64, 0x88, 0x81, 0xb8, 0x13, 0x77,
	0x57, 0x6d, 0xbf, 0xc0, 0xdf, 0x96, 0x99, 0xb4, 0x75, 0x51, 0xf0, 0xb2, 0xbc, 0x79, 0x3b, 0xef,
	0xed, 0xbe, 0x07, 0x37, 0x35, 0xb5, 0xc6, 0xd6, 0xba, 0x24, 0xeb, 0x4c, 0xf5, 0x49, 0x54, 0x69,
	0x8b, 0x61, 0x66, 0xba, 0xc6, 0xcf, 0x5e, 0xc2, 0x6b, 0xeb, 0xd1, 0x7d, 0xa0, 0x8b, 0xa0, 0xee,
	0x1c, 0x05, 0x52, 0xf0, 0xc3, 0x64, 0xf9, 0x7f, 0x1e, 0x79, 0xdd, 0x39, 0x5a, 0xad, 0x77, 0xa0,
	0xd7, 0x4f, 0x4b, 0x38, 0x7a, 0x34, 0x35, 0x2e, 0xf1, 0xed, 0x1d, 0x7d, 0x50, 0x0a, 0x06, 0x3c,
	0xa6, 0xc9, 0x59, 0x72, 0x39, 0x5a, 0x0a, 0x56, 0xa7, 0x70, 0x50, 0x34, 0xa1, 0xc5, 0x74, 0x4f,
	0xc8, 0x7e, 0xe0, 0xcd, 0x02, 0x57, 0x21, 0xdd, 0xef, 0x37, 0x19, 0xab, 0x31, 0x0c, 0x17, 0x68,
	0x2a, 0x74, 0xe9, 0x40, 0xd8, 0xcd, 0x34, 0xcd, 0x7a, 0x57, 0xd6, 0xcc, 0xa9, 0x5a, 0x6f, 0xdd,
	0x19, 0xe7, 0x5f, 0x09, 0x9c, 0x2c, 0x8a, 0x87, 0xfb, 0x27, 0xc9, 0xc0, 0x67, 0x53, 0xa2, 0xba,
	0x86, 0xc3, 0x3b, 0x0c, 0x22, 0x9a, 0xe8, 0x28, 0x74, 0xf4, 0xd7, 0xec, 0xf8, 0xf7, 0x85, 0xba,
	0x85, 0x91, 0xd8, 0xb0, 0x9f, 0x1a, 0xeb, 0x5d, 0x54, 0x21, 0xb7, 0xb2, 0xc9, 0x1f, 0xde, 0x77,
	0x64, 0x3d, 0xce, 0x2f, 0xe0, 0xdc, 0x62, 0x88, 0xdb, 0xdb, 0xf4, 0xc9, 0x05, 0x46, 0x6f, 0x3d,
	0x0f, 0xa5, 0xba, 0xab, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xba, 0xfa, 0xdf, 0xf5, 0xb4, 0x01,
	0x00, 0x00,
}
