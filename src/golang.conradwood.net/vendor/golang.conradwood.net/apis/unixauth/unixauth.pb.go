// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/unixauth/unixauth.proto
// DO NOT EDIT!

/*
Package unixauth is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/unixauth/unixauth.proto

It has these top-level messages:
	UnixUser
	UnixGroup
	UnixGroupList
	ByNameRequest
	ByIDRequest
	UnixUserList
	UsersForHostRequest
	AuthorizedKeysFile
	LoginRequest
	LoginResponse
	GroupMapping
	UserMapping
	SSHKey
	SSHUserKey
	GetSSHKeysRequest
*/
package unixauth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"
import auth "golang.conradwood.net/apis/auth"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// stuff a *nix box needs to authenticate
type UnixUser struct {
	User      *auth.User     `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
	Username  string         `protobuf:"bytes,2,opt,name=Username" json:"Username,omitempty"`
	Uid       uint32         `protobuf:"varint,3,opt,name=Uid" json:"Uid,omitempty"`
	Gid       uint32         `protobuf:"varint,4,opt,name=Gid" json:"Gid,omitempty"`
	GroupList *UnixGroupList `protobuf:"bytes,5,opt,name=GroupList" json:"GroupList,omitempty"`
}

func (m *UnixUser) Reset()                    { *m = UnixUser{} }
func (m *UnixUser) String() string            { return proto.CompactTextString(m) }
func (*UnixUser) ProtoMessage()               {}
func (*UnixUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UnixUser) GetUser() *auth.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UnixUser) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UnixUser) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UnixUser) GetGid() uint32 {
	if m != nil {
		return m.Gid
	}
	return 0
}

func (m *UnixUser) GetGroupList() *UnixGroupList {
	if m != nil {
		return m.GroupList
	}
	return nil
}

type UnixGroup struct {
	Gid  uint32 `protobuf:"varint,1,opt,name=Gid" json:"Gid,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
}

func (m *UnixGroup) Reset()                    { *m = UnixGroup{} }
func (m *UnixGroup) String() string            { return proto.CompactTextString(m) }
func (*UnixGroup) ProtoMessage()               {}
func (*UnixGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UnixGroup) GetGid() uint32 {
	if m != nil {
		return m.Gid
	}
	return 0
}

func (m *UnixGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UnixGroupList struct {
	Groups []*UnixGroup `protobuf:"bytes,1,rep,name=Groups" json:"Groups,omitempty"`
}

func (m *UnixGroupList) Reset()                    { *m = UnixGroupList{} }
func (m *UnixGroupList) String() string            { return proto.CompactTextString(m) }
func (*UnixGroupList) ProtoMessage()               {}
func (*UnixGroupList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UnixGroupList) GetGroups() []*UnixGroup {
	if m != nil {
		return m.Groups
	}
	return nil
}

type ByNameRequest struct {
	Username string `protobuf:"bytes,1,opt,name=Username" json:"Username,omitempty"`
}

func (m *ByNameRequest) Reset()                    { *m = ByNameRequest{} }
func (m *ByNameRequest) String() string            { return proto.CompactTextString(m) }
func (*ByNameRequest) ProtoMessage()               {}
func (*ByNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ByNameRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type ByIDRequest struct {
	ID uint32 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *ByIDRequest) Reset()                    { *m = ByIDRequest{} }
func (m *ByIDRequest) String() string            { return proto.CompactTextString(m) }
func (*ByIDRequest) ProtoMessage()               {}
func (*ByIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ByIDRequest) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

type UnixUserList struct {
	Users []*UnixUser `protobuf:"bytes,1,rep,name=Users" json:"Users,omitempty"`
}

func (m *UnixUserList) Reset()                    { *m = UnixUserList{} }
func (m *UnixUserList) String() string            { return proto.CompactTextString(m) }
func (*UnixUserList) ProtoMessage()               {}
func (*UnixUserList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UnixUserList) GetUsers() []*UnixUser {
	if m != nil {
		return m.Users
	}
	return nil
}

type UsersForHostRequest struct {
	HostTags []string `protobuf:"bytes,1,rep,name=HostTags" json:"HostTags,omitempty"`
}

func (m *UsersForHostRequest) Reset()                    { *m = UsersForHostRequest{} }
func (m *UsersForHostRequest) String() string            { return proto.CompactTextString(m) }
func (*UsersForHostRequest) ProtoMessage()               {}
func (*UsersForHostRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UsersForHostRequest) GetHostTags() []string {
	if m != nil {
		return m.HostTags
	}
	return nil
}

type AuthorizedKeysFile struct {
	File string `protobuf:"bytes,1,opt,name=File" json:"File,omitempty"`
}

func (m *AuthorizedKeysFile) Reset()                    { *m = AuthorizedKeysFile{} }
func (m *AuthorizedKeysFile) String() string            { return proto.CompactTextString(m) }
func (*AuthorizedKeysFile) ProtoMessage()               {}
func (*AuthorizedKeysFile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AuthorizedKeysFile) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

type LoginRequest struct {
	Username string   `protobuf:"bytes,1,opt,name=Username" json:"Username,omitempty"`
	HostTags []string `protobuf:"bytes,2,rep,name=HostTags" json:"HostTags,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *LoginRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginRequest) GetHostTags() []string {
	if m != nil {
		return m.HostTags
	}
	return nil
}

type LoginResponse struct {
	Authorized bool      `protobuf:"varint,1,opt,name=Authorized" json:"Authorized,omitempty"`
	User       *UnixUser `protobuf:"bytes,2,opt,name=User" json:"User,omitempty"`
}

func (m *LoginResponse) Reset()                    { *m = LoginResponse{} }
func (m *LoginResponse) String() string            { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()               {}
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *LoginResponse) GetAuthorized() bool {
	if m != nil {
		return m.Authorized
	}
	return false
}

func (m *LoginResponse) GetUser() *UnixUser {
	if m != nil {
		return m.User
	}
	return nil
}

type GroupMapping struct {
	ID            uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	UnixGroupName string `protobuf:"bytes,2,opt,name=UnixGroupName" json:"UnixGroupName,omitempty"`
	GroupID       string `protobuf:"bytes,3,opt,name=GroupID" json:"GroupID,omitempty"`
	Gid           uint32 `protobuf:"varint,4,opt,name=Gid" json:"Gid,omitempty"`
}

func (m *GroupMapping) Reset()                    { *m = GroupMapping{} }
func (m *GroupMapping) String() string            { return proto.CompactTextString(m) }
func (*GroupMapping) ProtoMessage()               {}
func (*GroupMapping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GroupMapping) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *GroupMapping) GetUnixGroupName() string {
	if m != nil {
		return m.UnixGroupName
	}
	return ""
}

func (m *GroupMapping) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *GroupMapping) GetGid() uint32 {
	if m != nil {
		return m.Gid
	}
	return 0
}

type UserMapping struct {
	ID     uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	UserID string `protobuf:"bytes,2,opt,name=UserID" json:"UserID,omitempty"`
	Uid    uint32 `protobuf:"varint,3,opt,name=Uid" json:"Uid,omitempty"`
	Gid    uint32 `protobuf:"varint,4,opt,name=Gid" json:"Gid,omitempty"`
}

func (m *UserMapping) Reset()                    { *m = UserMapping{} }
func (m *UserMapping) String() string            { return proto.CompactTextString(m) }
func (*UserMapping) ProtoMessage()               {}
func (*UserMapping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *UserMapping) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *UserMapping) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *UserMapping) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UserMapping) GetGid() uint32 {
	if m != nil {
		return m.Gid
	}
	return 0
}

type SSHKey struct {
	Key []byte `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (m *SSHKey) Reset()                    { *m = SSHKey{} }
func (m *SSHKey) String() string            { return proto.CompactTextString(m) }
func (*SSHKey) ProtoMessage()               {}
func (*SSHKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *SSHKey) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type SSHUserKey struct {
	ID     uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Key    []byte `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	UserID string `protobuf:"bytes,3,opt,name=UserID" json:"UserID,omitempty"`
}

func (m *SSHUserKey) Reset()                    { *m = SSHUserKey{} }
func (m *SSHUserKey) String() string            { return proto.CompactTextString(m) }
func (*SSHUserKey) ProtoMessage()               {}
func (*SSHUserKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *SSHUserKey) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SSHUserKey) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *SSHUserKey) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type GetSSHKeysRequest struct {
	Username string   `protobuf:"bytes,1,opt,name=Username" json:"Username,omitempty"`
	HostTags []string `protobuf:"bytes,2,rep,name=HostTags" json:"HostTags,omitempty"`
}

func (m *GetSSHKeysRequest) Reset()                    { *m = GetSSHKeysRequest{} }
func (m *GetSSHKeysRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSSHKeysRequest) ProtoMessage()               {}
func (*GetSSHKeysRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetSSHKeysRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *GetSSHKeysRequest) GetHostTags() []string {
	if m != nil {
		return m.HostTags
	}
	return nil
}

func init() {
	proto.RegisterType((*UnixUser)(nil), "unixauth.UnixUser")
	proto.RegisterType((*UnixGroup)(nil), "unixauth.UnixGroup")
	proto.RegisterType((*UnixGroupList)(nil), "unixauth.UnixGroupList")
	proto.RegisterType((*ByNameRequest)(nil), "unixauth.ByNameRequest")
	proto.RegisterType((*ByIDRequest)(nil), "unixauth.ByIDRequest")
	proto.RegisterType((*UnixUserList)(nil), "unixauth.UnixUserList")
	proto.RegisterType((*UsersForHostRequest)(nil), "unixauth.UsersForHostRequest")
	proto.RegisterType((*AuthorizedKeysFile)(nil), "unixauth.AuthorizedKeysFile")
	proto.RegisterType((*LoginRequest)(nil), "unixauth.LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "unixauth.LoginResponse")
	proto.RegisterType((*GroupMapping)(nil), "unixauth.GroupMapping")
	proto.RegisterType((*UserMapping)(nil), "unixauth.UserMapping")
	proto.RegisterType((*SSHKey)(nil), "unixauth.SSHKey")
	proto.RegisterType((*SSHUserKey)(nil), "unixauth.SSHUserKey")
	proto.RegisterType((*GetSSHKeysRequest)(nil), "unixauth.GetSSHKeysRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UnixAuth service

type UnixAuthClient interface {
	// get user and unix groups *if* user is authorised to login
	GetLoginResponseByName(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// get user and unix groups
	GetUnixUserByName(ctx context.Context, in *ByNameRequest, opts ...grpc.CallOption) (*UnixUser, error)
	// get unix group by id
	GetGroupByID(ctx context.Context, in *ByIDRequest, opts ...grpc.CallOption) (*UnixGroup, error)
	// get groups for user (by userid)
	GetGroupsForUser(ctx context.Context, in *ByIDRequest, opts ...grpc.CallOption) (*UnixGroupList, error)
	// get users for host
	GetUsersForHost(ctx context.Context, in *UsersForHostRequest, opts ...grpc.CallOption) (*UnixUserList, error)
	// get SSHKeys for user
	GetSSHKeysForUser(ctx context.Context, in *GetSSHKeysRequest, opts ...grpc.CallOption) (*AuthorizedKeysFile, error)
	// add SSHKeys for yourself (you cannot add keys for someone else)
	AddSSHKeysForMe(ctx context.Context, in *SSHKey, opts ...grpc.CallOption) (*common.Void, error)
}

type unixAuthClient struct {
	cc *grpc.ClientConn
}

func NewUnixAuthClient(cc *grpc.ClientConn) UnixAuthClient {
	return &unixAuthClient{cc}
}

func (c *unixAuthClient) GetLoginResponseByName(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := grpc.Invoke(ctx, "/unixauth.UnixAuth/GetLoginResponseByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unixAuthClient) GetUnixUserByName(ctx context.Context, in *ByNameRequest, opts ...grpc.CallOption) (*UnixUser, error) {
	out := new(UnixUser)
	err := grpc.Invoke(ctx, "/unixauth.UnixAuth/GetUnixUserByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unixAuthClient) GetGroupByID(ctx context.Context, in *ByIDRequest, opts ...grpc.CallOption) (*UnixGroup, error) {
	out := new(UnixGroup)
	err := grpc.Invoke(ctx, "/unixauth.UnixAuth/GetGroupByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unixAuthClient) GetGroupsForUser(ctx context.Context, in *ByIDRequest, opts ...grpc.CallOption) (*UnixGroupList, error) {
	out := new(UnixGroupList)
	err := grpc.Invoke(ctx, "/unixauth.UnixAuth/GetGroupsForUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unixAuthClient) GetUsersForHost(ctx context.Context, in *UsersForHostRequest, opts ...grpc.CallOption) (*UnixUserList, error) {
	out := new(UnixUserList)
	err := grpc.Invoke(ctx, "/unixauth.UnixAuth/GetUsersForHost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unixAuthClient) GetSSHKeysForUser(ctx context.Context, in *GetSSHKeysRequest, opts ...grpc.CallOption) (*AuthorizedKeysFile, error) {
	out := new(AuthorizedKeysFile)
	err := grpc.Invoke(ctx, "/unixauth.UnixAuth/GetSSHKeysForUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unixAuthClient) AddSSHKeysForMe(ctx context.Context, in *SSHKey, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/unixauth.UnixAuth/AddSSHKeysForMe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UnixAuth service

type UnixAuthServer interface {
	// get user and unix groups *if* user is authorised to login
	GetLoginResponseByName(context.Context, *LoginRequest) (*LoginResponse, error)
	// get user and unix groups
	GetUnixUserByName(context.Context, *ByNameRequest) (*UnixUser, error)
	// get unix group by id
	GetGroupByID(context.Context, *ByIDRequest) (*UnixGroup, error)
	// get groups for user (by userid)
	GetGroupsForUser(context.Context, *ByIDRequest) (*UnixGroupList, error)
	// get users for host
	GetUsersForHost(context.Context, *UsersForHostRequest) (*UnixUserList, error)
	// get SSHKeys for user
	GetSSHKeysForUser(context.Context, *GetSSHKeysRequest) (*AuthorizedKeysFile, error)
	// add SSHKeys for yourself (you cannot add keys for someone else)
	AddSSHKeysForMe(context.Context, *SSHKey) (*common.Void, error)
}

func RegisterUnixAuthServer(s *grpc.Server, srv UnixAuthServer) {
	s.RegisterService(&_UnixAuth_serviceDesc, srv)
}

func _UnixAuth_GetLoginResponseByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnixAuthServer).GetLoginResponseByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unixauth.UnixAuth/GetLoginResponseByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnixAuthServer).GetLoginResponseByName(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnixAuth_GetUnixUserByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnixAuthServer).GetUnixUserByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unixauth.UnixAuth/GetUnixUserByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnixAuthServer).GetUnixUserByName(ctx, req.(*ByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnixAuth_GetGroupByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnixAuthServer).GetGroupByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unixauth.UnixAuth/GetGroupByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnixAuthServer).GetGroupByID(ctx, req.(*ByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnixAuth_GetGroupsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnixAuthServer).GetGroupsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unixauth.UnixAuth/GetGroupsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnixAuthServer).GetGroupsForUser(ctx, req.(*ByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnixAuth_GetUsersForHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersForHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnixAuthServer).GetUsersForHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unixauth.UnixAuth/GetUsersForHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnixAuthServer).GetUsersForHost(ctx, req.(*UsersForHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnixAuth_GetSSHKeysForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSSHKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnixAuthServer).GetSSHKeysForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unixauth.UnixAuth/GetSSHKeysForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnixAuthServer).GetSSHKeysForUser(ctx, req.(*GetSSHKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnixAuth_AddSSHKeysForMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnixAuthServer).AddSSHKeysForMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unixauth.UnixAuth/AddSSHKeysForMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnixAuthServer).AddSSHKeysForMe(ctx, req.(*SSHKey))
	}
	return interceptor(ctx, in, info, handler)
}

var _UnixAuth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "unixauth.UnixAuth",
	HandlerType: (*UnixAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLoginResponseByName",
			Handler:    _UnixAuth_GetLoginResponseByName_Handler,
		},
		{
			MethodName: "GetUnixUserByName",
			Handler:    _UnixAuth_GetUnixUserByName_Handler,
		},
		{
			MethodName: "GetGroupByID",
			Handler:    _UnixAuth_GetGroupByID_Handler,
		},
		{
			MethodName: "GetGroupsForUser",
			Handler:    _UnixAuth_GetGroupsForUser_Handler,
		},
		{
			MethodName: "GetUsersForHost",
			Handler:    _UnixAuth_GetUsersForHost_Handler,
		},
		{
			MethodName: "GetSSHKeysForUser",
			Handler:    _UnixAuth_GetSSHKeysForUser_Handler,
		},
		{
			MethodName: "AddSSHKeysForMe",
			Handler:    _UnixAuth_AddSSHKeysForMe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/unixauth/unixauth.proto",
}

func init() { proto.RegisterFile("golang.conradwood.net/apis/unixauth/unixauth.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 679 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x55, 0x5f, 0x6b, 0xd3, 0x50,
	0x14, 0x27, 0x6d, 0x57, 0xdb, 0xd3, 0xd4, 0xcd, 0x3b, 0xec, 0x62, 0xdc, 0x46, 0xb9, 0x88, 0x14,
	0x07, 0x19, 0xab, 0x08, 0x22, 0x3e, 0xb8, 0x52, 0xd6, 0x96, 0x6e, 0x43, 0x52, 0xa7, 0xf8, 0x18,
	0x97, 0x4b, 0x17, 0xd8, 0x72, 0x63, 0x72, 0x83, 0xab, 0x8f, 0x7e, 0x13, 0x5f, 0xfd, 0x5c, 0x7e,
	0x10, 0x39, 0x37, 0xff, 0x6e, 0xd6, 0x76, 0x0c, 0x7c, 0xca, 0x3d, 0xff, 0x7e, 0xe7, 0x77, 0xee,
	0x39, 0x27, 0x17, 0xfa, 0x73, 0x7e, 0xed, 0xf8, 0x73, 0xeb, 0x92, 0xfb, 0xa1, 0xe3, 0xfe, 0xe0,
	0xdc, 0xb5, 0x7c, 0x26, 0x0e, 0x9d, 0xc0, 0x8b, 0x0e, 0x63, 0xdf, 0xbb, 0x75, 0x62, 0x71, 0x95,
	0x1f, 0xac, 0x20, 0xe4, 0x82, 0x93, 0x46, 0x26, 0x9b, 0xd6, 0x3d, 0xd1, 0x97, 0xfc, 0xe6, 0x86,
	0xfb, 0xe9, 0x27, 0x89, 0x34, 0x5f, 0xdd, 0xe3, 0x2f, 0x33, 0x15, 0x59, 0xe8, 0x6f, 0x0d, 0x1a,
	0x17, 0xbe, 0x77, 0x7b, 0x11, 0xb1, 0x90, 0xec, 0x43, 0x0d, 0xbf, 0x86, 0xd6, 0xd5, 0x7a, 0xad,
	0x3e, 0x58, 0xd2, 0x0f, 0x35, 0xb6, 0xd4, 0x13, 0x13, 0x1a, 0xf8, 0xf5, 0x9d, 0x1b, 0x66, 0x54,
	0xba, 0x5a, 0xaf, 0x69, 0xe7, 0x32, 0xd9, 0x82, 0xea, 0x85, 0xe7, 0x1a, 0xd5, 0xae, 0xd6, 0x6b,
	0xdb, 0x78, 0x44, 0xcd, 0xc8, 0x73, 0x8d, 0x5a, 0xa2, 0x19, 0x79, 0x2e, 0x79, 0x03, 0xcd, 0x51,
	0xc8, 0xe3, 0xe0, 0xd4, 0x8b, 0x84, 0xb1, 0x21, 0x93, 0xec, 0x58, 0x79, 0xd9, 0x48, 0x23, 0x37,
	0xdb, 0x85, 0x27, 0x3d, 0x82, 0x66, 0x6e, 0xcb, 0x50, 0xb5, 0x02, 0x95, 0x40, 0xed, 0xbc, 0x60,
	0x24, 0xcf, 0xf4, 0x3d, 0xb4, 0x4b, 0x70, 0xe4, 0x00, 0xea, 0x52, 0x88, 0x0c, 0xad, 0x5b, 0xed,
	0xb5, 0xfa, 0xdb, 0x2b, 0xf2, 0xda, 0xa9, 0x0b, 0x3d, 0x80, 0xf6, 0x60, 0x81, 0x38, 0x36, 0xfb,
	0x1e, 0xb3, 0x48, 0x94, 0x0a, 0xd7, 0xca, 0x85, 0xd3, 0x3d, 0x68, 0x0d, 0x16, 0x93, 0x61, 0xe6,
	0xfa, 0x18, 0x2a, 0x93, 0x61, 0x4a, 0xaf, 0x32, 0x19, 0xd2, 0xb7, 0xa0, 0x67, 0xf7, 0x2b, 0x89,
	0xf4, 0x60, 0x03, 0xcf, 0x19, 0x0f, 0x52, 0xe6, 0x21, 0x2f, 0x3b, 0x71, 0xa0, 0x47, 0xb0, 0x2d,
	0x0f, 0x27, 0x3c, 0x1c, 0xf3, 0x48, 0x28, 0x5c, 0x50, 0xfc, 0xe4, 0xcc, 0x13, 0x8c, 0xa6, 0x9d,
	0xcb, 0xb4, 0x07, 0xe4, 0x38, 0x16, 0x57, 0x3c, 0xf4, 0x7e, 0x32, 0x77, 0xca, 0x16, 0xd1, 0x89,
	0x77, 0xcd, 0xf0, 0x82, 0xf0, 0x9b, 0x32, 0x97, 0x67, 0x7a, 0x02, 0xfa, 0x29, 0x9f, 0x7b, 0xfe,
	0x03, 0x2a, 0x2c, 0x65, 0xac, 0xdc, 0xc9, 0xf8, 0x05, 0xda, 0x29, 0x4e, 0x14, 0x70, 0x3f, 0x62,
	0x64, 0x1f, 0xa0, 0xa0, 0x20, 0xa1, 0x1a, 0xb6, 0xa2, 0x21, 0x2f, 0xd3, 0x19, 0xab, 0xc8, 0xf6,
	0xaf, 0x2a, 0x5f, 0xda, 0x69, 0x00, 0xba, 0xec, 0xc6, 0x99, 0x13, 0x04, 0x9e, 0x3f, 0x57, 0xee,
	0xb5, 0x86, 0xf7, 0x4a, 0x5e, 0x28, 0x1d, 0x56, 0xda, 0x5f, 0x56, 0x12, 0x03, 0x1e, 0x49, 0x61,
	0x32, 0x94, 0x93, 0xd9, 0xb4, 0x33, 0x71, 0x79, 0x3a, 0xe9, 0x57, 0x68, 0x61, 0xe6, 0x75, 0x09,
	0x3b, 0x50, 0x47, 0xf3, 0x64, 0x98, 0x66, 0x4a, 0xa5, 0x87, 0x0c, 0x3e, 0x35, 0xa1, 0x3e, 0x9b,
	0x8d, 0xa7, 0x6c, 0x81, 0xb6, 0x29, 0x5b, 0x48, 0x58, 0xdd, 0xc6, 0x23, 0xfd, 0x08, 0x30, 0x9b,
	0x8d, 0x11, 0x0c, 0xed, 0x77, 0xb3, 0x9a, 0x89, 0x3f, 0xa6, 0xd4, 0x07, 0x8d, 0x3f, 0xbf, 0x9e,
	0xd5, 0x44, 0x18, 0x33, 0x19, 0xa9, 0x30, 0xaa, 0xaa, 0x8c, 0xe8, 0x14, 0x9e, 0x8c, 0x98, 0x48,
	0x12, 0x46, 0xff, 0xd9, 0xe0, 0xfe, 0xdf, 0x6a, 0xf2, 0x83, 0xc0, 0x16, 0x92, 0x09, 0x74, 0x46,
	0x4c, 0x94, 0x1a, 0x9e, 0x2c, 0x0a, 0xe9, 0x14, 0x8d, 0x54, 0xe7, 0xca, 0xdc, 0x59, 0xd2, 0xa7,
	0x73, 0xf2, 0x41, 0x92, 0xcc, 0x9a, 0x9e, 0xa2, 0x28, 0xde, 0xa5, 0x05, 0x34, 0x57, 0xcc, 0x09,
	0x79, 0x07, 0xfa, 0x88, 0x09, 0xd9, 0x4f, 0x5c, 0x40, 0xf2, 0x54, 0x0d, 0xce, 0x17, 0xd2, 0x5c,
	0xb5, 0xe9, 0x64, 0x00, 0x5b, 0x59, 0x2c, 0xee, 0x97, 0xc4, 0x5b, 0x13, 0xbf, 0xee, 0x0f, 0x45,
	0xc6, 0xb0, 0x89, 0x15, 0x28, 0x2b, 0x4a, 0xf6, 0x14, 0xdf, 0xe5, 0xd5, 0x35, 0x3b, 0xcb, 0x55,
	0x48, 0xa4, 0x73, 0xb5, 0x61, 0x19, 0x9d, 0xe7, 0x85, 0xf3, 0x52, 0x37, 0xcd, 0xdd, 0xc2, 0xb8,
	0x62, 0xe1, 0x8f, 0x60, 0xf3, 0xd8, 0x75, 0x0b, 0xbc, 0x33, 0x46, 0xb6, 0x8a, 0x80, 0x44, 0x6f,
	0xea, 0x56, 0xfa, 0x68, 0x7c, 0xe6, 0x9e, 0x3b, 0xd8, 0x87, 0x5d, 0x9f, 0x09, 0xf5, 0xc9, 0xc0,
	0xe7, 0x22, 0x0f, 0xfa, 0x56, 0x97, 0xcf, 0xc5, 0xeb, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xfa,
	0xb2, 0xf7, 0x4c, 0xca, 0x06, 0x00, 0x00,
}
