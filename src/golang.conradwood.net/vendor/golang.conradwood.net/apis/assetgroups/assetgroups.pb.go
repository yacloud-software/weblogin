// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/assetgroups/assetgroups.proto
// DO NOT EDIT!

/*
Package assetgroups is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/assetgroups/assetgroups.proto

It has these top-level messages:
	CreateGroup
	AssetGroup
	CreateAssetGroupRequest
	CreateAssetGroupResponse
	DeleteAssetGroupRequest
	RenameAssetGroupRequest
	GetAssetGroupRequest
	GetAssetGroupResponse
	ListAssetGroupsRequest
	ListAssetGroupsResponse
	AddUserGroupToAssetGroupRequest
	RemoveUserGroupFromAssetGroupRequest
	LegalEntity
	LegalEntityRequest
	LegalEntityResponse
	GetLegalEntitySitesRequest
	GetLegalEntitySitesResponse
	GetMyLegalEntitiesResponse
	Site
	SiteLegalEntity
	SiteRequest
	SiteResponse
	AddSiteToLegalEntityGroupRequest
	RemoveSiteFromLegalEntityGroupRequest
	GetLegalEntitiesForSitesRequest
	GetLegalEntitiesForSiteResponse
	GetSiteStructuresRequest
	GetSiteStructuresResponse
	GetSiteHotIDsRequest
	GetSiteHotIDsResponse
	GetMySitesResponse
	Structure
	StructureSite
	StructureRequest
	StructureResponse
	AddStructureToSiteGroupRequest
	RemoveStructureFromSiteGroupRequest
	GetSitesForStructureRequest
	GetSitesForStructureResponse
	HotID
	HotIDSite
	AddHotIDToAssetGroupRequest
	AddHotIDToSiteGroupRequest
	RemoveHotIDFromAssetGroupRequest
	RemoveHotIDFromSiteGroupRequest
	GetAssetGroupNamesForHotIDsRequest
	GetSitesForHotIDRequest
	AssetGroupNameAndHotID
	GetAssetGroupNamesForHotIDsResponse
	GetSitesForHotIDResponse
*/
package assetgroups

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The possible types of an asset
type AssetType int32

const (
	AssetType_HOT_ID       AssetType = 0
	AssetType_LEGAL_ENTITY AssetType = 1
	AssetType_SITE         AssetType = 2
	AssetType_STRUCTURE    AssetType = 3
	AssetType_LOCATION     AssetType = 4
	AssetType_ACCOUNT      AssetType = 5
	AssetType_SENSOR       AssetType = 6
)

var AssetType_name = map[int32]string{
	0: "HOT_ID",
	1: "LEGAL_ENTITY",
	2: "SITE",
	3: "STRUCTURE",
	4: "LOCATION",
	5: "ACCOUNT",
	6: "SENSOR",
}
var AssetType_value = map[string]int32{
	"HOT_ID":       0,
	"LEGAL_ENTITY": 1,
	"SITE":         2,
	"STRUCTURE":    3,
	"LOCATION":     4,
	"ACCOUNT":      5,
	"SENSOR":       6,
}

func (x AssetType) String() string {
	return proto.EnumName(AssetType_name, int32(x))
}
func (AssetType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// CreateGroup holds the data to be passed when creating an asset group
type CreateGroup struct {
	Name      string    `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	AssetType AssetType `protobuf:"varint,2,opt,name=AssetType,enum=assetgroups.AssetType" json:"AssetType,omitempty"`
	ForeignID string    `protobuf:"bytes,3,opt,name=ForeignID" json:"ForeignID,omitempty"`
}

func (m *CreateGroup) Reset()                    { *m = CreateGroup{} }
func (m *CreateGroup) String() string            { return proto.CompactTextString(m) }
func (*CreateGroup) ProtoMessage()               {}
func (*CreateGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateGroup) GetAssetType() AssetType {
	if m != nil {
		return m.AssetType
	}
	return AssetType_HOT_ID
}

func (m *CreateGroup) GetForeignID() string {
	if m != nil {
		return m.ForeignID
	}
	return ""
}

// an asset group links a set of hotIDs with a name to one or mre user groups
type AssetGroup struct {
	ID   uint32 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	// the two fields will no longer be passed
	// repeated uint32 GroupIDs = 3;
	// repeated uint32 HotIDs = 4;
	AssetType AssetType `protobuf:"varint,5,opt,name=AssetType,enum=assetgroups.AssetType" json:"AssetType,omitempty"`
}

func (m *AssetGroup) Reset()                    { *m = AssetGroup{} }
func (m *AssetGroup) String() string            { return proto.CompactTextString(m) }
func (*AssetGroup) ProtoMessage()               {}
func (*AssetGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AssetGroup) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *AssetGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AssetGroup) GetAssetType() AssetType {
	if m != nil {
		return m.AssetType
	}
	return AssetType_HOT_ID
}

// create an asset group
type CreateAssetGroupRequest struct {
	// this is deprecated
	// AssetGroup AssetGroup = 1;
	CreateGroup *CreateGroup `protobuf:"bytes,2,opt,name=CreateGroup" json:"CreateGroup,omitempty"`
}

func (m *CreateAssetGroupRequest) Reset()                    { *m = CreateAssetGroupRequest{} }
func (m *CreateAssetGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateAssetGroupRequest) ProtoMessage()               {}
func (*CreateAssetGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateAssetGroupRequest) GetCreateGroup() *CreateGroup {
	if m != nil {
		return m.CreateGroup
	}
	return nil
}

// return the created asset group's id
type CreateAssetGroupResponse struct {
	// this will be part of the AssetGroup field
	// uint32 ID = 1;
	AssetGroup *AssetGroup `protobuf:"bytes,2,opt,name=AssetGroup" json:"AssetGroup,omitempty"`
}

func (m *CreateAssetGroupResponse) Reset()                    { *m = CreateAssetGroupResponse{} }
func (m *CreateAssetGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateAssetGroupResponse) ProtoMessage()               {}
func (*CreateAssetGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateAssetGroupResponse) GetAssetGroup() *AssetGroup {
	if m != nil {
		return m.AssetGroup
	}
	return nil
}

// delete an asset group by ID
type DeleteAssetGroupRequest struct {
	ID uint32 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *DeleteAssetGroupRequest) Reset()                    { *m = DeleteAssetGroupRequest{} }
func (m *DeleteAssetGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteAssetGroupRequest) ProtoMessage()               {}
func (*DeleteAssetGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DeleteAssetGroupRequest) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

// rename an asset group by ID
type RenameAssetGroupRequest struct {
	ID   uint32 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
}

func (m *RenameAssetGroupRequest) Reset()                    { *m = RenameAssetGroupRequest{} }
func (m *RenameAssetGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*RenameAssetGroupRequest) ProtoMessage()               {}
func (*RenameAssetGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RenameAssetGroupRequest) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *RenameAssetGroupRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// get the contents of an asset group by ID
type GetAssetGroupRequest struct {
	ID uint32 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *GetAssetGroupRequest) Reset()                    { *m = GetAssetGroupRequest{} }
func (m *GetAssetGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAssetGroupRequest) ProtoMessage()               {}
func (*GetAssetGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetAssetGroupRequest) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

// return the requested asset group
type GetAssetGroupResponse struct {
	AssetGroup *AssetGroup `protobuf:"bytes,1,opt,name=AssetGroup" json:"AssetGroup,omitempty"`
}

func (m *GetAssetGroupResponse) Reset()                    { *m = GetAssetGroupResponse{} }
func (m *GetAssetGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAssetGroupResponse) ProtoMessage()               {}
func (*GetAssetGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetAssetGroupResponse) GetAssetGroup() *AssetGroup {
	if m != nil {
		return m.AssetGroup
	}
	return nil
}

// deprecated: this is no longer a valid request
// list all asset groups for a given user group and asset type
type ListAssetGroupsRequest struct {
	GroupID   uint32    `protobuf:"varint,1,opt,name=GroupID" json:"GroupID,omitempty"`
	AssetType AssetType `protobuf:"varint,2,opt,name=AssetType,enum=assetgroups.AssetType" json:"AssetType,omitempty"`
}

func (m *ListAssetGroupsRequest) Reset()                    { *m = ListAssetGroupsRequest{} }
func (m *ListAssetGroupsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListAssetGroupsRequest) ProtoMessage()               {}
func (*ListAssetGroupsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ListAssetGroupsRequest) GetGroupID() uint32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *ListAssetGroupsRequest) GetAssetType() AssetType {
	if m != nil {
		return m.AssetType
	}
	return AssetType_HOT_ID
}

// deprecated: no longer in use
// return the requested asset group list
type ListAssetGroupsResponse struct {
	AssetGroups []*AssetGroup `protobuf:"bytes,1,rep,name=AssetGroups" json:"AssetGroups,omitempty"`
}

func (m *ListAssetGroupsResponse) Reset()                    { *m = ListAssetGroupsResponse{} }
func (m *ListAssetGroupsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListAssetGroupsResponse) ProtoMessage()               {}
func (*ListAssetGroupsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ListAssetGroupsResponse) GetAssetGroups() []*AssetGroup {
	if m != nil {
		return m.AssetGroups
	}
	return nil
}

// add a single user group to the asset group
type AddUserGroupToAssetGroupRequest struct {
	ID      uint32 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	GroupID uint32 `protobuf:"varint,2,opt,name=GroupID" json:"GroupID,omitempty"`
}

func (m *AddUserGroupToAssetGroupRequest) Reset()         { *m = AddUserGroupToAssetGroupRequest{} }
func (m *AddUserGroupToAssetGroupRequest) String() string { return proto.CompactTextString(m) }
func (*AddUserGroupToAssetGroupRequest) ProtoMessage()    {}
func (*AddUserGroupToAssetGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10}
}

func (m *AddUserGroupToAssetGroupRequest) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *AddUserGroupToAssetGroupRequest) GetGroupID() uint32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

// remove a single user group from the asset group
type RemoveUserGroupFromAssetGroupRequest struct {
	ID      uint32 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	GroupID uint32 `protobuf:"varint,2,opt,name=GroupID" json:"GroupID,omitempty"`
}

func (m *RemoveUserGroupFromAssetGroupRequest) Reset()         { *m = RemoveUserGroupFromAssetGroupRequest{} }
func (m *RemoveUserGroupFromAssetGroupRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveUserGroupFromAssetGroupRequest) ProtoMessage()    {}
func (*RemoveUserGroupFromAssetGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11}
}

func (m *RemoveUserGroupFromAssetGroupRequest) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *RemoveUserGroupFromAssetGroupRequest) GetGroupID() uint32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

// LegalEntity holds the details of a Legal Entity
type LegalEntity struct {
	LegalEntityID uint32 `protobuf:"varint,1,opt,name=LegalEntityID" json:"LegalEntityID,omitempty"`
}

func (m *LegalEntity) Reset()                    { *m = LegalEntity{} }
func (m *LegalEntity) String() string            { return proto.CompactTextString(m) }
func (*LegalEntity) ProtoMessage()               {}
func (*LegalEntity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *LegalEntity) GetLegalEntityID() uint32 {
	if m != nil {
		return m.LegalEntityID
	}
	return 0
}

// LegalEntityRequest is used when getting details for a Legal Entity
type LegalEntityRequest struct {
	LegalEntity *LegalEntity `protobuf:"bytes,1,opt,name=LegalEntity" json:"LegalEntity,omitempty"`
}

func (m *LegalEntityRequest) Reset()                    { *m = LegalEntityRequest{} }
func (m *LegalEntityRequest) String() string            { return proto.CompactTextString(m) }
func (*LegalEntityRequest) ProtoMessage()               {}
func (*LegalEntityRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *LegalEntityRequest) GetLegalEntity() *LegalEntity {
	if m != nil {
		return m.LegalEntity
	}
	return nil
}

// LegalEntityResponse returns the details of a Legal Entity
type LegalEntityResponse struct {
	LegalEntity *LegalEntity `protobuf:"bytes,1,opt,name=LegalEntity" json:"LegalEntity,omitempty"`
}

func (m *LegalEntityResponse) Reset()                    { *m = LegalEntityResponse{} }
func (m *LegalEntityResponse) String() string            { return proto.CompactTextString(m) }
func (*LegalEntityResponse) ProtoMessage()               {}
func (*LegalEntityResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *LegalEntityResponse) GetLegalEntity() *LegalEntity {
	if m != nil {
		return m.LegalEntity
	}
	return nil
}

// Request sites associated with a legal entity
type GetLegalEntitySitesRequest struct {
	LegalEntity *LegalEntity `protobuf:"bytes,1,opt,name=LegalEntity" json:"LegalEntity,omitempty"`
}

func (m *GetLegalEntitySitesRequest) Reset()                    { *m = GetLegalEntitySitesRequest{} }
func (m *GetLegalEntitySitesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLegalEntitySitesRequest) ProtoMessage()               {}
func (*GetLegalEntitySitesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GetLegalEntitySitesRequest) GetLegalEntity() *LegalEntity {
	if m != nil {
		return m.LegalEntity
	}
	return nil
}

// Response with sites associated with a legal entity
type GetLegalEntitySitesResponse struct {
	Site []*Site `protobuf:"bytes,1,rep,name=Site" json:"Site,omitempty"`
}

func (m *GetLegalEntitySitesResponse) Reset()                    { *m = GetLegalEntitySitesResponse{} }
func (m *GetLegalEntitySitesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetLegalEntitySitesResponse) ProtoMessage()               {}
func (*GetLegalEntitySitesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GetLegalEntitySitesResponse) GetSite() []*Site {
	if m != nil {
		return m.Site
	}
	return nil
}

// Get Legal entities that a user can access
type GetMyLegalEntitiesResponse struct {
	LegalEntity []*LegalEntity `protobuf:"bytes,1,rep,name=LegalEntity" json:"LegalEntity,omitempty"`
}

func (m *GetMyLegalEntitiesResponse) Reset()                    { *m = GetMyLegalEntitiesResponse{} }
func (m *GetMyLegalEntitiesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMyLegalEntitiesResponse) ProtoMessage()               {}
func (*GetMyLegalEntitiesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetMyLegalEntitiesResponse) GetLegalEntity() []*LegalEntity {
	if m != nil {
		return m.LegalEntity
	}
	return nil
}

// *****************************
// Site asset grouping section *
// ****************************
type Site struct {
	SiteID uint32 `protobuf:"varint,1,opt,name=SiteID" json:"SiteID,omitempty"`
}

func (m *Site) Reset()                    { *m = Site{} }
func (m *Site) String() string            { return proto.CompactTextString(m) }
func (*Site) ProtoMessage()               {}
func (*Site) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Site) GetSiteID() uint32 {
	if m != nil {
		return m.SiteID
	}
	return 0
}

type SiteLegalEntity struct {
	Site        *Site        `protobuf:"bytes,1,opt,name=Site" json:"Site,omitempty"`
	LegalEntity *LegalEntity `protobuf:"bytes,2,opt,name=LegalEntity" json:"LegalEntity,omitempty"`
}

func (m *SiteLegalEntity) Reset()                    { *m = SiteLegalEntity{} }
func (m *SiteLegalEntity) String() string            { return proto.CompactTextString(m) }
func (*SiteLegalEntity) ProtoMessage()               {}
func (*SiteLegalEntity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *SiteLegalEntity) GetSite() *Site {
	if m != nil {
		return m.Site
	}
	return nil
}

func (m *SiteLegalEntity) GetLegalEntity() *LegalEntity {
	if m != nil {
		return m.LegalEntity
	}
	return nil
}

type SiteRequest struct {
	Site *Site `protobuf:"bytes,1,opt,name=Site" json:"Site,omitempty"`
}

func (m *SiteRequest) Reset()                    { *m = SiteRequest{} }
func (m *SiteRequest) String() string            { return proto.CompactTextString(m) }
func (*SiteRequest) ProtoMessage()               {}
func (*SiteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *SiteRequest) GetSite() *Site {
	if m != nil {
		return m.Site
	}
	return nil
}

type SiteResponse struct {
	SiteLegalEntity *SiteLegalEntity `protobuf:"bytes,1,opt,name=SiteLegalEntity" json:"SiteLegalEntity,omitempty"`
}

func (m *SiteResponse) Reset()                    { *m = SiteResponse{} }
func (m *SiteResponse) String() string            { return proto.CompactTextString(m) }
func (*SiteResponse) ProtoMessage()               {}
func (*SiteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *SiteResponse) GetSiteLegalEntity() *SiteLegalEntity {
	if m != nil {
		return m.SiteLegalEntity
	}
	return nil
}

type AddSiteToLegalEntityGroupRequest struct {
	LegalEntity *LegalEntity `protobuf:"bytes,1,opt,name=LegalEntity" json:"LegalEntity,omitempty"`
	Site        *Site        `protobuf:"bytes,2,opt,name=Site" json:"Site,omitempty"`
}

func (m *AddSiteToLegalEntityGroupRequest) Reset()         { *m = AddSiteToLegalEntityGroupRequest{} }
func (m *AddSiteToLegalEntityGroupRequest) String() string { return proto.CompactTextString(m) }
func (*AddSiteToLegalEntityGroupRequest) ProtoMessage()    {}
func (*AddSiteToLegalEntityGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{22}
}

func (m *AddSiteToLegalEntityGroupRequest) GetLegalEntity() *LegalEntity {
	if m != nil {
		return m.LegalEntity
	}
	return nil
}

func (m *AddSiteToLegalEntityGroupRequest) GetSite() *Site {
	if m != nil {
		return m.Site
	}
	return nil
}

type RemoveSiteFromLegalEntityGroupRequest struct {
	LegalEntity *LegalEntity `protobuf:"bytes,1,opt,name=LegalEntity" json:"LegalEntity,omitempty"`
	Site        *Site        `protobuf:"bytes,2,opt,name=Site" json:"Site,omitempty"`
}

func (m *RemoveSiteFromLegalEntityGroupRequest) Reset()         { *m = RemoveSiteFromLegalEntityGroupRequest{} }
func (m *RemoveSiteFromLegalEntityGroupRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveSiteFromLegalEntityGroupRequest) ProtoMessage()    {}
func (*RemoveSiteFromLegalEntityGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{23}
}

func (m *RemoveSiteFromLegalEntityGroupRequest) GetLegalEntity() *LegalEntity {
	if m != nil {
		return m.LegalEntity
	}
	return nil
}

func (m *RemoveSiteFromLegalEntityGroupRequest) GetSite() *Site {
	if m != nil {
		return m.Site
	}
	return nil
}

type GetLegalEntitiesForSitesRequest struct {
	Site []*Site `protobuf:"bytes,1,rep,name=Site" json:"Site,omitempty"`
}

func (m *GetLegalEntitiesForSitesRequest) Reset()         { *m = GetLegalEntitiesForSitesRequest{} }
func (m *GetLegalEntitiesForSitesRequest) String() string { return proto.CompactTextString(m) }
func (*GetLegalEntitiesForSitesRequest) ProtoMessage()    {}
func (*GetLegalEntitiesForSitesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{24}
}

func (m *GetLegalEntitiesForSitesRequest) GetSite() []*Site {
	if m != nil {
		return m.Site
	}
	return nil
}

type GetLegalEntitiesForSiteResponse struct {
	SiteLegalEntity []*SiteLegalEntity `protobuf:"bytes,1,rep,name=SiteLegalEntity" json:"SiteLegalEntity,omitempty"`
}

func (m *GetLegalEntitiesForSiteResponse) Reset()         { *m = GetLegalEntitiesForSiteResponse{} }
func (m *GetLegalEntitiesForSiteResponse) String() string { return proto.CompactTextString(m) }
func (*GetLegalEntitiesForSiteResponse) ProtoMessage()    {}
func (*GetLegalEntitiesForSiteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{25}
}

func (m *GetLegalEntitiesForSiteResponse) GetSiteLegalEntity() []*SiteLegalEntity {
	if m != nil {
		return m.SiteLegalEntity
	}
	return nil
}

// Request sites associated with a legal entity
type GetSiteStructuresRequest struct {
	Site *Site `protobuf:"bytes,1,opt,name=Site" json:"Site,omitempty"`
}

func (m *GetSiteStructuresRequest) Reset()                    { *m = GetSiteStructuresRequest{} }
func (m *GetSiteStructuresRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSiteStructuresRequest) ProtoMessage()               {}
func (*GetSiteStructuresRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *GetSiteStructuresRequest) GetSite() *Site {
	if m != nil {
		return m.Site
	}
	return nil
}

// Response with sites associated with a legal entity
type GetSiteStructuresResponse struct {
	Structure []*Structure `protobuf:"bytes,1,rep,name=Structure" json:"Structure,omitempty"`
}

func (m *GetSiteStructuresResponse) Reset()                    { *m = GetSiteStructuresResponse{} }
func (m *GetSiteStructuresResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSiteStructuresResponse) ProtoMessage()               {}
func (*GetSiteStructuresResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *GetSiteStructuresResponse) GetStructure() []*Structure {
	if m != nil {
		return m.Structure
	}
	return nil
}

// Request sites associated with a legal entity
type GetSiteHotIDsRequest struct {
	Site *Site `protobuf:"bytes,1,opt,name=Site" json:"Site,omitempty"`
}

func (m *GetSiteHotIDsRequest) Reset()                    { *m = GetSiteHotIDsRequest{} }
func (m *GetSiteHotIDsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSiteHotIDsRequest) ProtoMessage()               {}
func (*GetSiteHotIDsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *GetSiteHotIDsRequest) GetSite() *Site {
	if m != nil {
		return m.Site
	}
	return nil
}

// Response with sites associated with a legal entity
type GetSiteHotIDsResponse struct {
	HotID []*HotID `protobuf:"bytes,1,rep,name=HotID" json:"HotID,omitempty"`
}

func (m *GetSiteHotIDsResponse) Reset()                    { *m = GetSiteHotIDsResponse{} }
func (m *GetSiteHotIDsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSiteHotIDsResponse) ProtoMessage()               {}
func (*GetSiteHotIDsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *GetSiteHotIDsResponse) GetHotID() []*HotID {
	if m != nil {
		return m.HotID
	}
	return nil
}

// Get Sites that a user can access
type GetMySitesResponse struct {
	Site []*Site `protobuf:"bytes,1,rep,name=Site" json:"Site,omitempty"`
}

func (m *GetMySitesResponse) Reset()                    { *m = GetMySitesResponse{} }
func (m *GetMySitesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMySitesResponse) ProtoMessage()               {}
func (*GetMySitesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *GetMySitesResponse) GetSite() []*Site {
	if m != nil {
		return m.Site
	}
	return nil
}

// **********************************
// Structure asset grouping section *
// *********************************
type Structure struct {
	StructureID uint32 `protobuf:"varint,1,opt,name=StructureID" json:"StructureID,omitempty"`
}

func (m *Structure) Reset()                    { *m = Structure{} }
func (m *Structure) String() string            { return proto.CompactTextString(m) }
func (*Structure) ProtoMessage()               {}
func (*Structure) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *Structure) GetStructureID() uint32 {
	if m != nil {
		return m.StructureID
	}
	return 0
}

type StructureSite struct {
	Structure *Structure `protobuf:"bytes,1,opt,name=Structure" json:"Structure,omitempty"`
	Site      *Site      `protobuf:"bytes,2,opt,name=Site" json:"Site,omitempty"`
}

func (m *StructureSite) Reset()                    { *m = StructureSite{} }
func (m *StructureSite) String() string            { return proto.CompactTextString(m) }
func (*StructureSite) ProtoMessage()               {}
func (*StructureSite) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *StructureSite) GetStructure() *Structure {
	if m != nil {
		return m.Structure
	}
	return nil
}

func (m *StructureSite) GetSite() *Site {
	if m != nil {
		return m.Site
	}
	return nil
}

type StructureRequest struct {
	Structure *Structure `protobuf:"bytes,1,opt,name=Structure" json:"Structure,omitempty"`
}

func (m *StructureRequest) Reset()                    { *m = StructureRequest{} }
func (m *StructureRequest) String() string            { return proto.CompactTextString(m) }
func (*StructureRequest) ProtoMessage()               {}
func (*StructureRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *StructureRequest) GetStructure() *Structure {
	if m != nil {
		return m.Structure
	}
	return nil
}

type StructureResponse struct {
	StructureSite *StructureSite `protobuf:"bytes,1,opt,name=StructureSite" json:"StructureSite,omitempty"`
}

func (m *StructureResponse) Reset()                    { *m = StructureResponse{} }
func (m *StructureResponse) String() string            { return proto.CompactTextString(m) }
func (*StructureResponse) ProtoMessage()               {}
func (*StructureResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *StructureResponse) GetStructureSite() *StructureSite {
	if m != nil {
		return m.StructureSite
	}
	return nil
}

type AddStructureToSiteGroupRequest struct {
	Site      *Site      `protobuf:"bytes,1,opt,name=Site" json:"Site,omitempty"`
	Structure *Structure `protobuf:"bytes,2,opt,name=Structure" json:"Structure,omitempty"`
}

func (m *AddStructureToSiteGroupRequest) Reset()                    { *m = AddStructureToSiteGroupRequest{} }
func (m *AddStructureToSiteGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*AddStructureToSiteGroupRequest) ProtoMessage()               {}
func (*AddStructureToSiteGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *AddStructureToSiteGroupRequest) GetSite() *Site {
	if m != nil {
		return m.Site
	}
	return nil
}

func (m *AddStructureToSiteGroupRequest) GetStructure() *Structure {
	if m != nil {
		return m.Structure
	}
	return nil
}

type RemoveStructureFromSiteGroupRequest struct {
	Site      *Site      `protobuf:"bytes,1,opt,name=Site" json:"Site,omitempty"`
	Structure *Structure `protobuf:"bytes,2,opt,name=Structure" json:"Structure,omitempty"`
}

func (m *RemoveStructureFromSiteGroupRequest) Reset()         { *m = RemoveStructureFromSiteGroupRequest{} }
func (m *RemoveStructureFromSiteGroupRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveStructureFromSiteGroupRequest) ProtoMessage()    {}
func (*RemoveStructureFromSiteGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{36}
}

func (m *RemoveStructureFromSiteGroupRequest) GetSite() *Site {
	if m != nil {
		return m.Site
	}
	return nil
}

func (m *RemoveStructureFromSiteGroupRequest) GetStructure() *Structure {
	if m != nil {
		return m.Structure
	}
	return nil
}

type GetSitesForStructureRequest struct {
	Structure []*Structure `protobuf:"bytes,1,rep,name=Structure" json:"Structure,omitempty"`
}

func (m *GetSitesForStructureRequest) Reset()                    { *m = GetSitesForStructureRequest{} }
func (m *GetSitesForStructureRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSitesForStructureRequest) ProtoMessage()               {}
func (*GetSitesForStructureRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *GetSitesForStructureRequest) GetStructure() []*Structure {
	if m != nil {
		return m.Structure
	}
	return nil
}

type GetSitesForStructureResponse struct {
	StructureSite []*StructureSite `protobuf:"bytes,1,rep,name=StructureSite" json:"StructureSite,omitempty"`
}

func (m *GetSitesForStructureResponse) Reset()                    { *m = GetSitesForStructureResponse{} }
func (m *GetSitesForStructureResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSitesForStructureResponse) ProtoMessage()               {}
func (*GetSitesForStructureResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *GetSitesForStructureResponse) GetStructureSite() []*StructureSite {
	if m != nil {
		return m.StructureSite
	}
	return nil
}

// HotID holds the details of a Hot ID
type HotID struct {
	HotID uint32 `protobuf:"varint,1,opt,name=HotID" json:"HotID,omitempty"`
}

func (m *HotID) Reset()                    { *m = HotID{} }
func (m *HotID) String() string            { return proto.CompactTextString(m) }
func (*HotID) ProtoMessage()               {}
func (*HotID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *HotID) GetHotID() uint32 {
	if m != nil {
		return m.HotID
	}
	return 0
}

// HotIDSite holds the details of a hot id and the site it belongs to
type HotIDSite struct {
	HotID *HotID `protobuf:"bytes,1,opt,name=HotID" json:"HotID,omitempty"`
	Site  *Site  `protobuf:"bytes,2,opt,name=Site" json:"Site,omitempty"`
}

func (m *HotIDSite) Reset()                    { *m = HotIDSite{} }
func (m *HotIDSite) String() string            { return proto.CompactTextString(m) }
func (*HotIDSite) ProtoMessage()               {}
func (*HotIDSite) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *HotIDSite) GetHotID() *HotID {
	if m != nil {
		return m.HotID
	}
	return nil
}

func (m *HotIDSite) GetSite() *Site {
	if m != nil {
		return m.Site
	}
	return nil
}

// deprecated: use AddHotIDToSiteGroupRequest
// add a single hotid to the asset group
type AddHotIDToAssetGroupRequest struct {
	ID    uint32 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	HotID uint32 `protobuf:"varint,2,opt,name=HotID" json:"HotID,omitempty"`
}

func (m *AddHotIDToAssetGroupRequest) Reset()                    { *m = AddHotIDToAssetGroupRequest{} }
func (m *AddHotIDToAssetGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*AddHotIDToAssetGroupRequest) ProtoMessage()               {}
func (*AddHotIDToAssetGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *AddHotIDToAssetGroupRequest) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *AddHotIDToAssetGroupRequest) GetHotID() uint32 {
	if m != nil {
		return m.HotID
	}
	return 0
}

// add a single hot id to a site group
type AddHotIDToSiteGroupRequest struct {
	HotID *HotID `protobuf:"bytes,1,opt,name=HotID" json:"HotID,omitempty"`
	Site  *Site  `protobuf:"bytes,2,opt,name=Site" json:"Site,omitempty"`
}

func (m *AddHotIDToSiteGroupRequest) Reset()                    { *m = AddHotIDToSiteGroupRequest{} }
func (m *AddHotIDToSiteGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*AddHotIDToSiteGroupRequest) ProtoMessage()               {}
func (*AddHotIDToSiteGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *AddHotIDToSiteGroupRequest) GetHotID() *HotID {
	if m != nil {
		return m.HotID
	}
	return nil
}

func (m *AddHotIDToSiteGroupRequest) GetSite() *Site {
	if m != nil {
		return m.Site
	}
	return nil
}

// deprecated: use RemoveHotIDFromSiteGroupRequest
// remove a single hotid from the asset group
type RemoveHotIDFromAssetGroupRequest struct {
	ID    uint32 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	HotID uint32 `protobuf:"varint,2,opt,name=HotID" json:"HotID,omitempty"`
}

func (m *RemoveHotIDFromAssetGroupRequest) Reset()         { *m = RemoveHotIDFromAssetGroupRequest{} }
func (m *RemoveHotIDFromAssetGroupRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveHotIDFromAssetGroupRequest) ProtoMessage()    {}
func (*RemoveHotIDFromAssetGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{43}
}

func (m *RemoveHotIDFromAssetGroupRequest) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *RemoveHotIDFromAssetGroupRequest) GetHotID() uint32 {
	if m != nil {
		return m.HotID
	}
	return 0
}

// remove a single hotid from the asset group
type RemoveHotIDFromSiteGroupRequest struct {
	HotID *HotID `protobuf:"bytes,1,opt,name=HotID" json:"HotID,omitempty"`
	Site  *Site  `protobuf:"bytes,2,opt,name=Site" json:"Site,omitempty"`
}

func (m *RemoveHotIDFromSiteGroupRequest) Reset()         { *m = RemoveHotIDFromSiteGroupRequest{} }
func (m *RemoveHotIDFromSiteGroupRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveHotIDFromSiteGroupRequest) ProtoMessage()    {}
func (*RemoveHotIDFromSiteGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{44}
}

func (m *RemoveHotIDFromSiteGroupRequest) GetHotID() *HotID {
	if m != nil {
		return m.HotID
	}
	return nil
}

func (m *RemoveHotIDFromSiteGroupRequest) GetSite() *Site {
	if m != nil {
		return m.Site
	}
	return nil
}

// deprecated: use GetSitesForHotIDRequest
// Get asset group name for a list of hot ids
type GetAssetGroupNamesForHotIDsRequest struct {
	HotIDs []uint32 `protobuf:"varint,4,rep,packed,name=HotIDs" json:"HotIDs,omitempty"`
}

func (m *GetAssetGroupNamesForHotIDsRequest) Reset()         { *m = GetAssetGroupNamesForHotIDsRequest{} }
func (m *GetAssetGroupNamesForHotIDsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAssetGroupNamesForHotIDsRequest) ProtoMessage()    {}
func (*GetAssetGroupNamesForHotIDsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{45}
}

func (m *GetAssetGroupNamesForHotIDsRequest) GetHotIDs() []uint32 {
	if m != nil {
		return m.HotIDs
	}
	return nil
}

// Get asset group name for a list of hot ids
// This will limit to 100 hotids
type GetSitesForHotIDRequest struct {
	HotID []*HotID `protobuf:"bytes,1,rep,name=HotID" json:"HotID,omitempty"`
}

func (m *GetSitesForHotIDRequest) Reset()                    { *m = GetSitesForHotIDRequest{} }
func (m *GetSitesForHotIDRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSitesForHotIDRequest) ProtoMessage()               {}
func (*GetSitesForHotIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *GetSitesForHotIDRequest) GetHotID() []*HotID {
	if m != nil {
		return m.HotID
	}
	return nil
}

// deprecated: use HotIDSite
// Get asset group name for a list of hot ids
type AssetGroupNameAndHotID struct {
	HotID uint32 `protobuf:"varint,1,opt,name=HotID" json:"HotID,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
}

func (m *AssetGroupNameAndHotID) Reset()                    { *m = AssetGroupNameAndHotID{} }
func (m *AssetGroupNameAndHotID) String() string            { return proto.CompactTextString(m) }
func (*AssetGroupNameAndHotID) ProtoMessage()               {}
func (*AssetGroupNameAndHotID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *AssetGroupNameAndHotID) GetHotID() uint32 {
	if m != nil {
		return m.HotID
	}
	return 0
}

func (m *AssetGroupNameAndHotID) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// deprecated: use GetSitesForHotIDResponse
// Get asset group name for a list of hot ids - response
// This will only return the groups that the user has access to
type GetAssetGroupNamesForHotIDsResponse struct {
	AssetNames []*AssetGroupNameAndHotID `protobuf:"bytes,1,rep,name=AssetNames" json:"AssetNames,omitempty"`
}

func (m *GetAssetGroupNamesForHotIDsResponse) Reset()         { *m = GetAssetGroupNamesForHotIDsResponse{} }
func (m *GetAssetGroupNamesForHotIDsResponse) String() string { return proto.CompactTextString(m) }
func (*GetAssetGroupNamesForHotIDsResponse) ProtoMessage()    {}
func (*GetAssetGroupNamesForHotIDsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{48}
}

func (m *GetAssetGroupNamesForHotIDsResponse) GetAssetNames() []*AssetGroupNameAndHotID {
	if m != nil {
		return m.AssetNames
	}
	return nil
}

type GetSitesForHotIDResponse struct {
	HotIDSite []*HotIDSite `protobuf:"bytes,1,rep,name=HotIDSite" json:"HotIDSite,omitempty"`
}

func (m *GetSitesForHotIDResponse) Reset()                    { *m = GetSitesForHotIDResponse{} }
func (m *GetSitesForHotIDResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSitesForHotIDResponse) ProtoMessage()               {}
func (*GetSitesForHotIDResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *GetSitesForHotIDResponse) GetHotIDSite() []*HotIDSite {
	if m != nil {
		return m.HotIDSite
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateGroup)(nil), "assetgroups.CreateGroup")
	proto.RegisterType((*AssetGroup)(nil), "assetgroups.AssetGroup")
	proto.RegisterType((*CreateAssetGroupRequest)(nil), "assetgroups.CreateAssetGroupRequest")
	proto.RegisterType((*CreateAssetGroupResponse)(nil), "assetgroups.CreateAssetGroupResponse")
	proto.RegisterType((*DeleteAssetGroupRequest)(nil), "assetgroups.DeleteAssetGroupRequest")
	proto.RegisterType((*RenameAssetGroupRequest)(nil), "assetgroups.RenameAssetGroupRequest")
	proto.RegisterType((*GetAssetGroupRequest)(nil), "assetgroups.GetAssetGroupRequest")
	proto.RegisterType((*GetAssetGroupResponse)(nil), "assetgroups.GetAssetGroupResponse")
	proto.RegisterType((*ListAssetGroupsRequest)(nil), "assetgroups.ListAssetGroupsRequest")
	proto.RegisterType((*ListAssetGroupsResponse)(nil), "assetgroups.ListAssetGroupsResponse")
	proto.RegisterType((*AddUserGroupToAssetGroupRequest)(nil), "assetgroups.AddUserGroupToAssetGroupRequest")
	proto.RegisterType((*RemoveUserGroupFromAssetGroupRequest)(nil), "assetgroups.RemoveUserGroupFromAssetGroupRequest")
	proto.RegisterType((*LegalEntity)(nil), "assetgroups.LegalEntity")
	proto.RegisterType((*LegalEntityRequest)(nil), "assetgroups.LegalEntityRequest")
	proto.RegisterType((*LegalEntityResponse)(nil), "assetgroups.LegalEntityResponse")
	proto.RegisterType((*GetLegalEntitySitesRequest)(nil), "assetgroups.GetLegalEntitySitesRequest")
	proto.RegisterType((*GetLegalEntitySitesResponse)(nil), "assetgroups.GetLegalEntitySitesResponse")
	proto.RegisterType((*GetMyLegalEntitiesResponse)(nil), "assetgroups.GetMyLegalEntitiesResponse")
	proto.RegisterType((*Site)(nil), "assetgroups.Site")
	proto.RegisterType((*SiteLegalEntity)(nil), "assetgroups.SiteLegalEntity")
	proto.RegisterType((*SiteRequest)(nil), "assetgroups.SiteRequest")
	proto.RegisterType((*SiteResponse)(nil), "assetgroups.SiteResponse")
	proto.RegisterType((*AddSiteToLegalEntityGroupRequest)(nil), "assetgroups.AddSiteToLegalEntityGroupRequest")
	proto.RegisterType((*RemoveSiteFromLegalEntityGroupRequest)(nil), "assetgroups.RemoveSiteFromLegalEntityGroupRequest")
	proto.RegisterType((*GetLegalEntitiesForSitesRequest)(nil), "assetgroups.GetLegalEntitiesForSitesRequest")
	proto.RegisterType((*GetLegalEntitiesForSiteResponse)(nil), "assetgroups.GetLegalEntitiesForSiteResponse")
	proto.RegisterType((*GetSiteStructuresRequest)(nil), "assetgroups.GetSiteStructuresRequest")
	proto.RegisterType((*GetSiteStructuresResponse)(nil), "assetgroups.GetSiteStructuresResponse")
	proto.RegisterType((*GetSiteHotIDsRequest)(nil), "assetgroups.GetSiteHotIDsRequest")
	proto.RegisterType((*GetSiteHotIDsResponse)(nil), "assetgroups.GetSiteHotIDsResponse")
	proto.RegisterType((*GetMySitesResponse)(nil), "assetgroups.GetMySitesResponse")
	proto.RegisterType((*Structure)(nil), "assetgroups.Structure")
	proto.RegisterType((*StructureSite)(nil), "assetgroups.StructureSite")
	proto.RegisterType((*StructureRequest)(nil), "assetgroups.StructureRequest")
	proto.RegisterType((*StructureResponse)(nil), "assetgroups.StructureResponse")
	proto.RegisterType((*AddStructureToSiteGroupRequest)(nil), "assetgroups.AddStructureToSiteGroupRequest")
	proto.RegisterType((*RemoveStructureFromSiteGroupRequest)(nil), "assetgroups.RemoveStructureFromSiteGroupRequest")
	proto.RegisterType((*GetSitesForStructureRequest)(nil), "assetgroups.GetSitesForStructureRequest")
	proto.RegisterType((*GetSitesForStructureResponse)(nil), "assetgroups.GetSitesForStructureResponse")
	proto.RegisterType((*HotID)(nil), "assetgroups.HotID")
	proto.RegisterType((*HotIDSite)(nil), "assetgroups.HotIDSite")
	proto.RegisterType((*AddHotIDToAssetGroupRequest)(nil), "assetgroups.AddHotIDToAssetGroupRequest")
	proto.RegisterType((*AddHotIDToSiteGroupRequest)(nil), "assetgroups.AddHotIDToSiteGroupRequest")
	proto.RegisterType((*RemoveHotIDFromAssetGroupRequest)(nil), "assetgroups.RemoveHotIDFromAssetGroupRequest")
	proto.RegisterType((*RemoveHotIDFromSiteGroupRequest)(nil), "assetgroups.RemoveHotIDFromSiteGroupRequest")
	proto.RegisterType((*GetAssetGroupNamesForHotIDsRequest)(nil), "assetgroups.GetAssetGroupNamesForHotIDsRequest")
	proto.RegisterType((*GetSitesForHotIDRequest)(nil), "assetgroups.GetSitesForHotIDRequest")
	proto.RegisterType((*AssetGroupNameAndHotID)(nil), "assetgroups.AssetGroupNameAndHotID")
	proto.RegisterType((*GetAssetGroupNamesForHotIDsResponse)(nil), "assetgroups.GetAssetGroupNamesForHotIDsResponse")
	proto.RegisterType((*GetSitesForHotIDResponse)(nil), "assetgroups.GetSitesForHotIDResponse")
	proto.RegisterEnum("assetgroups.AssetType", AssetType_name, AssetType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AssetGroupsService service

type AssetGroupsServiceClient interface {
	// general asset group rpcs
	CreateAssetGroup(ctx context.Context, in *CreateAssetGroupRequest, opts ...grpc.CallOption) (*CreateAssetGroupResponse, error)
	DeleteAssetGroup(ctx context.Context, in *DeleteAssetGroupRequest, opts ...grpc.CallOption) (*common.Void, error)
	RenameAssetGroup(ctx context.Context, in *RenameAssetGroupRequest, opts ...grpc.CallOption) (*common.Void, error)
	ListAssetGroups(ctx context.Context, in *ListAssetGroupsRequest, opts ...grpc.CallOption) (*ListAssetGroupsResponse, error)
	GetAssetGroup(ctx context.Context, in *GetAssetGroupRequest, opts ...grpc.CallOption) (*GetAssetGroupResponse, error)
	AddUserGroupToAssetGroup(ctx context.Context, in *AddUserGroupToAssetGroupRequest, opts ...grpc.CallOption) (*common.Void, error)
	RemoveUserGroupFromAssetGroup(ctx context.Context, in *RemoveUserGroupFromAssetGroupRequest, opts ...grpc.CallOption) (*common.Void, error)
	// LegalEntity related rpcs
	GetLegalEntitySites(ctx context.Context, in *GetLegalEntitySitesRequest, opts ...grpc.CallOption) (*GetLegalEntitySitesResponse, error)
	GetMyLegalEntities(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*GetMyLegalEntitiesResponse, error)
	// Site related rpcs
	AddSiteToLegalEntityGroup(ctx context.Context, in *AddSiteToLegalEntityGroupRequest, opts ...grpc.CallOption) (*common.Status, error)
	RemoveSiteFromLegalEntityGroup(ctx context.Context, in *RemoveSiteFromLegalEntityGroupRequest, opts ...grpc.CallOption) (*common.Status, error)
	GetLegalEntitiesForSites(ctx context.Context, in *GetLegalEntitiesForSitesRequest, opts ...grpc.CallOption) (*GetLegalEntitiesForSiteResponse, error)
	GetSiteStructures(ctx context.Context, in *GetSiteStructuresRequest, opts ...grpc.CallOption) (*GetSiteStructuresResponse, error)
	GetSiteHotIDs(ctx context.Context, in *GetSiteHotIDsRequest, opts ...grpc.CallOption) (*GetSiteHotIDsResponse, error)
	GetMySites(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*GetMySitesResponse, error)
	// Structure related rpcs
	AddStructureToSiteGroup(ctx context.Context, in *AddStructureToSiteGroupRequest, opts ...grpc.CallOption) (*common.Status, error)
	RemoveStructureFromSiteGroup(ctx context.Context, in *RemoveStructureFromSiteGroupRequest, opts ...grpc.CallOption) (*common.Status, error)
	GetSitesForStructure(ctx context.Context, in *GetSitesForStructureRequest, opts ...grpc.CallOption) (*GetSitesForStructureResponse, error)
	// HotID related rpcs
	AddHotIDToSiteGroup(ctx context.Context, in *AddHotIDToSiteGroupRequest, opts ...grpc.CallOption) (*common.Status, error)
	RemoveHotIDFromSiteGroup(ctx context.Context, in *RemoveHotIDFromSiteGroupRequest, opts ...grpc.CallOption) (*common.Status, error)
	GetSitesForHotID(ctx context.Context, in *GetSitesForHotIDRequest, opts ...grpc.CallOption) (*GetSitesForHotIDResponse, error)
	// deprecated: no longer handled by assetgroups module. Use rpc like GetLegalEntitySites which will return a list of
	// sites that a user has access to for the specified legal entity
	ListAssetGroupsForCurrentUser(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*ListAssetGroupsResponse, error)
	// deprecated: use GetSitesForHotID
	// Get a list of asset group names for a given list of hot ids
	GetAssetGroupNamesForHotIDs(ctx context.Context, in *GetAssetGroupNamesForHotIDsRequest, opts ...grpc.CallOption) (*GetAssetGroupNamesForHotIDsResponse, error)
	// deprecated: use AddHotIDToSiteGroup
	AddHotIDToAssetGroup(ctx context.Context, in *AddHotIDToAssetGroupRequest, opts ...grpc.CallOption) (*common.Void, error)
	// deprecated: use RemoveHotIDFromSiteGroup
	RemoveHotIDFromAssetGroup(ctx context.Context, in *RemoveHotIDFromAssetGroupRequest, opts ...grpc.CallOption) (*common.Void, error)
}

type assetGroupsServiceClient struct {
	cc *grpc.ClientConn
}

func NewAssetGroupsServiceClient(cc *grpc.ClientConn) AssetGroupsServiceClient {
	return &assetGroupsServiceClient{cc}
}

func (c *assetGroupsServiceClient) CreateAssetGroup(ctx context.Context, in *CreateAssetGroupRequest, opts ...grpc.CallOption) (*CreateAssetGroupResponse, error) {
	out := new(CreateAssetGroupResponse)
	err := grpc.Invoke(ctx, "/assetgroups.AssetGroupsService/CreateAssetGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetGroupsServiceClient) DeleteAssetGroup(ctx context.Context, in *DeleteAssetGroupRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/assetgroups.AssetGroupsService/DeleteAssetGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetGroupsServiceClient) RenameAssetGroup(ctx context.Context, in *RenameAssetGroupRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/assetgroups.AssetGroupsService/RenameAssetGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetGroupsServiceClient) ListAssetGroups(ctx context.Context, in *ListAssetGroupsRequest, opts ...grpc.CallOption) (*ListAssetGroupsResponse, error) {
	out := new(ListAssetGroupsResponse)
	err := grpc.Invoke(ctx, "/assetgroups.AssetGroupsService/ListAssetGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetGroupsServiceClient) GetAssetGroup(ctx context.Context, in *GetAssetGroupRequest, opts ...grpc.CallOption) (*GetAssetGroupResponse, error) {
	out := new(GetAssetGroupResponse)
	err := grpc.Invoke(ctx, "/assetgroups.AssetGroupsService/GetAssetGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetGroupsServiceClient) AddUserGroupToAssetGroup(ctx context.Context, in *AddUserGroupToAssetGroupRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/assetgroups.AssetGroupsService/AddUserGroupToAssetGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetGroupsServiceClient) RemoveUserGroupFromAssetGroup(ctx context.Context, in *RemoveUserGroupFromAssetGroupRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/assetgroups.AssetGroupsService/RemoveUserGroupFromAssetGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetGroupsServiceClient) GetLegalEntitySites(ctx context.Context, in *GetLegalEntitySitesRequest, opts ...grpc.CallOption) (*GetLegalEntitySitesResponse, error) {
	out := new(GetLegalEntitySitesResponse)
	err := grpc.Invoke(ctx, "/assetgroups.AssetGroupsService/GetLegalEntitySites", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetGroupsServiceClient) GetMyLegalEntities(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*GetMyLegalEntitiesResponse, error) {
	out := new(GetMyLegalEntitiesResponse)
	err := grpc.Invoke(ctx, "/assetgroups.AssetGroupsService/GetMyLegalEntities", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetGroupsServiceClient) AddSiteToLegalEntityGroup(ctx context.Context, in *AddSiteToLegalEntityGroupRequest, opts ...grpc.CallOption) (*common.Status, error) {
	out := new(common.Status)
	err := grpc.Invoke(ctx, "/assetgroups.AssetGroupsService/AddSiteToLegalEntityGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetGroupsServiceClient) RemoveSiteFromLegalEntityGroup(ctx context.Context, in *RemoveSiteFromLegalEntityGroupRequest, opts ...grpc.CallOption) (*common.Status, error) {
	out := new(common.Status)
	err := grpc.Invoke(ctx, "/assetgroups.AssetGroupsService/RemoveSiteFromLegalEntityGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetGroupsServiceClient) GetLegalEntitiesForSites(ctx context.Context, in *GetLegalEntitiesForSitesRequest, opts ...grpc.CallOption) (*GetLegalEntitiesForSiteResponse, error) {
	out := new(GetLegalEntitiesForSiteResponse)
	err := grpc.Invoke(ctx, "/assetgroups.AssetGroupsService/GetLegalEntitiesForSites", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetGroupsServiceClient) GetSiteStructures(ctx context.Context, in *GetSiteStructuresRequest, opts ...grpc.CallOption) (*GetSiteStructuresResponse, error) {
	out := new(GetSiteStructuresResponse)
	err := grpc.Invoke(ctx, "/assetgroups.AssetGroupsService/GetSiteStructures", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetGroupsServiceClient) GetSiteHotIDs(ctx context.Context, in *GetSiteHotIDsRequest, opts ...grpc.CallOption) (*GetSiteHotIDsResponse, error) {
	out := new(GetSiteHotIDsResponse)
	err := grpc.Invoke(ctx, "/assetgroups.AssetGroupsService/GetSiteHotIDs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetGroupsServiceClient) GetMySites(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*GetMySitesResponse, error) {
	out := new(GetMySitesResponse)
	err := grpc.Invoke(ctx, "/assetgroups.AssetGroupsService/GetMySites", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetGroupsServiceClient) AddStructureToSiteGroup(ctx context.Context, in *AddStructureToSiteGroupRequest, opts ...grpc.CallOption) (*common.Status, error) {
	out := new(common.Status)
	err := grpc.Invoke(ctx, "/assetgroups.AssetGroupsService/AddStructureToSiteGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetGroupsServiceClient) RemoveStructureFromSiteGroup(ctx context.Context, in *RemoveStructureFromSiteGroupRequest, opts ...grpc.CallOption) (*common.Status, error) {
	out := new(common.Status)
	err := grpc.Invoke(ctx, "/assetgroups.AssetGroupsService/RemoveStructureFromSiteGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetGroupsServiceClient) GetSitesForStructure(ctx context.Context, in *GetSitesForStructureRequest, opts ...grpc.CallOption) (*GetSitesForStructureResponse, error) {
	out := new(GetSitesForStructureResponse)
	err := grpc.Invoke(ctx, "/assetgroups.AssetGroupsService/GetSitesForStructure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetGroupsServiceClient) AddHotIDToSiteGroup(ctx context.Context, in *AddHotIDToSiteGroupRequest, opts ...grpc.CallOption) (*common.Status, error) {
	out := new(common.Status)
	err := grpc.Invoke(ctx, "/assetgroups.AssetGroupsService/AddHotIDToSiteGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetGroupsServiceClient) RemoveHotIDFromSiteGroup(ctx context.Context, in *RemoveHotIDFromSiteGroupRequest, opts ...grpc.CallOption) (*common.Status, error) {
	out := new(common.Status)
	err := grpc.Invoke(ctx, "/assetgroups.AssetGroupsService/RemoveHotIDFromSiteGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetGroupsServiceClient) GetSitesForHotID(ctx context.Context, in *GetSitesForHotIDRequest, opts ...grpc.CallOption) (*GetSitesForHotIDResponse, error) {
	out := new(GetSitesForHotIDResponse)
	err := grpc.Invoke(ctx, "/assetgroups.AssetGroupsService/GetSitesForHotID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetGroupsServiceClient) ListAssetGroupsForCurrentUser(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*ListAssetGroupsResponse, error) {
	out := new(ListAssetGroupsResponse)
	err := grpc.Invoke(ctx, "/assetgroups.AssetGroupsService/ListAssetGroupsForCurrentUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetGroupsServiceClient) GetAssetGroupNamesForHotIDs(ctx context.Context, in *GetAssetGroupNamesForHotIDsRequest, opts ...grpc.CallOption) (*GetAssetGroupNamesForHotIDsResponse, error) {
	out := new(GetAssetGroupNamesForHotIDsResponse)
	err := grpc.Invoke(ctx, "/assetgroups.AssetGroupsService/GetAssetGroupNamesForHotIDs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetGroupsServiceClient) AddHotIDToAssetGroup(ctx context.Context, in *AddHotIDToAssetGroupRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/assetgroups.AssetGroupsService/AddHotIDToAssetGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetGroupsServiceClient) RemoveHotIDFromAssetGroup(ctx context.Context, in *RemoveHotIDFromAssetGroupRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/assetgroups.AssetGroupsService/RemoveHotIDFromAssetGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AssetGroupsService service

type AssetGroupsServiceServer interface {
	// general asset group rpcs
	CreateAssetGroup(context.Context, *CreateAssetGroupRequest) (*CreateAssetGroupResponse, error)
	DeleteAssetGroup(context.Context, *DeleteAssetGroupRequest) (*common.Void, error)
	RenameAssetGroup(context.Context, *RenameAssetGroupRequest) (*common.Void, error)
	ListAssetGroups(context.Context, *ListAssetGroupsRequest) (*ListAssetGroupsResponse, error)
	GetAssetGroup(context.Context, *GetAssetGroupRequest) (*GetAssetGroupResponse, error)
	AddUserGroupToAssetGroup(context.Context, *AddUserGroupToAssetGroupRequest) (*common.Void, error)
	RemoveUserGroupFromAssetGroup(context.Context, *RemoveUserGroupFromAssetGroupRequest) (*common.Void, error)
	// LegalEntity related rpcs
	GetLegalEntitySites(context.Context, *GetLegalEntitySitesRequest) (*GetLegalEntitySitesResponse, error)
	GetMyLegalEntities(context.Context, *common.Void) (*GetMyLegalEntitiesResponse, error)
	// Site related rpcs
	AddSiteToLegalEntityGroup(context.Context, *AddSiteToLegalEntityGroupRequest) (*common.Status, error)
	RemoveSiteFromLegalEntityGroup(context.Context, *RemoveSiteFromLegalEntityGroupRequest) (*common.Status, error)
	GetLegalEntitiesForSites(context.Context, *GetLegalEntitiesForSitesRequest) (*GetLegalEntitiesForSiteResponse, error)
	GetSiteStructures(context.Context, *GetSiteStructuresRequest) (*GetSiteStructuresResponse, error)
	GetSiteHotIDs(context.Context, *GetSiteHotIDsRequest) (*GetSiteHotIDsResponse, error)
	GetMySites(context.Context, *common.Void) (*GetMySitesResponse, error)
	// Structure related rpcs
	AddStructureToSiteGroup(context.Context, *AddStructureToSiteGroupRequest) (*common.Status, error)
	RemoveStructureFromSiteGroup(context.Context, *RemoveStructureFromSiteGroupRequest) (*common.Status, error)
	GetSitesForStructure(context.Context, *GetSitesForStructureRequest) (*GetSitesForStructureResponse, error)
	// HotID related rpcs
	AddHotIDToSiteGroup(context.Context, *AddHotIDToSiteGroupRequest) (*common.Status, error)
	RemoveHotIDFromSiteGroup(context.Context, *RemoveHotIDFromSiteGroupRequest) (*common.Status, error)
	GetSitesForHotID(context.Context, *GetSitesForHotIDRequest) (*GetSitesForHotIDResponse, error)
	// deprecated: no longer handled by assetgroups module. Use rpc like GetLegalEntitySites which will return a list of
	// sites that a user has access to for the specified legal entity
	ListAssetGroupsForCurrentUser(context.Context, *common.Void) (*ListAssetGroupsResponse, error)
	// deprecated: use GetSitesForHotID
	// Get a list of asset group names for a given list of hot ids
	GetAssetGroupNamesForHotIDs(context.Context, *GetAssetGroupNamesForHotIDsRequest) (*GetAssetGroupNamesForHotIDsResponse, error)
	// deprecated: use AddHotIDToSiteGroup
	AddHotIDToAssetGroup(context.Context, *AddHotIDToAssetGroupRequest) (*common.Void, error)
	// deprecated: use RemoveHotIDFromSiteGroup
	RemoveHotIDFromAssetGroup(context.Context, *RemoveHotIDFromAssetGroupRequest) (*common.Void, error)
}

func RegisterAssetGroupsServiceServer(s *grpc.Server, srv AssetGroupsServiceServer) {
	s.RegisterService(&_AssetGroupsService_serviceDesc, srv)
}

func _AssetGroupsService_CreateAssetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetGroupsServiceServer).CreateAssetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetgroups.AssetGroupsService/CreateAssetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetGroupsServiceServer).CreateAssetGroup(ctx, req.(*CreateAssetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetGroupsService_DeleteAssetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAssetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetGroupsServiceServer).DeleteAssetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetgroups.AssetGroupsService/DeleteAssetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetGroupsServiceServer).DeleteAssetGroup(ctx, req.(*DeleteAssetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetGroupsService_RenameAssetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameAssetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetGroupsServiceServer).RenameAssetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetgroups.AssetGroupsService/RenameAssetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetGroupsServiceServer).RenameAssetGroup(ctx, req.(*RenameAssetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetGroupsService_ListAssetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssetGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetGroupsServiceServer).ListAssetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetgroups.AssetGroupsService/ListAssetGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetGroupsServiceServer).ListAssetGroups(ctx, req.(*ListAssetGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetGroupsService_GetAssetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetGroupsServiceServer).GetAssetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetgroups.AssetGroupsService/GetAssetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetGroupsServiceServer).GetAssetGroup(ctx, req.(*GetAssetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetGroupsService_AddUserGroupToAssetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserGroupToAssetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetGroupsServiceServer).AddUserGroupToAssetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetgroups.AssetGroupsService/AddUserGroupToAssetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetGroupsServiceServer).AddUserGroupToAssetGroup(ctx, req.(*AddUserGroupToAssetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetGroupsService_RemoveUserGroupFromAssetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserGroupFromAssetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetGroupsServiceServer).RemoveUserGroupFromAssetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetgroups.AssetGroupsService/RemoveUserGroupFromAssetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetGroupsServiceServer).RemoveUserGroupFromAssetGroup(ctx, req.(*RemoveUserGroupFromAssetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetGroupsService_GetLegalEntitySites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLegalEntitySitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetGroupsServiceServer).GetLegalEntitySites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetgroups.AssetGroupsService/GetLegalEntitySites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetGroupsServiceServer).GetLegalEntitySites(ctx, req.(*GetLegalEntitySitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetGroupsService_GetMyLegalEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetGroupsServiceServer).GetMyLegalEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetgroups.AssetGroupsService/GetMyLegalEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetGroupsServiceServer).GetMyLegalEntities(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetGroupsService_AddSiteToLegalEntityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSiteToLegalEntityGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetGroupsServiceServer).AddSiteToLegalEntityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetgroups.AssetGroupsService/AddSiteToLegalEntityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetGroupsServiceServer).AddSiteToLegalEntityGroup(ctx, req.(*AddSiteToLegalEntityGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetGroupsService_RemoveSiteFromLegalEntityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSiteFromLegalEntityGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetGroupsServiceServer).RemoveSiteFromLegalEntityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetgroups.AssetGroupsService/RemoveSiteFromLegalEntityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetGroupsServiceServer).RemoveSiteFromLegalEntityGroup(ctx, req.(*RemoveSiteFromLegalEntityGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetGroupsService_GetLegalEntitiesForSites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLegalEntitiesForSitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetGroupsServiceServer).GetLegalEntitiesForSites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetgroups.AssetGroupsService/GetLegalEntitiesForSites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetGroupsServiceServer).GetLegalEntitiesForSites(ctx, req.(*GetLegalEntitiesForSitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetGroupsService_GetSiteStructures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSiteStructuresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetGroupsServiceServer).GetSiteStructures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetgroups.AssetGroupsService/GetSiteStructures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetGroupsServiceServer).GetSiteStructures(ctx, req.(*GetSiteStructuresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetGroupsService_GetSiteHotIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSiteHotIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetGroupsServiceServer).GetSiteHotIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetgroups.AssetGroupsService/GetSiteHotIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetGroupsServiceServer).GetSiteHotIDs(ctx, req.(*GetSiteHotIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetGroupsService_GetMySites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetGroupsServiceServer).GetMySites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetgroups.AssetGroupsService/GetMySites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetGroupsServiceServer).GetMySites(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetGroupsService_AddStructureToSiteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStructureToSiteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetGroupsServiceServer).AddStructureToSiteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetgroups.AssetGroupsService/AddStructureToSiteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetGroupsServiceServer).AddStructureToSiteGroup(ctx, req.(*AddStructureToSiteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetGroupsService_RemoveStructureFromSiteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStructureFromSiteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetGroupsServiceServer).RemoveStructureFromSiteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetgroups.AssetGroupsService/RemoveStructureFromSiteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetGroupsServiceServer).RemoveStructureFromSiteGroup(ctx, req.(*RemoveStructureFromSiteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetGroupsService_GetSitesForStructure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSitesForStructureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetGroupsServiceServer).GetSitesForStructure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetgroups.AssetGroupsService/GetSitesForStructure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetGroupsServiceServer).GetSitesForStructure(ctx, req.(*GetSitesForStructureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetGroupsService_AddHotIDToSiteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHotIDToSiteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetGroupsServiceServer).AddHotIDToSiteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetgroups.AssetGroupsService/AddHotIDToSiteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetGroupsServiceServer).AddHotIDToSiteGroup(ctx, req.(*AddHotIDToSiteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetGroupsService_RemoveHotIDFromSiteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHotIDFromSiteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetGroupsServiceServer).RemoveHotIDFromSiteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetgroups.AssetGroupsService/RemoveHotIDFromSiteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetGroupsServiceServer).RemoveHotIDFromSiteGroup(ctx, req.(*RemoveHotIDFromSiteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetGroupsService_GetSitesForHotID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSitesForHotIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetGroupsServiceServer).GetSitesForHotID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetgroups.AssetGroupsService/GetSitesForHotID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetGroupsServiceServer).GetSitesForHotID(ctx, req.(*GetSitesForHotIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetGroupsService_ListAssetGroupsForCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetGroupsServiceServer).ListAssetGroupsForCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetgroups.AssetGroupsService/ListAssetGroupsForCurrentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetGroupsServiceServer).ListAssetGroupsForCurrentUser(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetGroupsService_GetAssetGroupNamesForHotIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetGroupNamesForHotIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetGroupsServiceServer).GetAssetGroupNamesForHotIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetgroups.AssetGroupsService/GetAssetGroupNamesForHotIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetGroupsServiceServer).GetAssetGroupNamesForHotIDs(ctx, req.(*GetAssetGroupNamesForHotIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetGroupsService_AddHotIDToAssetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHotIDToAssetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetGroupsServiceServer).AddHotIDToAssetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetgroups.AssetGroupsService/AddHotIDToAssetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetGroupsServiceServer).AddHotIDToAssetGroup(ctx, req.(*AddHotIDToAssetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetGroupsService_RemoveHotIDFromAssetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHotIDFromAssetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetGroupsServiceServer).RemoveHotIDFromAssetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetgroups.AssetGroupsService/RemoveHotIDFromAssetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetGroupsServiceServer).RemoveHotIDFromAssetGroup(ctx, req.(*RemoveHotIDFromAssetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AssetGroupsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "assetgroups.AssetGroupsService",
	HandlerType: (*AssetGroupsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAssetGroup",
			Handler:    _AssetGroupsService_CreateAssetGroup_Handler,
		},
		{
			MethodName: "DeleteAssetGroup",
			Handler:    _AssetGroupsService_DeleteAssetGroup_Handler,
		},
		{
			MethodName: "RenameAssetGroup",
			Handler:    _AssetGroupsService_RenameAssetGroup_Handler,
		},
		{
			MethodName: "ListAssetGroups",
			Handler:    _AssetGroupsService_ListAssetGroups_Handler,
		},
		{
			MethodName: "GetAssetGroup",
			Handler:    _AssetGroupsService_GetAssetGroup_Handler,
		},
		{
			MethodName: "AddUserGroupToAssetGroup",
			Handler:    _AssetGroupsService_AddUserGroupToAssetGroup_Handler,
		},
		{
			MethodName: "RemoveUserGroupFromAssetGroup",
			Handler:    _AssetGroupsService_RemoveUserGroupFromAssetGroup_Handler,
		},
		{
			MethodName: "GetLegalEntitySites",
			Handler:    _AssetGroupsService_GetLegalEntitySites_Handler,
		},
		{
			MethodName: "GetMyLegalEntities",
			Handler:    _AssetGroupsService_GetMyLegalEntities_Handler,
		},
		{
			MethodName: "AddSiteToLegalEntityGroup",
			Handler:    _AssetGroupsService_AddSiteToLegalEntityGroup_Handler,
		},
		{
			MethodName: "RemoveSiteFromLegalEntityGroup",
			Handler:    _AssetGroupsService_RemoveSiteFromLegalEntityGroup_Handler,
		},
		{
			MethodName: "GetLegalEntitiesForSites",
			Handler:    _AssetGroupsService_GetLegalEntitiesForSites_Handler,
		},
		{
			MethodName: "GetSiteStructures",
			Handler:    _AssetGroupsService_GetSiteStructures_Handler,
		},
		{
			MethodName: "GetSiteHotIDs",
			Handler:    _AssetGroupsService_GetSiteHotIDs_Handler,
		},
		{
			MethodName: "GetMySites",
			Handler:    _AssetGroupsService_GetMySites_Handler,
		},
		{
			MethodName: "AddStructureToSiteGroup",
			Handler:    _AssetGroupsService_AddStructureToSiteGroup_Handler,
		},
		{
			MethodName: "RemoveStructureFromSiteGroup",
			Handler:    _AssetGroupsService_RemoveStructureFromSiteGroup_Handler,
		},
		{
			MethodName: "GetSitesForStructure",
			Handler:    _AssetGroupsService_GetSitesForStructure_Handler,
		},
		{
			MethodName: "AddHotIDToSiteGroup",
			Handler:    _AssetGroupsService_AddHotIDToSiteGroup_Handler,
		},
		{
			MethodName: "RemoveHotIDFromSiteGroup",
			Handler:    _AssetGroupsService_RemoveHotIDFromSiteGroup_Handler,
		},
		{
			MethodName: "GetSitesForHotID",
			Handler:    _AssetGroupsService_GetSitesForHotID_Handler,
		},
		{
			MethodName: "ListAssetGroupsForCurrentUser",
			Handler:    _AssetGroupsService_ListAssetGroupsForCurrentUser_Handler,
		},
		{
			MethodName: "GetAssetGroupNamesForHotIDs",
			Handler:    _AssetGroupsService_GetAssetGroupNamesForHotIDs_Handler,
		},
		{
			MethodName: "AddHotIDToAssetGroup",
			Handler:    _AssetGroupsService_AddHotIDToAssetGroup_Handler,
		},
		{
			MethodName: "RemoveHotIDFromAssetGroup",
			Handler:    _AssetGroupsService_RemoveHotIDFromAssetGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/assetgroups/assetgroups.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/assetgroups/assetgroups.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 1462 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x59, 0xdd, 0x73, 0xd3, 0x46,
	0x10, 0xaf, 0xec, 0x10, 0xc8, 0x3a, 0x01, 0x71, 0xd0, 0xd8, 0x88, 0x40, 0xdc, 0x23, 0xa1, 0xa6,
	0x2d, 0x81, 0x06, 0x66, 0xfa, 0x41, 0x99, 0xa9, 0xb1, 0xf3, 0xe1, 0x21, 0x75, 0x82, 0x2c, 0x67,
	0x68, 0x87, 0x99, 0x60, 0xe2, 0x6b, 0x50, 0x1b, 0x5b, 0xae, 0x24, 0xd3, 0xe1, 0xa1, 0x33, 0x9d,
	0xce, 0xf4, 0xa5, 0xaf, 0xfd, 0x87, 0x3b, 0x3a, 0x5d, 0xa4, 0xbb, 0xd3, 0xe9, 0x23, 0x81, 0xb6,
	0x4f, 0x91, 0x56, 0x7b, 0xbf, 0xfb, 0xdd, 0xde, 0xee, 0xdd, 0xfe, 0x62, 0xf8, 0xf2, 0xc8, 0x39,
	0x1e, 0x8c, 0x8f, 0xd6, 0x0e, 0x9d, 0xb1, 0x3b, 0x18, 0xfe, 0xea, 0x38, 0xc3, 0xb5, 0x31, 0xf1,
	0xef, 0x0d, 0x26, 0xb6, 0x77, 0x6f, 0xe0, 0x79, 0xc4, 0x3f, 0x72, 0x9d, 0xe9, 0x44, 0x78, 0x5e,
	0x9b, 0xb8, 0x8e, 0xef, 0xa0, 0x0a, 0x67, 0x32, 0xd6, 0x32, 0x60, 0x0e, 0x9d, 0xd1, 0xc8, 0x19,
	0xb3, 0x3f, 0xe1, 0x60, 0x3c, 0x85, 0x4a, 0xcb, 0x25, 0x03, 0x9f, 0x6c, 0x05, 0xe3, 0x11, 0x82,
	0x99, 0xee, 0x60, 0x44, 0x6a, 0x5a, 0x5d, 0x6b, 0xcc, 0x99, 0xf4, 0x19, 0x3d, 0x84, 0xb9, 0x66,
	0x30, 0x83, 0xf5, 0x76, 0x42, 0x6a, 0xa5, 0xba, 0xd6, 0xb8, 0xb8, 0xbe, 0xb8, 0xc6, 0xd3, 0x88,
	0xbe, 0x9a, 0xb1, 0x23, 0x5a, 0x82, 0xb9, 0x4d, 0xc7, 0x25, 0xf6, 0xd1, 0xb8, 0xd3, 0xae, 0x95,
	0x29, 0x5c, 0x6c, 0xc0, 0x3f, 0x02, 0x50, 0xd7, 0x70, 0xd6, 0x8b, 0x50, 0xea, 0xb4, 0xe9, 0x9c,
	0x0b, 0x66, 0xa9, 0xd3, 0x8e, 0x58, 0x94, 0xd2, 0x58, 0x9c, 0x2b, 0xc8, 0x02, 0xf7, 0xa1, 0x1a,
	0x2e, 0x2f, 0x9e, 0xcd, 0x24, 0xbf, 0x4c, 0x89, 0xe7, 0xa3, 0xaf, 0x85, 0x95, 0xd3, 0xb9, 0x2a,
	0xeb, 0x35, 0x01, 0x92, 0xfb, 0x6e, 0xf2, 0xce, 0xb8, 0x07, 0xb5, 0x24, 0xac, 0x37, 0x71, 0xc6,
	0x1e, 0x41, 0x5f, 0xf0, 0x4b, 0x63, 0xb0, 0xd5, 0x24, 0xd3, 0x70, 0x10, 0xe7, 0x8a, 0xef, 0x40,
	0xb5, 0x4d, 0x8e, 0x89, 0x8a, 0xab, 0x14, 0x20, 0xfc, 0x18, 0xaa, 0x26, 0x19, 0x0f, 0x46, 0xf9,
	0xae, 0xaa, 0x58, 0xe2, 0xdb, 0x70, 0x75, 0x8b, 0xf8, 0xf9, 0xd3, 0xec, 0xc1, 0x87, 0x92, 0x9f,
	0x72, 0x8d, 0x5a, 0xf1, 0x35, 0xbe, 0x86, 0xc5, 0x1d, 0xdb, 0xe3, 0x20, 0xbd, 0x93, 0xb9, 0x6b,
	0x70, 0x9e, 0x1a, 0x22, 0x02, 0x27, 0xaf, 0x67, 0xcb, 0x3f, 0x6c, 0x41, 0x35, 0x31, 0x13, 0x63,
	0xff, 0x15, 0x54, 0x38, 0x73, 0x4d, 0xab, 0x97, 0xb3, 0xe8, 0xf3, 0xbe, 0xf8, 0x29, 0x2c, 0x37,
	0x87, 0xc3, 0xbe, 0x47, 0x5c, 0x6a, 0xb0, 0x9c, 0xfc, 0x0d, 0xe0, 0x16, 0x56, 0x12, 0x16, 0x86,
	0xf7, 0x60, 0xc5, 0x24, 0x23, 0xe7, 0x0d, 0x89, 0xf0, 0x36, 0x5d, 0x67, 0xf4, 0x2e, 0x88, 0x0f,
	0xa0, 0xb2, 0x43, 0x8e, 0x06, 0xc7, 0x1b, 0x63, 0xdf, 0xf6, 0xdf, 0xa2, 0x15, 0x58, 0xe0, 0x5e,
	0x23, 0x0c, 0xd1, 0x88, 0xf7, 0x00, 0x71, 0x06, 0xae, 0x3c, 0x38, 0x2b, 0xdb, 0x63, 0xb1, 0x3c,
	0xf8, 0x51, 0xbc, 0x33, 0x7e, 0x06, 0x57, 0x04, 0x44, 0x16, 0xf7, 0x77, 0x81, 0x7c, 0x0e, 0xc6,
	0x16, 0xf1, 0x39, 0x4b, 0xcf, 0xf6, 0x89, 0xf7, 0x3e, 0xc8, 0xb6, 0xe1, 0xba, 0x12, 0x99, 0x91,
	0x5e, 0x85, 0x99, 0xc0, 0xc0, 0xb2, 0xe4, 0xb2, 0x80, 0x19, 0x7c, 0x30, 0xe9, 0x67, 0xc6, 0xef,
	0xbb, 0xb7, 0x31, 0x8e, 0xcd, 0x81, 0x24, 0xf8, 0x95, 0x8b, 0xf3, 0xbb, 0x19, 0x12, 0x40, 0x8b,
	0x30, 0x1b, 0xfc, 0x8d, 0x76, 0x91, 0xbd, 0x61, 0x1f, 0x2e, 0x05, 0x4f, 0xfc, 0xbe, 0xc7, 0x9c,
	0xb5, 0x0c, 0xce, 0x32, 0xab, 0xd2, 0x69, 0xa2, 0xf6, 0x10, 0x2a, 0x14, 0x89, 0x6d, 0x40, 0xb1,
	0x19, 0xf1, 0x3e, 0xcc, 0x87, 0xa3, 0x58, 0x5c, 0x36, 0x13, 0xdc, 0x19, 0xc2, 0x52, 0x02, 0x81,
	0x67, 0x22, 0x0f, 0xc2, 0x7f, 0x6a, 0x50, 0x6f, 0x0e, 0x87, 0x81, 0xd9, 0x72, 0xb8, 0x0f, 0xf2,
	0x81, 0x7f, 0xd6, 0x24, 0x89, 0xd6, 0x57, 0xca, 0x5e, 0xdf, 0x5f, 0x1a, 0xac, 0x86, 0x25, 0x1d,
	0xbc, 0x06, 0xd5, 0xfc, 0x3f, 0x92, 0xd9, 0x86, 0x65, 0x21, 0xb1, 0x6d, 0xe2, 0x6d, 0x3a, 0xae,
	0x50, 0x37, 0x05, 0x93, 0xdb, 0x4e, 0x45, 0xca, 0xde, 0xc9, 0xf2, 0xe9, 0x77, 0xb2, 0x09, 0xb5,
	0x2d, 0xe2, 0x07, 0xd6, 0x9e, 0xef, 0x4e, 0x0f, 0xfd, 0xa9, 0xab, 0x62, 0x9b, 0xb9, 0xee, 0x67,
	0x70, 0x4d, 0x01, 0xc1, 0x78, 0x3e, 0x84, 0xb9, 0xc8, 0xca, 0x18, 0x8a, 0x97, 0x49, 0xf4, 0xd5,
	0x8c, 0x1d, 0xf1, 0x63, 0x7a, 0x61, 0x06, 0x90, 0xdb, 0x8e, 0xdf, 0x69, 0x9f, 0x96, 0x51, 0x93,
	0xde, 0xa3, 0xfc, 0x70, 0xc6, 0xa6, 0x01, 0xe7, 0xa8, 0x85, 0x31, 0x41, 0x02, 0x00, 0xfd, 0x62,
	0x86, 0x0e, 0xf8, 0x11, 0x20, 0x7a, 0xbe, 0x9c, 0xe9, 0x70, 0xba, 0xcb, 0x2d, 0x1a, 0xd5, 0xa1,
	0x12, 0xbd, 0x44, 0x87, 0x09, 0x6f, 0xc2, 0xc7, 0xb0, 0x10, 0xbd, 0xd2, 0x83, 0x42, 0x0a, 0x9a,
	0x56, 0x28, 0x68, 0xc5, 0xd3, 0x54, 0x8f, 0x87, 0xb3, 0xb8, 0x9e, 0x69, 0x42, 0xdc, 0x87, 0xcb,
	0x1c, 0x12, 0x0b, 0xd1, 0xb7, 0xd2, 0x62, 0x18, 0x9c, 0xa1, 0x86, 0xa3, 0xbc, 0xc4, 0x01, 0xf8,
	0x37, 0xb8, 0x19, 0x9c, 0x2d, 0x27, 0x36, 0xcb, 0x09, 0xac, 0x42, 0x31, 0x17, 0x3c, 0x6f, 0x85,
	0x55, 0x95, 0x8a, 0xae, 0xea, 0x0f, 0x0d, 0x6e, 0xb1, 0x33, 0xe5, 0xc4, 0x16, 0x1c, 0x2c, 0xff,
	0x2d, 0x89, 0x1e, 0xbd, 0x24, 0x69, 0xf2, 0x05, 0x95, 0x9f, 0xb3, 0x5f, 0x05, 0xab, 0xea, 0x25,
	0x2c, 0xa9, 0x41, 0xd3, 0xb7, 0xae, 0x7c, 0xba, 0xad, 0xbb, 0xc1, 0xea, 0x0b, 0x5d, 0x8d, 0x0b,
	0x2d, 0x48, 0x77, 0x56, 0x54, 0x2f, 0x60, 0x8e, 0x3e, 0xd0, 0xc0, 0x34, 0x78, 0x97, 0xac, 0x5a,
	0x2c, 0x9a, 0xd8, 0x2d, 0xb8, 0xde, 0x1c, 0x0e, 0xe9, 0x90, 0x22, 0x7d, 0x62, 0x44, 0xb1, 0xc4,
	0x53, 0x1c, 0x81, 0x11, 0x83, 0x24, 0xf6, 0xfc, 0xbd, 0x73, 0xde, 0x86, 0x7a, 0x98, 0x6b, 0x74,
	0x54, 0xb1, 0x76, 0x54, 0x4d, 0xdc, 0x85, 0x65, 0x09, 0xe9, 0xdf, 0x67, 0xff, 0x0d, 0x60, 0x41,
	0xaf, 0x04, 0x62, 0x27, 0x48, 0x2d, 0xf1, 0xd0, 0x5e, 0x84, 0xd9, 0xd0, 0x50, 0x9b, 0xa9, 0x97,
	0x83, 0x46, 0x2a, 0x7c, 0xc3, 0x2d, 0xa8, 0x72, 0xe9, 0x18, 0xce, 0x9f, 0x64, 0x9a, 0x73, 0x4e,
	0x3f, 0x81, 0x45, 0x71, 0xfe, 0xe6, 0x78, 0x98, 0x91, 0x82, 0x4a, 0x79, 0xf6, 0x13, 0xdc, 0xca,
	0x5c, 0x06, 0x2b, 0x8f, 0x16, 0x13, 0x61, 0xf4, 0x33, 0x63, 0x76, 0x2b, 0x45, 0xc5, 0xf0, 0x4c,
	0x4c, 0x6e, 0x18, 0xde, 0x8b, 0xee, 0x5b, 0x6e, 0xd1, 0xf1, 0x5d, 0x19, 0x95, 0x87, 0xb2, 0xaa,
	0xa3, 0xaf, 0x66, 0xec, 0xf8, 0x89, 0xcd, 0xc9, 0x35, 0x04, 0x30, 0xbb, 0xbd, 0x6b, 0x1d, 0x74,
	0xda, 0xfa, 0x07, 0x48, 0x87, 0xf9, 0x9d, 0x8d, 0xad, 0xe6, 0xce, 0xc1, 0x46, 0xd7, 0xea, 0x58,
	0xdf, 0xeb, 0x1a, 0xba, 0x00, 0x33, 0xbd, 0x8e, 0xb5, 0xa1, 0x97, 0xd0, 0x02, 0xcc, 0xf5, 0x2c,
	0xb3, 0xdf, 0xb2, 0xfa, 0xe6, 0x86, 0x5e, 0x46, 0xf3, 0x70, 0x61, 0x67, 0xb7, 0xd5, 0xb4, 0x3a,
	0xbb, 0x5d, 0x7d, 0x06, 0x55, 0xe0, 0x7c, 0xb3, 0xd5, 0xda, 0xed, 0x77, 0x2d, 0xfd, 0x5c, 0x80,
	0xd8, 0xdb, 0xe8, 0xf6, 0x76, 0x4d, 0x7d, 0x76, 0xfd, 0x6f, 0x04, 0x88, 0x53, 0x67, 0x3d, 0xe2,
	0xbe, 0xb1, 0x0f, 0x09, 0x3a, 0x00, 0x5d, 0x56, 0xe7, 0x68, 0x45, 0x21, 0xec, 0x13, 0xa9, 0x6d,
	0xac, 0xe6, 0x78, 0x45, 0xcd, 0x8e, 0x2e, 0x2b, 0x75, 0x69, 0x82, 0x14, 0x21, 0x6f, 0xcc, 0xaf,
	0xb1, 0xff, 0xbe, 0xec, 0x3b, 0xf6, 0x30, 0xc0, 0x91, 0x65, 0xbc, 0x84, 0x93, 0xa2, 0xf2, 0x25,
	0x9c, 0x17, 0x70, 0x49, 0xd2, 0xba, 0x48, 0x4c, 0x04, 0xb5, 0xe6, 0x36, 0x56, 0xb2, 0x9d, 0xd8,
	0x6a, 0xf7, 0x61, 0x41, 0x48, 0x47, 0xf4, 0x91, 0x30, 0x4c, 0xf5, 0x9f, 0x04, 0x03, 0x67, 0xb9,
	0x44, 0xb8, 0xb5, 0x34, 0x2d, 0x8d, 0x3e, 0x13, 0xf3, 0x38, 0x5b, 0x72, 0x4b, 0xd1, 0x78, 0x09,
	0x37, 0x32, 0x65, 0x35, 0xfa, 0x5c, 0x0a, 0x71, 0xbe, 0x04, 0x97, 0x66, 0x78, 0x0d, 0x57, 0x14,
	0x92, 0x11, 0x7d, 0x2c, 0x2f, 0x3a, 0x45, 0xae, 0x1a, 0x8d, 0x7c, 0x47, 0x16, 0xa3, 0xa7, 0xac,
	0xed, 0x13, 0x7a, 0x6f, 0x24, 0xb0, 0x31, 0x12, 0xd3, 0xa6, 0xa9, 0xd0, 0x1f, 0xe0, 0x5a, 0xaa,
	0x48, 0x42, 0x77, 0xe5, 0x88, 0x67, 0x8a, 0x29, 0xe3, 0xe2, 0x09, 0x85, 0x9e, 0x3f, 0xf0, 0xa7,
	0x1e, 0x1a, 0xc2, 0xcd, 0x6c, 0xe1, 0x83, 0xd6, 0x15, 0x51, 0xcf, 0x51, 0x49, 0x89, 0x59, 0xde,
	0xd0, 0xd3, 0x4a, 0x29, 0x69, 0xa4, 0x94, 0xc9, 0x51, 0x3e, 0x46, 0x21, 0xef, 0x28, 0x72, 0xaf,
	0xe0, 0x72, 0x42, 0x52, 0xa0, 0x55, 0x19, 0x42, 0xa9, 0x5a, 0x8c, 0xdb, 0x79, 0x6e, 0x42, 0x99,
	0xc5, 0x22, 0x21, 0x59, 0x66, 0x09, 0xfd, 0x91, 0x2c, 0x33, 0x85, 0xc6, 0x78, 0x04, 0x10, 0x2b,
	0x07, 0x29, 0x75, 0x96, 0x93, 0xa9, 0x23, 0xe6, 0xdf, 0x3e, 0x54, 0x53, 0x7a, 0x5f, 0xf4, 0x69,
	0x22, 0x61, 0xd2, 0x3b, 0xe4, 0xc4, 0x46, 0xbe, 0x84, 0xa5, 0xac, 0x9e, 0x16, 0xdd, 0x57, 0x25,
	0x4b, 0x56, 0xfb, 0x9b, 0x98, 0xe1, 0xe7, 0x48, 0xb2, 0x09, 0xcd, 0x25, 0x6a, 0xa8, 0x42, 0xa6,
	0x6a, 0x6a, 0x8d, 0x3b, 0x05, 0x3c, 0x59, 0x98, 0xba, 0x70, 0x45, 0xd1, 0xa5, 0x49, 0x07, 0x42,
	0x7a, 0x1f, 0x97, 0x20, 0xff, 0x1c, 0x6a, 0x69, 0xcd, 0x93, 0x94, 0xe7, 0x39, 0x3d, 0x56, 0x02,
	0xf9, 0x00, 0x74, 0xf9, 0xbe, 0x97, 0xae, 0x9c, 0x94, 0x1e, 0xc8, 0x58, 0xcd, 0xf1, 0x62, 0xa1,
	0xe8, 0xc1, 0x0d, 0xe9, 0x22, 0xd9, 0x74, 0xdc, 0xd6, 0xd4, 0x75, 0xc9, 0xd8, 0x0f, 0x0e, 0x59,
	0x29, 0x03, 0x8b, 0x5d, 0x41, 0xbf, 0x6b, 0x54, 0x7f, 0xa4, 0xb5, 0x44, 0xe8, 0x5e, 0xfa, 0x75,
	0xa3, 0xec, 0x01, 0x8d, 0xfb, 0xc5, 0x07, 0x44, 0x5b, 0x7c, 0x55, 0xd5, 0xcd, 0x4b, 0xf9, 0x94,
	0xd1, 0xf0, 0x4b, 0x77, 0xc8, 0x73, 0xb8, 0x96, 0xda, 0x69, 0x4b, 0x87, 0x71, 0x5e, 0x47, 0x2e,
	0x22, 0x3f, 0x69, 0xc0, 0xed, 0x31, 0xf1, 0xf9, 0x5f, 0x80, 0xd8, 0x6f, 0x42, 0x83, 0x89, 0xed,
	0xf1, 0xc0, 0xaf, 0x66, 0xe9, 0x6f, 0x40, 0x0f, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0xb6, 0xfd,
	0x80, 0xae, 0x7c, 0x1a, 0x00, 0x00,
}
