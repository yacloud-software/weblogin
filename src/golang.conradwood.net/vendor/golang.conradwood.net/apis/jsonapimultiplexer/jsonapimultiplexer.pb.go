// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/jsonapimultiplexer/jsonapimultiplexer.proto
// DO NOT EDIT!

/*
Package jsonapimultiplexer is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/jsonapimultiplexer/jsonapimultiplexer.proto

It has these top-level messages:
*/
package jsonapimultiplexer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import h2gproxy "golang.conradwood.net/apis/h2gproxy"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for JSONApiMultiplexer service

type JSONApiMultiplexerClient interface {
	// new style, identical to webproxy/htmlmultiplexer
	ServeHTML(ctx context.Context, in *h2gproxy.ServeRequest, opts ...grpc.CallOption) (*h2gproxy.ServeResponse, error)
	// old-style!! // Obsolete
	Serve(ctx context.Context, in *h2gproxy.ServeRequest, opts ...grpc.CallOption) (*h2gproxy.ServeResponse, error)
	// reread all the targets and their protodefs
	Rescan(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
}

type jSONApiMultiplexerClient struct {
	cc *grpc.ClientConn
}

func NewJSONApiMultiplexerClient(cc *grpc.ClientConn) JSONApiMultiplexerClient {
	return &jSONApiMultiplexerClient{cc}
}

func (c *jSONApiMultiplexerClient) ServeHTML(ctx context.Context, in *h2gproxy.ServeRequest, opts ...grpc.CallOption) (*h2gproxy.ServeResponse, error) {
	out := new(h2gproxy.ServeResponse)
	err := grpc.Invoke(ctx, "/jsonapimultiplexer.JSONApiMultiplexer/ServeHTML", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jSONApiMultiplexerClient) Serve(ctx context.Context, in *h2gproxy.ServeRequest, opts ...grpc.CallOption) (*h2gproxy.ServeResponse, error) {
	out := new(h2gproxy.ServeResponse)
	err := grpc.Invoke(ctx, "/jsonapimultiplexer.JSONApiMultiplexer/Serve", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jSONApiMultiplexerClient) Rescan(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/jsonapimultiplexer.JSONApiMultiplexer/Rescan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for JSONApiMultiplexer service

type JSONApiMultiplexerServer interface {
	// new style, identical to webproxy/htmlmultiplexer
	ServeHTML(context.Context, *h2gproxy.ServeRequest) (*h2gproxy.ServeResponse, error)
	// old-style!! // Obsolete
	Serve(context.Context, *h2gproxy.ServeRequest) (*h2gproxy.ServeResponse, error)
	// reread all the targets and their protodefs
	Rescan(context.Context, *common.Void) (*common.Void, error)
}

func RegisterJSONApiMultiplexerServer(s *grpc.Server, srv JSONApiMultiplexerServer) {
	s.RegisterService(&_JSONApiMultiplexer_serviceDesc, srv)
}

func _JSONApiMultiplexer_ServeHTML_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(h2gproxy.ServeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JSONApiMultiplexerServer).ServeHTML(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jsonapimultiplexer.JSONApiMultiplexer/ServeHTML",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JSONApiMultiplexerServer).ServeHTML(ctx, req.(*h2gproxy.ServeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JSONApiMultiplexer_Serve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(h2gproxy.ServeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JSONApiMultiplexerServer).Serve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jsonapimultiplexer.JSONApiMultiplexer/Serve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JSONApiMultiplexerServer).Serve(ctx, req.(*h2gproxy.ServeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JSONApiMultiplexer_Rescan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JSONApiMultiplexerServer).Rescan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jsonapimultiplexer.JSONApiMultiplexer/Rescan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JSONApiMultiplexerServer).Rescan(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _JSONApiMultiplexer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jsonapimultiplexer.JSONApiMultiplexer",
	HandlerType: (*JSONApiMultiplexerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServeHTML",
			Handler:    _JSONApiMultiplexer_ServeHTML_Handler,
		},
		{
			MethodName: "Serve",
			Handler:    _JSONApiMultiplexer_Serve_Handler,
		},
		{
			MethodName: "Rescan",
			Handler:    _JSONApiMultiplexer_Rescan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/jsonapimultiplexer/jsonapimultiplexer.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/jsonapimultiplexer/jsonapimultiplexer.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x72, 0x4b, 0xcf, 0xcf, 0x49,
	0xcc, 0x4b, 0xd7, 0x4b, 0xce, 0xcf, 0x2b, 0x4a, 0x4c, 0x29, 0xcf, 0xcf, 0x4f, 0xd1, 0xcb, 0x4b,
	0x2d, 0xd1, 0x4f, 0x2c, 0xc8, 0x2c, 0xd6, 0xcf, 0x2a, 0xce, 0xcf, 0x4b, 0x2c, 0xc8, 0xcc, 0x2d,
	0xcd, 0x29, 0xc9, 0x2c, 0xc8, 0x49, 0xad, 0x48, 0x2d, 0xc2, 0x22, 0xa4, 0x57, 0x50, 0x94, 0x5f,
	0x92, 0x2f, 0x24, 0x84, 0x29, 0x23, 0x65, 0x84, 0xc7, 0xec, 0x0c, 0xa3, 0xf4, 0x82, 0xa2, 0xfc,
	0x8a, 0x4a, 0x38, 0x03, 0x62, 0x8e, 0x94, 0x1e, 0x1e, 0x3d, 0xc9, 0xf9, 0xb9, 0xb9, 0xf9, 0x79,
	0x50, 0x0a, 0xa2, 0xde, 0x68, 0x13, 0x23, 0x97, 0x90, 0x57, 0xb0, 0xbf, 0x9f, 0x63, 0x41, 0xa6,
	0x2f, 0xc2, 0x6a, 0x21, 0x1b, 0x2e, 0xce, 0xe0, 0xd4, 0xa2, 0xb2, 0x54, 0x8f, 0x10, 0x5f, 0x1f,
	0x21, 0x31, 0x3d, 0xb8, 0x25, 0x60, 0xc1, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x29, 0x71,
	0x0c, 0xf1, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x0b, 0x2e, 0x56, 0xb0, 0x00, 0xe9, 0x3a,
	0x55, 0xb8, 0xd8, 0x82, 0x52, 0x8b, 0x93, 0x13, 0xf3, 0x84, 0x78, 0xf4, 0xa0, 0xee, 0x0c, 0xcb,
	0xcf, 0x4c, 0x91, 0x42, 0xe1, 0x39, 0xe9, 0x73, 0xe9, 0xe6, 0xa5, 0x96, 0x20, 0xfb, 0x11, 0xea,
	0x6b, 0x90, 0x37, 0xf5, 0x30, 0x43, 0x32, 0x89, 0x0d, 0xec, 0x59, 0x63, 0x40, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xec, 0x8b, 0xad, 0xc3, 0xae, 0x01, 0x00, 0x00,
}
