// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/goeasyops/goeasyops.proto
// DO NOT EDIT!

/*
Package goeasyops is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/goeasyops/goeasyops.proto

It has these top-level messages:
	FindServiceRequest
	Target
	FindServiceResponse
	UserByLoginRequest
	UserByTokenRequest
	AuthResponse
	Call
	Chain
	Count
*/
package goeasyops

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"
import auth "golang.conradwood.net/apis/auth"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FindServiceRequest struct {
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
}

func (m *FindServiceRequest) Reset()                    { *m = FindServiceRequest{} }
func (m *FindServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*FindServiceRequest) ProtoMessage()               {}
func (*FindServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FindServiceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Target struct {
	IP   string `protobuf:"bytes,1,opt,name=IP" json:"IP,omitempty"`
	Port uint32 `protobuf:"varint,2,opt,name=Port" json:"Port,omitempty"`
}

func (m *Target) Reset()                    { *m = Target{} }
func (m *Target) String() string            { return proto.CompactTextString(m) }
func (*Target) ProtoMessage()               {}
func (*Target) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Target) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *Target) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type FindServiceResponse struct {
	Targets []*Target `protobuf:"bytes,1,rep,name=Targets" json:"Targets,omitempty"`
}

func (m *FindServiceResponse) Reset()                    { *m = FindServiceResponse{} }
func (m *FindServiceResponse) String() string            { return proto.CompactTextString(m) }
func (*FindServiceResponse) ProtoMessage()               {}
func (*FindServiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FindServiceResponse) GetTargets() []*Target {
	if m != nil {
		return m.Targets
	}
	return nil
}

type UserByLoginRequest struct {
	Username string `protobuf:"bytes,1,opt,name=Username" json:"Username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password" json:"Password,omitempty"`
}

func (m *UserByLoginRequest) Reset()                    { *m = UserByLoginRequest{} }
func (m *UserByLoginRequest) String() string            { return proto.CompactTextString(m) }
func (*UserByLoginRequest) ProtoMessage()               {}
func (*UserByLoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UserByLoginRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserByLoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type UserByTokenRequest struct {
	Token string `protobuf:"bytes,1,opt,name=Token" json:"Token,omitempty"`
}

func (m *UserByTokenRequest) Reset()                    { *m = UserByTokenRequest{} }
func (m *UserByTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*UserByTokenRequest) ProtoMessage()               {}
func (*UserByTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UserByTokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type AuthResponse struct {
	Valid bool       `protobuf:"varint,1,opt,name=Valid" json:"Valid,omitempty"`
	User  *auth.User `protobuf:"bytes,2,opt,name=User" json:"User,omitempty"`
}

func (m *AuthResponse) Reset()                    { *m = AuthResponse{} }
func (m *AuthResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthResponse) ProtoMessage()               {}
func (*AuthResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AuthResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *AuthResponse) GetUser() *auth.User {
	if m != nil {
		return m.User
	}
	return nil
}

type Call struct {
	Position  int32  `protobuf:"varint,1,opt,name=Position" json:"Position,omitempty"`
	UserID    string `protobuf:"bytes,2,opt,name=UserID" json:"UserID,omitempty"`
	ServiceID string `protobuf:"bytes,3,opt,name=ServiceID" json:"ServiceID,omitempty"`
	RequestID string `protobuf:"bytes,4,opt,name=RequestID" json:"RequestID,omitempty"`
}

func (m *Call) Reset()                    { *m = Call{} }
func (m *Call) String() string            { return proto.CompactTextString(m) }
func (*Call) ProtoMessage()               {}
func (*Call) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Call) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *Call) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *Call) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

func (m *Call) GetRequestID() string {
	if m != nil {
		return m.RequestID
	}
	return ""
}

type Chain struct {
	Position int32   `protobuf:"varint,1,opt,name=Position" json:"Position,omitempty"`
	Calls    []*Call `protobuf:"bytes,2,rep,name=Calls" json:"Calls,omitempty"`
}

func (m *Chain) Reset()                    { *m = Chain{} }
func (m *Chain) String() string            { return proto.CompactTextString(m) }
func (*Chain) ProtoMessage()               {}
func (*Chain) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Chain) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *Chain) GetCalls() []*Call {
	if m != nil {
		return m.Calls
	}
	return nil
}

type Count struct {
	Count uint32 `protobuf:"varint,1,opt,name=Count" json:"Count,omitempty"`
}

func (m *Count) Reset()                    { *m = Count{} }
func (m *Count) String() string            { return proto.CompactTextString(m) }
func (*Count) ProtoMessage()               {}
func (*Count) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Count) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*FindServiceRequest)(nil), "goeasyops.FindServiceRequest")
	proto.RegisterType((*Target)(nil), "goeasyops.Target")
	proto.RegisterType((*FindServiceResponse)(nil), "goeasyops.FindServiceResponse")
	proto.RegisterType((*UserByLoginRequest)(nil), "goeasyops.UserByLoginRequest")
	proto.RegisterType((*UserByTokenRequest)(nil), "goeasyops.UserByTokenRequest")
	proto.RegisterType((*AuthResponse)(nil), "goeasyops.AuthResponse")
	proto.RegisterType((*Call)(nil), "goeasyops.Call")
	proto.RegisterType((*Chain)(nil), "goeasyops.Chain")
	proto.RegisterType((*Count)(nil), "goeasyops.Count")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EasyOps service

type EasyOpsClient interface {
	FindService(ctx context.Context, in *FindServiceRequest, opts ...grpc.CallOption) (*FindServiceResponse, error)
	UserByLogin(ctx context.Context, in *UserByLoginRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	UserByToken(ctx context.Context, in *UserByTokenRequest, opts ...grpc.CallOption) (*AuthResponse, error)
}

type easyOpsClient struct {
	cc *grpc.ClientConn
}

func NewEasyOpsClient(cc *grpc.ClientConn) EasyOpsClient {
	return &easyOpsClient{cc}
}

func (c *easyOpsClient) FindService(ctx context.Context, in *FindServiceRequest, opts ...grpc.CallOption) (*FindServiceResponse, error) {
	out := new(FindServiceResponse)
	err := grpc.Invoke(ctx, "/goeasyops.EasyOps/FindService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easyOpsClient) UserByLogin(ctx context.Context, in *UserByLoginRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := grpc.Invoke(ctx, "/goeasyops.EasyOps/UserByLogin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easyOpsClient) UserByToken(ctx context.Context, in *UserByTokenRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := grpc.Invoke(ctx, "/goeasyops.EasyOps/UserByToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EasyOps service

type EasyOpsServer interface {
	FindService(context.Context, *FindServiceRequest) (*FindServiceResponse, error)
	UserByLogin(context.Context, *UserByLoginRequest) (*AuthResponse, error)
	UserByToken(context.Context, *UserByTokenRequest) (*AuthResponse, error)
}

func RegisterEasyOpsServer(s *grpc.Server, srv EasyOpsServer) {
	s.RegisterService(&_EasyOps_serviceDesc, srv)
}

func _EasyOps_FindService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasyOpsServer).FindService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goeasyops.EasyOps/FindService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasyOpsServer).FindService(ctx, req.(*FindServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasyOps_UserByLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserByLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasyOpsServer).UserByLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goeasyops.EasyOps/UserByLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasyOpsServer).UserByLogin(ctx, req.(*UserByLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasyOps_UserByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserByTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasyOpsServer).UserByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goeasyops.EasyOps/UserByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasyOpsServer).UserByToken(ctx, req.(*UserByTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EasyOps_serviceDesc = grpc.ServiceDesc{
	ServiceName: "goeasyops.EasyOps",
	HandlerType: (*EasyOpsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindService",
			Handler:    _EasyOps_FindService_Handler,
		},
		{
			MethodName: "UserByLogin",
			Handler:    _EasyOps_UserByLogin_Handler,
		},
		{
			MethodName: "UserByToken",
			Handler:    _EasyOps_UserByToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/goeasyops/goeasyops.proto",
}

// Client API for EasyOpsTest service

type EasyOpsTestClient interface {
	CheckSerialisation(ctx context.Context, in *Count, opts ...grpc.CallOption) (*common.Void, error)
	Ping(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*Chain, error)
	// does exactly nothing
	SimplePing(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
}

type easyOpsTestClient struct {
	cc *grpc.ClientConn
}

func NewEasyOpsTestClient(cc *grpc.ClientConn) EasyOpsTestClient {
	return &easyOpsTestClient{cc}
}

func (c *easyOpsTestClient) CheckSerialisation(ctx context.Context, in *Count, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/goeasyops.EasyOpsTest/CheckSerialisation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easyOpsTestClient) Ping(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*Chain, error) {
	out := new(Chain)
	err := grpc.Invoke(ctx, "/goeasyops.EasyOpsTest/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *easyOpsTestClient) SimplePing(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/goeasyops.EasyOpsTest/SimplePing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EasyOpsTest service

type EasyOpsTestServer interface {
	CheckSerialisation(context.Context, *Count) (*common.Void, error)
	Ping(context.Context, *Chain) (*Chain, error)
	// does exactly nothing
	SimplePing(context.Context, *common.Void) (*common.Void, error)
}

func RegisterEasyOpsTestServer(s *grpc.Server, srv EasyOpsTestServer) {
	s.RegisterService(&_EasyOpsTest_serviceDesc, srv)
}

func _EasyOpsTest_CheckSerialisation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Count)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasyOpsTestServer).CheckSerialisation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goeasyops.EasyOpsTest/CheckSerialisation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasyOpsTestServer).CheckSerialisation(ctx, req.(*Count))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasyOpsTest_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasyOpsTestServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goeasyops.EasyOpsTest/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasyOpsTestServer).Ping(ctx, req.(*Chain))
	}
	return interceptor(ctx, in, info, handler)
}

func _EasyOpsTest_SimplePing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EasyOpsTestServer).SimplePing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goeasyops.EasyOpsTest/SimplePing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EasyOpsTestServer).SimplePing(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _EasyOpsTest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "goeasyops.EasyOpsTest",
	HandlerType: (*EasyOpsTestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckSerialisation",
			Handler:    _EasyOpsTest_CheckSerialisation_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _EasyOpsTest_Ping_Handler,
		},
		{
			MethodName: "SimplePing",
			Handler:    _EasyOpsTest_SimplePing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/goeasyops/goeasyops.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/goeasyops/goeasyops.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 532 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x93, 0xeb, 0x6e, 0xda, 0x30,
	0x14, 0xc7, 0x15, 0x4a, 0xda, 0x72, 0x68, 0x77, 0xf1, 0xaa, 0x2d, 0x8a, 0xd6, 0x0a, 0x45, 0xdb,
	0x84, 0xd8, 0x94, 0x4a, 0xac, 0x2f, 0x30, 0xa0, 0x93, 0x32, 0xa1, 0x2d, 0x32, 0xac, 0xdf, 0x3d,
	0x62, 0x05, 0xab, 0xc1, 0xce, 0xe2, 0xd0, 0x8a, 0x47, 0xd9, 0x03, 0xee, 0x3d, 0x26, 0x5f, 0x08,
	0x89, 0x58, 0xf9, 0x02, 0x3e, 0xe7, 0x7f, 0xf2, 0xf3, 0xf1, 0xb9, 0xc0, 0x4d, 0x2a, 0x32, 0xc2,
	0xd3, 0x70, 0x21, 0x78, 0x41, 0x92, 0x47, 0x21, 0x92, 0x90, 0xd3, 0xf2, 0x9a, 0xe4, 0x4c, 0x5e,
	0xa7, 0x82, 0x12, 0xb9, 0x11, 0x79, 0xed, 0x14, 0xe6, 0x85, 0x28, 0x05, 0xea, 0x54, 0x0e, 0x3f,
	0x3c, 0x00, 0x58, 0x88, 0xd5, 0x4a, 0x70, 0xfb, 0x67, 0x3e, 0xf5, 0x07, 0x07, 0xe2, 0xc9, 0xba,
	0x5c, 0xea, 0x1f, 0x13, 0x1b, 0xf4, 0x01, 0x7d, 0x65, 0x3c, 0x99, 0xd1, 0xe2, 0x81, 0x2d, 0x28,
	0xa6, 0xbf, 0xd7, 0x54, 0x96, 0x08, 0x41, 0xfb, 0x3b, 0x59, 0x51, 0xcf, 0xe9, 0x39, 0xfd, 0x0e,
	0xd6, 0xe7, 0xe0, 0x13, 0x1c, 0xcf, 0x49, 0x91, 0xd2, 0x12, 0x3d, 0x83, 0x56, 0x14, 0x5b, 0xad,
	0x15, 0xc5, 0x2a, 0x3a, 0x16, 0x45, 0xe9, 0xb5, 0x7a, 0x4e, 0xff, 0x1c, 0xeb, 0x73, 0x30, 0x82,
	0x57, 0x0d, 0xae, 0xcc, 0x05, 0x97, 0x14, 0x7d, 0x84, 0x13, 0x03, 0x91, 0x9e, 0xd3, 0x3b, 0xea,
	0x77, 0x87, 0x2f, 0xc3, 0xdd, 0xc3, 0x8d, 0x82, 0xb7, 0x11, 0xc1, 0x14, 0xd0, 0x4f, 0x49, 0x8b,
	0xd1, 0x66, 0x2a, 0x52, 0xc6, 0xb7, 0xb9, 0xf9, 0x70, 0xaa, 0xbc, 0x7c, 0x97, 0x5f, 0x65, 0x2b,
	0x2d, 0x26, 0x52, 0x3e, 0x8a, 0x22, 0xd1, 0xd9, 0x74, 0x70, 0x65, 0x07, 0x83, 0x2d, 0x6d, 0x2e,
	0xee, 0x69, 0x45, 0xbb, 0x00, 0x57, 0xdb, 0x16, 0x65, 0x8c, 0x60, 0x02, 0x67, 0x5f, 0xd6, 0xe5,
	0xb2, 0x4a, 0xfb, 0x02, 0xdc, 0x3b, 0x92, 0xb1, 0x44, 0x47, 0x9d, 0x62, 0x63, 0xa0, 0x2b, 0x68,
	0x2b, 0xa2, 0xbe, 0xa9, 0x3b, 0x84, 0x50, 0x97, 0x55, 0x79, 0xb0, 0xf6, 0x07, 0x0f, 0xd0, 0x1e,
	0x93, 0x2c, 0xd3, 0x59, 0x09, 0xc9, 0x4a, 0x26, 0xcc, 0x35, 0x2e, 0xae, 0x6c, 0xf4, 0x1a, 0x8e,
	0x55, 0x6c, 0x34, 0xb1, 0xf9, 0x5a, 0x0b, 0xbd, 0x85, 0x8e, 0xad, 0x5d, 0x34, 0xf1, 0x8e, 0xb4,
	0xb4, 0x73, 0x28, 0xd5, 0x3e, 0x20, 0x9a, 0x78, 0x6d, 0xa3, 0x56, 0x8e, 0xe0, 0x1b, 0xb8, 0xe3,
	0x25, 0x61, 0xfc, 0xe0, 0xc5, 0xef, 0xc1, 0x55, 0xc9, 0x49, 0xaf, 0xa5, 0xfb, 0xf0, 0xbc, 0xd6,
	0x07, 0xe5, 0xc7, 0x46, 0x0d, 0x2e, 0xc1, 0x1d, 0x8b, 0x35, 0xd7, 0x85, 0xd2, 0x07, 0x0d, 0x3a,
	0xc7, 0xc6, 0x18, 0xfe, 0x75, 0xe0, 0xe4, 0x96, 0xc8, 0xcd, 0x8f, 0x5c, 0xa2, 0x29, 0x74, 0x6b,
	0x2d, 0x47, 0x97, 0x35, 0xe2, 0xfe, 0x88, 0xf9, 0x57, 0x4f, 0xc9, 0xb6, 0xe4, 0xb7, 0xd0, 0xad,
	0x35, 0xbf, 0x41, 0xdb, 0x1f, 0x0a, 0xff, 0x4d, 0x4d, 0x6e, 0x74, 0xae, 0xc2, 0xe8, 0xc6, 0xfe,
	0x07, 0x53, 0x9f, 0x86, 0x27, 0x31, 0xc3, 0x3f, 0x0e, 0x74, 0xed, 0x3b, 0xe7, 0x6a, 0x6c, 0x6e,
	0x00, 0x8d, 0x97, 0x74, 0x71, 0x3f, 0xa3, 0x05, 0x23, 0x19, 0x93, 0x44, 0xd7, 0xf4, 0x45, 0xbd,
	0x88, 0xaa, 0x3e, 0xfe, 0x59, 0x68, 0x37, 0xf3, 0x4e, 0xb0, 0x04, 0x0d, 0xa0, 0x1d, 0x33, 0x9e,
	0x36, 0xe3, 0x54, 0xa7, 0xfc, 0x3d, 0x0f, 0xea, 0x03, 0xcc, 0xd8, 0x2a, 0xcf, 0xa8, 0xfe, 0xa2,
	0xc1, 0x69, 0x52, 0x47, 0x1f, 0xe0, 0x1d, 0xa7, 0x65, 0x7d, 0xdb, 0xed, 0xfe, 0xab, 0x85, 0xdf,
	0x71, 0x7f, 0x1d, 0xeb, 0x8d, 0xff, 0xfc, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x80, 0xf8, 0x54, 0xa7,
	0x90, 0x04, 0x00, 0x00,
}
