// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/gdrive/gdrive.proto
// DO NOT EDIT!

/*
Package gdrive is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/gdrive/gdrive.proto

It has these top-level messages:
	PingResponse
	File
	SheetID
	SimpleStringRow
	SimpleStringSheet
*/
package gdrive

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// comment: message pingresponse
type PingResponse struct {
	// comment: field pingresponse.response
	Response string `protobuf:"bytes,1,opt,name=Response" json:"Response,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PingResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type File struct {
	ID            string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	FileExtension string `protobuf:"bytes,3,opt,name=FileExtension" json:"FileExtension,omitempty"`
	IsDirectory   bool   `protobuf:"varint,4,opt,name=IsDirectory" json:"IsDirectory,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *File) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *File) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *File) GetFileExtension() string {
	if m != nil {
		return m.FileExtension
	}
	return ""
}

func (m *File) GetIsDirectory() bool {
	if m != nil {
		return m.IsDirectory
	}
	return false
}

type SheetID struct {
	ID   string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
}

func (m *SheetID) Reset()                    { *m = SheetID{} }
func (m *SheetID) String() string            { return proto.CompactTextString(m) }
func (*SheetID) ProtoMessage()               {}
func (*SheetID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SheetID) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *SheetID) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SimpleStringRow struct {
	Cells []string `protobuf:"bytes,1,rep,name=Cells" json:"Cells,omitempty"`
}

func (m *SimpleStringRow) Reset()                    { *m = SimpleStringRow{} }
func (m *SimpleStringRow) String() string            { return proto.CompactTextString(m) }
func (*SimpleStringRow) ProtoMessage()               {}
func (*SimpleStringRow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SimpleStringRow) GetCells() []string {
	if m != nil {
		return m.Cells
	}
	return nil
}

type SimpleStringSheet struct {
	Rows []*SimpleStringRow `protobuf:"bytes,1,rep,name=Rows" json:"Rows,omitempty"`
}

func (m *SimpleStringSheet) Reset()                    { *m = SimpleStringSheet{} }
func (m *SimpleStringSheet) String() string            { return proto.CompactTextString(m) }
func (*SimpleStringSheet) ProtoMessage()               {}
func (*SimpleStringSheet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SimpleStringSheet) GetRows() []*SimpleStringRow {
	if m != nil {
		return m.Rows
	}
	return nil
}

func init() {
	proto.RegisterType((*PingResponse)(nil), "gdrive.PingResponse")
	proto.RegisterType((*File)(nil), "gdrive.File")
	proto.RegisterType((*SheetID)(nil), "gdrive.SheetID")
	proto.RegisterType((*SimpleStringRow)(nil), "gdrive.SimpleStringRow")
	proto.RegisterType((*SimpleStringSheet)(nil), "gdrive.SimpleStringSheet")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GDrive service

type GDriveClient interface {
	// comment: rpc ping
	Ping(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PingResponse, error)
	// read a (simple) sheet by id - all cells are assumed to be strings
	ReadSimpleStringSheet(ctx context.Context, in *SheetID, opts ...grpc.CallOption) (*SimpleStringSheet, error)
}

type gDriveClient struct {
	cc *grpc.ClientConn
}

func NewGDriveClient(cc *grpc.ClientConn) GDriveClient {
	return &gDriveClient{cc}
}

func (c *gDriveClient) Ping(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/gdrive.GDrive/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gDriveClient) ReadSimpleStringSheet(ctx context.Context, in *SheetID, opts ...grpc.CallOption) (*SimpleStringSheet, error) {
	out := new(SimpleStringSheet)
	err := grpc.Invoke(ctx, "/gdrive.GDrive/ReadSimpleStringSheet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GDrive service

type GDriveServer interface {
	// comment: rpc ping
	Ping(context.Context, *common.Void) (*PingResponse, error)
	// read a (simple) sheet by id - all cells are assumed to be strings
	ReadSimpleStringSheet(context.Context, *SheetID) (*SimpleStringSheet, error)
}

func RegisterGDriveServer(s *grpc.Server, srv GDriveServer) {
	s.RegisterService(&_GDrive_serviceDesc, srv)
}

func _GDrive_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GDriveServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gdrive.GDrive/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GDriveServer).Ping(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _GDrive_ReadSimpleStringSheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SheetID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GDriveServer).ReadSimpleStringSheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gdrive.GDrive/ReadSimpleStringSheet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GDriveServer).ReadSimpleStringSheet(ctx, req.(*SheetID))
	}
	return interceptor(ctx, in, info, handler)
}

var _GDrive_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gdrive.GDrive",
	HandlerType: (*GDriveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GDrive_Ping_Handler,
		},
		{
			MethodName: "ReadSimpleStringSheet",
			Handler:    _GDrive_ReadSimpleStringSheet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/gdrive/gdrive.proto",
}

func init() { proto.RegisterFile("golang.conradwood.net/apis/gdrive/gdrive.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x51, 0xd1, 0x4a, 0xc3, 0x40,
	0x10, 0x24, 0x6d, 0xac, 0xed, 0xb6, 0x5a, 0x3c, 0x2a, 0xc6, 0xe0, 0x43, 0x08, 0x82, 0xa5, 0x62,
	0x0a, 0xf5, 0x07, 0xc4, 0x46, 0x25, 0x2f, 0x22, 0x57, 0xf0, 0x3d, 0x36, 0x4b, 0x3c, 0x48, 0x6e,
	0xc3, 0xe5, 0xb0, 0xf6, 0xef, 0x25, 0x97, 0xb4, 0xb4, 0x2a, 0xe2, 0xd3, 0xed, 0xee, 0xcc, 0xde,
	0xb0, 0x33, 0x10, 0xa4, 0x94, 0xc5, 0x32, 0x0d, 0x96, 0x24, 0x55, 0x9c, 0xac, 0x88, 0x92, 0x40,
	0xa2, 0x9e, 0xc6, 0x85, 0x28, 0xa7, 0x69, 0xa2, 0xc4, 0x07, 0x36, 0x4f, 0x50, 0x28, 0xd2, 0xc4,
	0x3a, 0x75, 0xe7, 0xfe, 0xb5, 0xb7, 0xa4, 0x3c, 0x27, 0xd9, 0x3c, 0xf5, 0x9e, 0x3f, 0x81, 0xc1,
	0x8b, 0x90, 0x29, 0xc7, 0xb2, 0x20, 0x59, 0x22, 0x73, 0xa1, 0xbb, 0xa9, 0x1d, 0xcb, 0xb3, 0xc6,
	0x3d, 0xbe, 0xed, 0x7d, 0x05, 0xf6, 0xa3, 0xc8, 0x90, 0x1d, 0x43, 0x2b, 0x0a, 0x1b, 0xb4, 0x15,
	0x85, 0x8c, 0x81, 0xfd, 0x1c, 0xe7, 0xe8, 0xb4, 0xcc, 0xc4, 0xd4, 0xec, 0x12, 0x8e, 0x2a, 0xee,
	0xc3, 0xa7, 0x46, 0x59, 0x0a, 0x92, 0x4e, 0xdb, 0x80, 0xfb, 0x43, 0xe6, 0x41, 0x3f, 0x2a, 0x43,
	0xa1, 0x70, 0xa9, 0x49, 0xad, 0x1d, 0xdb, 0xb3, 0xc6, 0x5d, 0xbe, 0x3b, 0xf2, 0x6f, 0xe0, 0x70,
	0xf1, 0x8e, 0xa8, 0xa3, 0xf0, 0x3f, 0xb2, 0xfe, 0x15, 0x0c, 0x17, 0x22, 0x2f, 0x32, 0x5c, 0x68,
	0x55, 0x9d, 0x45, 0x2b, 0x36, 0x82, 0x83, 0x39, 0x66, 0x59, 0xe9, 0x58, 0x5e, 0x7b, 0xdc, 0xe3,
	0x75, 0xe3, 0xdf, 0xc1, 0xc9, 0x2e, 0xd1, 0x68, 0xb0, 0x6b, 0xb0, 0x39, 0xad, 0x6a, 0x66, 0x7f,
	0x76, 0x16, 0x34, 0x0e, 0x7f, 0xfb, 0x91, 0x1b, 0xd2, 0x6c, 0x0d, 0x9d, 0xa7, 0xb0, 0xc2, 0xd9,
	0x04, 0xec, 0xca, 0x43, 0x36, 0x08, 0x1a, 0x6b, 0x5f, 0x49, 0x24, 0xee, 0x68, 0xb3, 0xbe, 0xe7,
	0xef, 0x1c, 0x4e, 0x39, 0xc6, 0xc9, 0x4f, 0xed, 0xe1, 0x56, 0xad, 0x3e, 0xd7, 0x3d, 0xff, 0x4d,
	0xde, 0x80, 0xf7, 0x17, 0xe0, 0x4a, 0xd4, 0xbb, 0x19, 0x57, 0xf9, 0x36, 0xfc, 0xb7, 0x8e, 0x49,
	0xf6, 0xf6, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x06, 0xb1, 0x9a, 0x5f, 0x43, 0x02, 0x00, 0x00,
}
