// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/prober/prober.proto
// DO NOT EDIT!

/*
Package prober is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/prober/prober.proto

It has these top-level messages:
	ProberStatus
	ProberStatusList
	JsonApiTestRequest
	JsonApiTestResponse
	PublicProberData
*/
package prober

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"
import h2gproxy "golang.conradwood.net/apis/h2gproxy"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// a single prober
type ProberStatus struct {
	Name          string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	StatusMessage string `protobuf:"bytes,2,opt,name=StatusMessage" json:"StatusMessage,omitempty"`
	Failed        bool   `protobuf:"varint,3,opt,name=Failed" json:"Failed,omitempty"`
}

func (m *ProberStatus) Reset()                    { *m = ProberStatus{} }
func (m *ProberStatus) String() string            { return proto.CompactTextString(m) }
func (*ProberStatus) ProtoMessage()               {}
func (*ProberStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ProberStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProberStatus) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *ProberStatus) GetFailed() bool {
	if m != nil {
		return m.Failed
	}
	return false
}

type ProberStatusList struct {
	Probers []*ProberStatus `protobuf:"bytes,1,rep,name=Probers" json:"Probers,omitempty"`
}

func (m *ProberStatusList) Reset()                    { *m = ProberStatusList{} }
func (m *ProberStatusList) String() string            { return proto.CompactTextString(m) }
func (*ProberStatusList) ProtoMessage()               {}
func (*ProberStatusList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ProberStatusList) GetProbers() []*ProberStatus {
	if m != nil {
		return m.Probers
	}
	return nil
}

type JsonApiTestRequest struct {
	Input string `protobuf:"bytes,1,opt,name=Input" json:"Input,omitempty"`
}

func (m *JsonApiTestRequest) Reset()                    { *m = JsonApiTestRequest{} }
func (m *JsonApiTestRequest) String() string            { return proto.CompactTextString(m) }
func (*JsonApiTestRequest) ProtoMessage()               {}
func (*JsonApiTestRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *JsonApiTestRequest) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

type JsonApiTestResponse struct {
	Input                string `protobuf:"bytes,1,opt,name=Input" json:"Input,omitempty"`
	ProberIdentification string `protobuf:"bytes,2,opt,name=ProberIdentification" json:"ProberIdentification,omitempty"`
	Message              string `protobuf:"bytes,3,opt,name=Message" json:"Message,omitempty"`
}

func (m *JsonApiTestResponse) Reset()                    { *m = JsonApiTestResponse{} }
func (m *JsonApiTestResponse) String() string            { return proto.CompactTextString(m) }
func (*JsonApiTestResponse) ProtoMessage()               {}
func (*JsonApiTestResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *JsonApiTestResponse) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

func (m *JsonApiTestResponse) GetProberIdentification() string {
	if m != nil {
		return m.ProberIdentification
	}
	return ""
}

func (m *JsonApiTestResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PublicProberData struct {
}

func (m *PublicProberData) Reset()                    { *m = PublicProberData{} }
func (m *PublicProberData) String() string            { return proto.CompactTextString(m) }
func (*PublicProberData) ProtoMessage()               {}
func (*PublicProberData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*ProberStatus)(nil), "prober.ProberStatus")
	proto.RegisterType((*ProberStatusList)(nil), "prober.ProberStatusList")
	proto.RegisterType((*JsonApiTestRequest)(nil), "prober.JsonApiTestRequest")
	proto.RegisterType((*JsonApiTestResponse)(nil), "prober.JsonApiTestResponse")
	proto.RegisterType((*PublicProberData)(nil), "prober.PublicProberData")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ProberService service

type ProberServiceClient interface {
	// returns current status of all probers
	GetProberStatus(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*ProberStatusList, error)
	// returns status of all probers which currently are failing
	GetFailedProbers(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*ProberStatusList, error)
	// streams a random file with checksum (for 'artifically' testing h2gproxy and friends)
	StreamHTTP(ctx context.Context, in *h2gproxy.StreamRequest, opts ...grpc.CallOption) (ProberService_StreamHTTPClient, error)
	// serve a website (for 'artificially' testing h2gproxy and friends)
	// https://www.conradwood.net/testing/auth/html/probers
	// https://www.conradwood.net/testing/noauth/html/probers
	ServeHTML(ctx context.Context, in *h2gproxy.ServeRequest, opts ...grpc.CallOption) (*h2gproxy.ServeResponse, error)
	// serve some json foo (for 'artificially' testing h2gproxy, jsonapi and friends)
	JsonApiFoo(ctx context.Context, in *JsonApiTestRequest, opts ...grpc.CallOption) (*JsonApiTestResponse, error)
	// die with a panic. does not return
	Panic(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	// print a very long line on stdout. Expect to be killed by autodeployer
	PrintLongLine(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
}

type proberServiceClient struct {
	cc *grpc.ClientConn
}

func NewProberServiceClient(cc *grpc.ClientConn) ProberServiceClient {
	return &proberServiceClient{cc}
}

func (c *proberServiceClient) GetProberStatus(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*ProberStatusList, error) {
	out := new(ProberStatusList)
	err := grpc.Invoke(ctx, "/prober.ProberService/GetProberStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proberServiceClient) GetFailedProbers(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*ProberStatusList, error) {
	out := new(ProberStatusList)
	err := grpc.Invoke(ctx, "/prober.ProberService/GetFailedProbers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proberServiceClient) StreamHTTP(ctx context.Context, in *h2gproxy.StreamRequest, opts ...grpc.CallOption) (ProberService_StreamHTTPClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ProberService_serviceDesc.Streams[0], c.cc, "/prober.ProberService/StreamHTTP", opts...)
	if err != nil {
		return nil, err
	}
	x := &proberServiceStreamHTTPClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProberService_StreamHTTPClient interface {
	Recv() (*h2gproxy.StreamDataResponse, error)
	grpc.ClientStream
}

type proberServiceStreamHTTPClient struct {
	grpc.ClientStream
}

func (x *proberServiceStreamHTTPClient) Recv() (*h2gproxy.StreamDataResponse, error) {
	m := new(h2gproxy.StreamDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *proberServiceClient) ServeHTML(ctx context.Context, in *h2gproxy.ServeRequest, opts ...grpc.CallOption) (*h2gproxy.ServeResponse, error) {
	out := new(h2gproxy.ServeResponse)
	err := grpc.Invoke(ctx, "/prober.ProberService/ServeHTML", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proberServiceClient) JsonApiFoo(ctx context.Context, in *JsonApiTestRequest, opts ...grpc.CallOption) (*JsonApiTestResponse, error) {
	out := new(JsonApiTestResponse)
	err := grpc.Invoke(ctx, "/prober.ProberService/JsonApiFoo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proberServiceClient) Panic(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/prober.ProberService/Panic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proberServiceClient) PrintLongLine(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/prober.ProberService/PrintLongLine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProberService service

type ProberServiceServer interface {
	// returns current status of all probers
	GetProberStatus(context.Context, *common.Void) (*ProberStatusList, error)
	// returns status of all probers which currently are failing
	GetFailedProbers(context.Context, *common.Void) (*ProberStatusList, error)
	// streams a random file with checksum (for 'artifically' testing h2gproxy and friends)
	StreamHTTP(*h2gproxy.StreamRequest, ProberService_StreamHTTPServer) error
	// serve a website (for 'artificially' testing h2gproxy and friends)
	// https://www.conradwood.net/testing/auth/html/probers
	// https://www.conradwood.net/testing/noauth/html/probers
	ServeHTML(context.Context, *h2gproxy.ServeRequest) (*h2gproxy.ServeResponse, error)
	// serve some json foo (for 'artificially' testing h2gproxy, jsonapi and friends)
	JsonApiFoo(context.Context, *JsonApiTestRequest) (*JsonApiTestResponse, error)
	// die with a panic. does not return
	Panic(context.Context, *common.Void) (*common.Void, error)
	// print a very long line on stdout. Expect to be killed by autodeployer
	PrintLongLine(context.Context, *common.Void) (*common.Void, error)
}

func RegisterProberServiceServer(s *grpc.Server, srv ProberServiceServer) {
	s.RegisterService(&_ProberService_serviceDesc, srv)
}

func _ProberService_GetProberStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProberServiceServer).GetProberStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prober.ProberService/GetProberStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProberServiceServer).GetProberStatus(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProberService_GetFailedProbers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProberServiceServer).GetFailedProbers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prober.ProberService/GetFailedProbers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProberServiceServer).GetFailedProbers(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProberService_StreamHTTP_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(h2gproxy.StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProberServiceServer).StreamHTTP(m, &proberServiceStreamHTTPServer{stream})
}

type ProberService_StreamHTTPServer interface {
	Send(*h2gproxy.StreamDataResponse) error
	grpc.ServerStream
}

type proberServiceStreamHTTPServer struct {
	grpc.ServerStream
}

func (x *proberServiceStreamHTTPServer) Send(m *h2gproxy.StreamDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProberService_ServeHTML_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(h2gproxy.ServeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProberServiceServer).ServeHTML(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prober.ProberService/ServeHTML",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProberServiceServer).ServeHTML(ctx, req.(*h2gproxy.ServeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProberService_JsonApiFoo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JsonApiTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProberServiceServer).JsonApiFoo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prober.ProberService/JsonApiFoo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProberServiceServer).JsonApiFoo(ctx, req.(*JsonApiTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProberService_Panic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProberServiceServer).Panic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prober.ProberService/Panic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProberServiceServer).Panic(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProberService_PrintLongLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProberServiceServer).PrintLongLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prober.ProberService/PrintLongLine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProberServiceServer).PrintLongLine(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProberService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "prober.ProberService",
	HandlerType: (*ProberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProberStatus",
			Handler:    _ProberService_GetProberStatus_Handler,
		},
		{
			MethodName: "GetFailedProbers",
			Handler:    _ProberService_GetFailedProbers_Handler,
		},
		{
			MethodName: "ServeHTML",
			Handler:    _ProberService_ServeHTML_Handler,
		},
		{
			MethodName: "JsonApiFoo",
			Handler:    _ProberService_JsonApiFoo_Handler,
		},
		{
			MethodName: "Panic",
			Handler:    _ProberService_Panic_Handler,
		},
		{
			MethodName: "PrintLongLine",
			Handler:    _ProberService_PrintLongLine_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamHTTP",
			Handler:       _ProberService_StreamHTTP_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "golang.conradwood.net/apis/prober/prober.proto",
}

func init() { proto.RegisterFile("golang.conradwood.net/apis/prober/prober.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 448 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x53, 0xdf, 0x6f, 0xd3, 0x30,
	0x10, 0x56, 0x28, 0xeb, 0xd8, 0xb1, 0x89, 0xea, 0xa8, 0xb6, 0x28, 0xf0, 0x50, 0x32, 0x1e, 0x2a,
	0x90, 0x3c, 0x14, 0x9e, 0x40, 0xbc, 0x30, 0xb1, 0x5f, 0xa8, 0x43, 0x55, 0x57, 0xf1, 0x8c, 0x9b,
	0x1c, 0xc1, 0x52, 0xeb, 0x0b, 0xb1, 0x0b, 0xec, 0xff, 0xe1, 0x0f, 0x45, 0x89, 0x9d, 0xa9, 0x5d,
	0xa3, 0x8a, 0x27, 0xfb, 0xee, 0xbe, 0xf3, 0xdd, 0xf7, 0x9d, 0x0f, 0x44, 0xce, 0x73, 0xa9, 0x73,
	0x91, 0xb2, 0x2e, 0x65, 0xf6, 0x9b, 0x39, 0x13, 0x9a, 0xec, 0x89, 0x2c, 0x94, 0x39, 0x29, 0x4a,
	0x9e, 0x51, 0xe9, 0x0f, 0x51, 0x94, 0x6c, 0x19, 0xbb, 0xce, 0x8a, 0xb6, 0xe5, 0xa5, 0xbc, 0x58,
	0xb0, 0xf6, 0x87, 0xcb, 0x8b, 0x92, 0x2d, 0xf8, 0x1f, 0x49, 0x5e, 0x94, 0xfc, 0xe7, 0xf6, 0xee,
	0xe2, 0x72, 0xe2, 0x6f, 0xb0, 0x3f, 0xae, 0xab, 0xdd, 0x58, 0x69, 0x97, 0x06, 0x11, 0x1e, 0x7e,
	0x91, 0x0b, 0x0a, 0x83, 0x41, 0x30, 0xdc, 0x9b, 0xd4, 0x77, 0x7c, 0x09, 0x07, 0x2e, 0x7a, 0x4d,
	0xc6, 0xc8, 0x9c, 0xc2, 0x07, 0x75, 0x70, 0xdd, 0x89, 0x87, 0xd0, 0x3d, 0x97, 0x6a, 0x4e, 0x59,
	0xd8, 0x19, 0x04, 0xc3, 0x47, 0x13, 0x6f, 0xc5, 0xa7, 0xd0, 0x5b, 0xad, 0x30, 0x52, 0xc6, 0xa2,
	0x80, 0x5d, 0xe7, 0x33, 0x61, 0x30, 0xe8, 0x0c, 0x1f, 0x27, 0x7d, 0xe1, 0x15, 0x58, 0x85, 0x4e,
	0x1a, 0x50, 0xfc, 0x0a, 0xf0, 0xb3, 0x61, 0xfd, 0xb1, 0x50, 0x53, 0x32, 0x76, 0x42, 0x3f, 0x97,
	0x64, 0x2c, 0xf6, 0x61, 0xe7, 0x4a, 0x17, 0x4b, 0xeb, 0x9b, 0x75, 0x46, 0x7c, 0x0b, 0x4f, 0xd7,
	0xb0, 0xa6, 0x60, 0x6d, 0xa8, 0x1d, 0x8c, 0x09, 0xf4, 0x5d, 0x8d, 0xab, 0x8c, 0xb4, 0x55, 0xdf,
	0x55, 0x2a, 0xad, 0x62, 0xed, 0x19, 0xb6, 0xc6, 0x30, 0x84, 0xdd, 0x46, 0x88, 0x4e, 0x0d, 0x6b,
	0xcc, 0x18, 0xa1, 0x37, 0x5e, 0xce, 0xe6, 0x2a, 0x75, 0x79, 0x9f, 0xa4, 0x95, 0xc9, 0xdf, 0x0e,
	0x1c, 0x78, 0x52, 0x54, 0xfe, 0x52, 0x29, 0xe1, 0x3b, 0x78, 0x72, 0x41, 0x76, 0x4d, 0xf5, 0x7d,
	0xe1, 0x07, 0xf9, 0x95, 0x55, 0x16, 0x85, 0x6d, 0x62, 0xd4, 0xba, 0xbd, 0x87, 0xde, 0x05, 0x59,
	0x27, 0xac, 0xd7, 0xe6, 0xbf, 0x73, 0xcf, 0x00, 0x6e, 0x6c, 0x49, 0x72, 0x71, 0x39, 0x9d, 0x8e,
	0xf1, 0x48, 0xdc, 0x7d, 0x04, 0xe7, 0xf5, 0xa2, 0x46, 0xcf, 0xef, 0x07, 0x2a, 0x16, 0x8d, 0x8a,
	0x6f, 0x02, 0xfc, 0x00, 0x7b, 0x15, 0x11, 0xba, 0x9c, 0x5e, 0x8f, 0xf0, 0x70, 0x05, 0x5c, 0x39,
	0x9b, 0x47, 0x8e, 0x36, 0xfc, 0x7e, 0x0a, 0x67, 0x00, 0x7e, 0x38, 0xe7, 0xcc, 0x18, 0x35, 0xcd,
	0x6e, 0x0e, 0x37, 0x7a, 0xd6, 0x1a, 0xf3, 0xcf, 0x1c, 0xc3, 0xce, 0x58, 0x6a, 0x95, 0xde, 0x23,
	0xbf, 0x66, 0xe1, 0xeb, 0x4a, 0x78, 0xa5, 0xed, 0x88, 0x75, 0x3e, 0x52, 0x9a, 0xb6, 0x81, 0x4f,
	0x8f, 0xe1, 0x85, 0x26, 0xbb, 0xba, 0x3a, 0x7e, 0x99, 0xaa, 0xed, 0xf1, 0xad, 0xcc, 0xba, 0xf5,
	0xce, 0xbc, 0xfd, 0x17, 0x00, 0x00, 0xff, 0xff, 0x0e, 0xad, 0x6a, 0xed, 0xd1, 0x03, 0x00, 0x00,
}
