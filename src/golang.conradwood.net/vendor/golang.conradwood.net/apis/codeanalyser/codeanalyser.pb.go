// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/codeanalyser/codeanalyser.proto
// DO NOT EDIT!

/*
Package codeanalyser is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/codeanalyser/codeanalyser.proto

It has these top-level messages:
	PingRequest
	AnalyseLogRequest
	LogLine
*/
package codeanalyser

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PingRequest struct {
	SequenceNumber uint32 `protobuf:"varint,1,opt,name=SequenceNumber" json:"SequenceNumber,omitempty"`
	Payload        string `protobuf:"bytes,2,opt,name=Payload" json:"Payload,omitempty"`
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PingRequest) GetSequenceNumber() uint32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *PingRequest) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type AnalyseLogRequest struct {
	Repository string     `protobuf:"bytes,1,opt,name=Repository" json:"Repository,omitempty"`
	Namespace  string     `protobuf:"bytes,2,opt,name=Namespace" json:"Namespace,omitempty"`
	Groupname  string     `protobuf:"bytes,3,opt,name=Groupname" json:"Groupname,omitempty"`
	Appname    string     `protobuf:"bytes,4,opt,name=Appname" json:"Appname,omitempty"`
	Build      uint32     `protobuf:"varint,5,opt,name=Build" json:"Build,omitempty"`
	Lines      []*LogLine `protobuf:"bytes,6,rep,name=Lines" json:"Lines,omitempty"`
}

func (m *AnalyseLogRequest) Reset()                    { *m = AnalyseLogRequest{} }
func (m *AnalyseLogRequest) String() string            { return proto.CompactTextString(m) }
func (*AnalyseLogRequest) ProtoMessage()               {}
func (*AnalyseLogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AnalyseLogRequest) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *AnalyseLogRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *AnalyseLogRequest) GetGroupname() string {
	if m != nil {
		return m.Groupname
	}
	return ""
}

func (m *AnalyseLogRequest) GetAppname() string {
	if m != nil {
		return m.Appname
	}
	return ""
}

func (m *AnalyseLogRequest) GetBuild() uint32 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *AnalyseLogRequest) GetLines() []*LogLine {
	if m != nil {
		return m.Lines
	}
	return nil
}

type LogLine struct {
	Host    string `protobuf:"bytes,1,opt,name=Host" json:"Host,omitempty"`
	Occured uint64 `protobuf:"varint,2,opt,name=Occured" json:"Occured,omitempty"`
	Line    string `protobuf:"bytes,3,opt,name=Line" json:"Line,omitempty"`
	Status  string `protobuf:"bytes,4,opt,name=Status" json:"Status,omitempty"`
}

func (m *LogLine) Reset()                    { *m = LogLine{} }
func (m *LogLine) String() string            { return proto.CompactTextString(m) }
func (*LogLine) ProtoMessage()               {}
func (*LogLine) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LogLine) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *LogLine) GetOccured() uint64 {
	if m != nil {
		return m.Occured
	}
	return 0
}

func (m *LogLine) GetLine() string {
	if m != nil {
		return m.Line
	}
	return ""
}

func (m *LogLine) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*PingRequest)(nil), "codeanalyser.PingRequest")
	proto.RegisterType((*AnalyseLogRequest)(nil), "codeanalyser.AnalyseLogRequest")
	proto.RegisterType((*LogLine)(nil), "codeanalyser.LogLine")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CodeAnalyserService service

type CodeAnalyserServiceClient interface {
	// you may send upto 5000 lines of code to this server for analysis
	AnalyseLogs(ctx context.Context, in *AnalyseLogRequest, opts ...grpc.CallOption) (*common.Void, error)
}

type codeAnalyserServiceClient struct {
	cc *grpc.ClientConn
}

func NewCodeAnalyserServiceClient(cc *grpc.ClientConn) CodeAnalyserServiceClient {
	return &codeAnalyserServiceClient{cc}
}

func (c *codeAnalyserServiceClient) AnalyseLogs(ctx context.Context, in *AnalyseLogRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/codeanalyser.CodeAnalyserService/AnalyseLogs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CodeAnalyserService service

type CodeAnalyserServiceServer interface {
	// you may send upto 5000 lines of code to this server for analysis
	AnalyseLogs(context.Context, *AnalyseLogRequest) (*common.Void, error)
}

func RegisterCodeAnalyserServiceServer(s *grpc.Server, srv CodeAnalyserServiceServer) {
	s.RegisterService(&_CodeAnalyserService_serviceDesc, srv)
}

func _CodeAnalyserService_AnalyseLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyseLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeAnalyserServiceServer).AnalyseLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/codeanalyser.CodeAnalyserService/AnalyseLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeAnalyserServiceServer).AnalyseLogs(ctx, req.(*AnalyseLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CodeAnalyserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "codeanalyser.CodeAnalyserService",
	HandlerType: (*CodeAnalyserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnalyseLogs",
			Handler:    _CodeAnalyserService_AnalyseLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/codeanalyser/codeanalyser.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/codeanalyser/codeanalyser.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x52, 0x4d, 0x8b, 0xdb, 0x30,
	0x14, 0xc4, 0xcd, 0x17, 0x79, 0x49, 0x0b, 0x55, 0x3f, 0x30, 0xa1, 0xb4, 0x21, 0x87, 0x36, 0xa5,
	0xe0, 0x40, 0x7a, 0x2b, 0xbd, 0x24, 0x3d, 0x74, 0x0f, 0x21, 0x09, 0x36, 0xec, 0x5d, 0x91, 0x1f,
	0xc6, 0x60, 0xeb, 0x79, 0x25, 0x79, 0x97, 0xfc, 0xc7, 0xfd, 0x51, 0x8b, 0x2c, 0xe5, 0xc3, 0xbb,
	0xb0, 0x27, 0xbf, 0x99, 0x27, 0x8d, 0xc7, 0xe3, 0x81, 0x3f, 0x19, 0x15, 0x5c, 0x66, 0x91, 0x20,
	0xa9, 0x78, 0xfa, 0x40, 0x94, 0x46, 0x12, 0xcd, 0x82, 0x57, 0xb9, 0x5e, 0x08, 0x4a, 0x91, 0x4b,
	0x5e, 0x1c, 0x35, 0xaa, 0x16, 0x88, 0x2a, 0x45, 0x86, 0xd8, 0xf8, 0x9a, 0x9b, 0x44, 0xaf, 0x2a,
	0x95, 0x25, 0x49, 0xff, 0x70, 0xb7, 0x67, 0x3b, 0x18, 0xed, 0x73, 0x99, 0xc5, 0x78, 0x57, 0xa3,
	0x36, 0xec, 0x3b, 0xbc, 0x4b, 0xec, 0x28, 0x05, 0x6e, 0xeb, 0xf2, 0x80, 0x2a, 0x0c, 0xa6, 0xc1,
	0xfc, 0x6d, 0xfc, 0x8c, 0x65, 0x21, 0x0c, 0xf6, 0xfc, 0x58, 0x10, 0x4f, 0xc3, 0x37, 0xd3, 0x60,
	0x3e, 0x8c, 0x4f, 0x70, 0xf6, 0x18, 0xc0, 0xfb, 0x95, 0x73, 0xb3, 0xa1, 0xb3, 0xee, 0x57, 0x80,
	0x18, 0x2b, 0xd2, 0xb9, 0x21, 0x75, 0x6c, 0x34, 0x87, 0xf1, 0x15, 0xc3, 0xbe, 0xc0, 0x70, 0xcb,
	0x4b, 0xd4, 0x15, 0x17, 0xe8, 0x15, 0x2f, 0x84, 0xdd, 0xfe, 0x57, 0x54, 0x57, 0x92, 0x97, 0x18,
	0x76, 0xdc, 0xf6, 0x4c, 0x58, 0x2f, 0xab, 0xca, 0xed, 0xba, 0xce, 0x8b, 0x87, 0xec, 0x23, 0xf4,
	0xd6, 0x75, 0x5e, 0xa4, 0x61, 0xaf, 0xf9, 0x08, 0x07, 0xd8, 0x2f, 0xe8, 0x6d, 0x72, 0x89, 0x3a,
	0xec, 0x4f, 0x3b, 0xf3, 0xd1, 0xf2, 0x53, 0xd4, 0x0a, 0x75, 0x43, 0x99, 0xdd, 0xc6, 0xee, 0xcc,
	0x4c, 0xc0, 0xc0, 0x33, 0x8c, 0x41, 0xf7, 0x86, 0xb4, 0xf1, 0xee, 0x9b, 0xd9, 0xbe, 0x7b, 0x27,
	0x44, 0xad, 0xd0, 0xe5, 0xd0, 0x8d, 0x4f, 0xd0, 0x9e, 0xb6, 0xb7, 0xbc, 0xdd, 0x66, 0x66, 0x9f,
	0xa1, 0x9f, 0x18, 0x6e, 0x6a, 0xed, 0x8d, 0x7a, 0xb4, 0x4c, 0xe0, 0xc3, 0x3f, 0x4a, 0xd1, 0xc7,
	0xa6, 0x12, 0x54, 0xf7, 0xb9, 0x40, 0xf6, 0x17, 0x46, 0x97, 0x24, 0x35, 0xfb, 0xd6, 0x36, 0xfa,
	0x22, 0xe4, 0xc9, 0x38, 0xf2, 0xbf, 0xf6, 0x96, 0xf2, 0x74, 0xfd, 0x13, 0x7e, 0x48, 0x34, 0xd7,
	0x45, 0xf0, 0xd5, 0xb0, 0x5d, 0x68, 0x49, 0x1d, 0xfa, 0x4d, 0x17, 0x7e, 0x3f, 0x05, 0x00, 0x00,
	0xff, 0xff, 0xb8, 0x3b, 0x92, 0x5a, 0x87, 0x02, 0x00, 0x00,
}
