// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/ldapauth/ldapauth.proto
// DO NOT EDIT!

/*
Package ldapauth is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/ldapauth/ldapauth.proto

It has these top-level messages:
*/
package ldapauth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import unixauth "golang.conradwood.net/apis/unixauth"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for LdapAuth service

type LdapAuthClient interface {
	// get SSHKeys for user (it will get them from unixauth server, but cache them too)
	GetSSHKeysForUser(ctx context.Context, in *unixauth.GetSSHKeysRequest, opts ...grpc.CallOption) (*unixauth.AuthorizedKeysFile, error)
}

type ldapAuthClient struct {
	cc *grpc.ClientConn
}

func NewLdapAuthClient(cc *grpc.ClientConn) LdapAuthClient {
	return &ldapAuthClient{cc}
}

func (c *ldapAuthClient) GetSSHKeysForUser(ctx context.Context, in *unixauth.GetSSHKeysRequest, opts ...grpc.CallOption) (*unixauth.AuthorizedKeysFile, error) {
	out := new(unixauth.AuthorizedKeysFile)
	err := grpc.Invoke(ctx, "/ldapauth.LdapAuth/GetSSHKeysForUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LdapAuth service

type LdapAuthServer interface {
	// get SSHKeys for user (it will get them from unixauth server, but cache them too)
	GetSSHKeysForUser(context.Context, *unixauth.GetSSHKeysRequest) (*unixauth.AuthorizedKeysFile, error)
}

func RegisterLdapAuthServer(s *grpc.Server, srv LdapAuthServer) {
	s.RegisterService(&_LdapAuth_serviceDesc, srv)
}

func _LdapAuth_GetSSHKeysForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(unixauth.GetSSHKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LdapAuthServer).GetSSHKeysForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ldapauth.LdapAuth/GetSSHKeysForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LdapAuthServer).GetSSHKeysForUser(ctx, req.(*unixauth.GetSSHKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LdapAuth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ldapauth.LdapAuth",
	HandlerType: (*LdapAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSSHKeysForUser",
			Handler:    _LdapAuth_GetSSHKeysForUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/ldapauth/ldapauth.proto",
}

func init() { proto.RegisterFile("golang.conradwood.net/apis/ldapauth/ldapauth.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x32, 0x4a, 0xcf, 0xcf, 0x49,
	0xcc, 0x4b, 0xd7, 0x4b, 0xce, 0xcf, 0x2b, 0x4a, 0x4c, 0x29, 0xcf, 0xcf, 0x4f, 0xd1, 0xcb, 0x4b,
	0x2d, 0xd1, 0x4f, 0x2c, 0xc8, 0x2c, 0xd6, 0xcf, 0x49, 0x49, 0x2c, 0x48, 0x2c, 0x2d, 0xc9, 0x80,
	0x33, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x38, 0x60, 0x7c, 0x29, 0x7c, 0xba, 0x4b, 0xf3,
	0x32, 0x2b, 0xc0, 0xba, 0x61, 0x0c, 0x88, 0x6e, 0xa3, 0x28, 0x2e, 0x0e, 0x9f, 0x94, 0xc4, 0x02,
	0xc7, 0xd2, 0x92, 0x0c, 0x21, 0x3f, 0x2e, 0x41, 0xf7, 0xd4, 0x92, 0xe0, 0x60, 0x0f, 0xef, 0xd4,
	0xca, 0x62, 0xb7, 0xfc, 0xa2, 0xd0, 0xe2, 0xd4, 0x22, 0x21, 0x69, 0x3d, 0xb8, 0x0e, 0x84, 0x64,
	0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x94, 0x0c, 0x42, 0x12, 0x64, 0x42, 0x7e, 0x51, 0x66,
	0x55, 0x6a, 0x0a, 0x58, 0x77, 0x66, 0x4e, 0xaa, 0x93, 0x1c, 0x97, 0x4c, 0x5e, 0x6a, 0x09, 0xb2,
	0x73, 0x40, 0x4e, 0xd1, 0x83, 0xb9, 0x37, 0x89, 0x0d, 0xec, 0x04, 0x63, 0x40, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x83, 0x48, 0x05, 0x51, 0xf6, 0x00, 0x00, 0x00,
}
