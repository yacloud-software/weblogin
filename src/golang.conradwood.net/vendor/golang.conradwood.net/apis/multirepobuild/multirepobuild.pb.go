// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/multirepobuild/multirepobuild.proto
// DO NOT EDIT!

/*
Package multirepobuild is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/multirepobuild/multirepobuild.proto

It has these top-level messages:
	RepoSpec
	BuildDef
*/
package multirepobuild

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RepoSpec struct {
	Branch         string `protobuf:"bytes,1,opt,name=Branch" json:"Branch,omitempty"`
	CommitID       string `protobuf:"bytes,2,opt,name=CommitID" json:"CommitID,omitempty"`
	RepositoryName string `protobuf:"bytes,3,opt,name=RepositoryName" json:"RepositoryName,omitempty"`
}

func (m *RepoSpec) Reset()                    { *m = RepoSpec{} }
func (m *RepoSpec) String() string            { return proto.CompactTextString(m) }
func (*RepoSpec) ProtoMessage()               {}
func (*RepoSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RepoSpec) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *RepoSpec) GetCommitID() string {
	if m != nil {
		return m.CommitID
	}
	return ""
}

func (m *RepoSpec) GetRepositoryName() string {
	if m != nil {
		return m.RepositoryName
	}
	return ""
}

type BuildDef struct {
	TargetDir string      `protobuf:"bytes,1,opt,name=TargetDir" json:"TargetDir,omitempty"`
	Repos     []*RepoSpec `protobuf:"bytes,2,rep,name=Repos" json:"Repos,omitempty"`
}

func (m *BuildDef) Reset()                    { *m = BuildDef{} }
func (m *BuildDef) String() string            { return proto.CompactTextString(m) }
func (*BuildDef) ProtoMessage()               {}
func (*BuildDef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BuildDef) GetTargetDir() string {
	if m != nil {
		return m.TargetDir
	}
	return ""
}

func (m *BuildDef) GetRepos() []*RepoSpec {
	if m != nil {
		return m.Repos
	}
	return nil
}

func init() {
	proto.RegisterType((*RepoSpec)(nil), "multirepobuild.RepoSpec")
	proto.RegisterType((*BuildDef)(nil), "multirepobuild.BuildDef")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MultiRepoBuild service

type MultiRepoBuildClient interface {
}

type multiRepoBuildClient struct {
	cc *grpc.ClientConn
}

func NewMultiRepoBuildClient(cc *grpc.ClientConn) MultiRepoBuildClient {
	return &multiRepoBuildClient{cc}
}

// Server API for MultiRepoBuild service

type MultiRepoBuildServer interface {
}

func RegisterMultiRepoBuildServer(s *grpc.Server, srv MultiRepoBuildServer) {
	s.RegisterService(&_MultiRepoBuild_serviceDesc, srv)
}

var _MultiRepoBuild_serviceDesc = grpc.ServiceDesc{
	ServiceName: "multirepobuild.MultiRepoBuild",
	HandlerType: (*MultiRepoBuildServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "golang.conradwood.net/apis/multirepobuild/multirepobuild.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/multirepobuild/multirepobuild.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x90, 0x3f, 0x4f, 0xc3, 0x30,
	0x10, 0xc5, 0xd5, 0x56, 0x54, 0xe9, 0x21, 0x45, 0xc8, 0x03, 0xb2, 0x10, 0x43, 0x94, 0x01, 0x75,
	0x72, 0xa5, 0xb2, 0x33, 0x84, 0x2c, 0x0c, 0x30, 0x04, 0x06, 0x56, 0x37, 0xb9, 0xa6, 0x96, 0x12,
	0x9f, 0x75, 0x71, 0x84, 0xf8, 0xf6, 0xc8, 0x26, 0xfc, 0x69, 0xc6, 0xf7, 0xfc, 0x9e, 0x9e, 0xef,
	0x07, 0x0f, 0x2d, 0x75, 0xda, 0xb6, 0xaa, 0x26, 0xcb, 0xba, 0xf9, 0x20, 0x6a, 0x94, 0x45, 0xbf,
	0xd3, 0xce, 0x0c, 0xbb, 0x7e, 0xec, 0xbc, 0x61, 0x74, 0x74, 0x18, 0x4d, 0xd7, 0xcc, 0xa4, 0x72,
	0x4c, 0x9e, 0x44, 0x7a, 0xee, 0xe6, 0x47, 0x48, 0x2a, 0x74, 0xf4, 0xea, 0xb0, 0x16, 0xd7, 0xb0,
	0x2e, 0x58, 0xdb, 0xfa, 0x24, 0x17, 0xd9, 0x62, 0xbb, 0xa9, 0x26, 0x25, 0x6e, 0x20, 0x79, 0xa4,
	0xbe, 0x37, 0xfe, 0xa9, 0x94, 0xcb, 0xf8, 0xf2, 0xab, 0xc5, 0x1d, 0xa4, 0xa1, 0x3f, 0x18, 0x4f,
	0xfc, 0xf9, 0xa2, 0x7b, 0x94, 0xab, 0x98, 0x98, 0xb9, 0xf9, 0x3b, 0x24, 0x45, 0x18, 0x2c, 0xf1,
	0x28, 0x6e, 0x61, 0xf3, 0xa6, 0xb9, 0x45, 0x5f, 0x1a, 0x9e, 0xa6, 0xfe, 0x0c, 0xa1, 0xe0, 0x22,
	0x76, 0xe5, 0x32, 0x5b, 0x6d, 0x2f, 0xf7, 0x52, 0xcd, 0xee, 0xf8, 0xf9, 0x6e, 0xf5, 0x1d, 0xdb,
	0x5f, 0x41, 0xfa, 0x1c, 0x12, 0x41, 0xc5, 0x89, 0x22, 0x87, 0xcc, 0xa2, 0xff, 0x8f, 0x68, 0x82,
	0x16, 0x28, 0xa9, 0x71, 0x38, 0x21, 0x1f, 0xd6, 0x11, 0xc7, 0xfd, 0x57, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xfe, 0xfc, 0xec, 0x08, 0x50, 0x01, 0x00, 0x00,
}
