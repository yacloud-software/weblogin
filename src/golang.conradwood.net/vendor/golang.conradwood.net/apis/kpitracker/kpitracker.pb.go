// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/kpitracker/kpitracker.proto
// DO NOT EDIT!

/*
Package kpitracker is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/kpitracker/kpitracker.proto

It has these top-level messages:
	CreateKPIRequest
	CreateKPIResponse
	KPIValue
	KPIDef
	ListKPIsResponse
	AddMonthlyKPIRequest
	GetMonthKPIValueRequest
	MonthKPIValue
	GetMonthKPIValueResponse
	ListKPIsRequest
	EmptyResponse
	GetKPIValueRequest
	GetKPIRequest
*/
package kpitracker

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateKPIRequest struct {
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Desc string `protobuf:"bytes,2,opt,name=Desc" json:"Desc,omitempty"`
}

func (m *CreateKPIRequest) Reset()                    { *m = CreateKPIRequest{} }
func (m *CreateKPIRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateKPIRequest) ProtoMessage()               {}
func (*CreateKPIRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateKPIRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateKPIRequest) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type CreateKPIResponse struct {
	Kpidef *KPIDef `protobuf:"bytes,1,opt,name=Kpidef" json:"Kpidef,omitempty"`
}

func (m *CreateKPIResponse) Reset()                    { *m = CreateKPIResponse{} }
func (m *CreateKPIResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateKPIResponse) ProtoMessage()               {}
func (*CreateKPIResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateKPIResponse) GetKpidef() *KPIDef {
	if m != nil {
		return m.Kpidef
	}
	return nil
}

// this reflects a single KPI Value
// it can be set or not set.
// any KPI is always in the form of "x of y"
// e.g. 100 of 1000 Requests were good or so
type KPIValue struct {
	IsSet     bool    `protobuf:"varint,1,opt,name=IsSet" json:"IsSet,omitempty"`
	Succeeded float32 `protobuf:"fixed32,2,opt,name=Succeeded" json:"Succeeded,omitempty"`
	Total     float32 `protobuf:"fixed32,3,opt,name=Total" json:"Total,omitempty"`
}

func (m *KPIValue) Reset()                    { *m = KPIValue{} }
func (m *KPIValue) String() string            { return proto.CompactTextString(m) }
func (*KPIValue) ProtoMessage()               {}
func (*KPIValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *KPIValue) GetIsSet() bool {
	if m != nil {
		return m.IsSet
	}
	return false
}

func (m *KPIValue) GetSucceeded() float32 {
	if m != nil {
		return m.Succeeded
	}
	return 0
}

func (m *KPIValue) GetTotal() float32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type KPIDef struct {
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	ID   string `protobuf:"bytes,2,opt,name=ID" json:"ID,omitempty"`
}

func (m *KPIDef) Reset()                    { *m = KPIDef{} }
func (m *KPIDef) String() string            { return proto.CompactTextString(m) }
func (*KPIDef) ProtoMessage()               {}
func (*KPIDef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *KPIDef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KPIDef) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type ListKPIsResponse struct {
	Kpidefs []*KPIDef `protobuf:"bytes,1,rep,name=Kpidefs" json:"Kpidefs,omitempty"`
}

func (m *ListKPIsResponse) Reset()                    { *m = ListKPIsResponse{} }
func (m *ListKPIsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListKPIsResponse) ProtoMessage()               {}
func (*ListKPIsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListKPIsResponse) GetKpidefs() []*KPIDef {
	if m != nil {
		return m.Kpidefs
	}
	return nil
}

type AddMonthlyKPIRequest struct {
	Value *KPIValue `protobuf:"bytes,1,opt,name=Value" json:"Value,omitempty"`
	KpiID string    `protobuf:"bytes,2,opt,name=KpiID" json:"KpiID,omitempty"`
	Year  int32     `protobuf:"varint,3,opt,name=Year" json:"Year,omitempty"`
	Month int32     `protobuf:"varint,4,opt,name=Month" json:"Month,omitempty"`
}

func (m *AddMonthlyKPIRequest) Reset()                    { *m = AddMonthlyKPIRequest{} }
func (m *AddMonthlyKPIRequest) String() string            { return proto.CompactTextString(m) }
func (*AddMonthlyKPIRequest) ProtoMessage()               {}
func (*AddMonthlyKPIRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AddMonthlyKPIRequest) GetValue() *KPIValue {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *AddMonthlyKPIRequest) GetKpiID() string {
	if m != nil {
		return m.KpiID
	}
	return ""
}

func (m *AddMonthlyKPIRequest) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *AddMonthlyKPIRequest) GetMonth() int32 {
	if m != nil {
		return m.Month
	}
	return 0
}

type GetMonthKPIValueRequest struct {
	Year  int32 `protobuf:"varint,1,opt,name=Year" json:"Year,omitempty"`
	Month int32 `protobuf:"varint,2,opt,name=Month" json:"Month,omitempty"`
}

func (m *GetMonthKPIValueRequest) Reset()                    { *m = GetMonthKPIValueRequest{} }
func (m *GetMonthKPIValueRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMonthKPIValueRequest) ProtoMessage()               {}
func (*GetMonthKPIValueRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetMonthKPIValueRequest) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *GetMonthKPIValueRequest) GetMonth() int32 {
	if m != nil {
		return m.Month
	}
	return 0
}

type MonthKPIValue struct {
	KpiDef *KPIDef   `protobuf:"bytes,1,opt,name=KpiDef" json:"KpiDef,omitempty"`
	Value  *KPIValue `protobuf:"bytes,2,opt,name=Value" json:"Value,omitempty"`
	Year   int32     `protobuf:"varint,3,opt,name=Year" json:"Year,omitempty"`
	Month  int32     `protobuf:"varint,4,opt,name=Month" json:"Month,omitempty"`
}

func (m *MonthKPIValue) Reset()                    { *m = MonthKPIValue{} }
func (m *MonthKPIValue) String() string            { return proto.CompactTextString(m) }
func (*MonthKPIValue) ProtoMessage()               {}
func (*MonthKPIValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *MonthKPIValue) GetKpiDef() *KPIDef {
	if m != nil {
		return m.KpiDef
	}
	return nil
}

func (m *MonthKPIValue) GetValue() *KPIValue {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *MonthKPIValue) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *MonthKPIValue) GetMonth() int32 {
	if m != nil {
		return m.Month
	}
	return 0
}

type GetMonthKPIValueResponse struct {
	Values []*MonthKPIValue `protobuf:"bytes,1,rep,name=Values" json:"Values,omitempty"`
}

func (m *GetMonthKPIValueResponse) Reset()                    { *m = GetMonthKPIValueResponse{} }
func (m *GetMonthKPIValueResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMonthKPIValueResponse) ProtoMessage()               {}
func (*GetMonthKPIValueResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetMonthKPIValueResponse) GetValues() []*MonthKPIValue {
	if m != nil {
		return m.Values
	}
	return nil
}

type ListKPIsRequest struct {
}

func (m *ListKPIsRequest) Reset()                    { *m = ListKPIsRequest{} }
func (m *ListKPIsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListKPIsRequest) ProtoMessage()               {}
func (*ListKPIsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type EmptyResponse struct {
}

func (m *EmptyResponse) Reset()                    { *m = EmptyResponse{} }
func (m *EmptyResponse) String() string            { return proto.CompactTextString(m) }
func (*EmptyResponse) ProtoMessage()               {}
func (*EmptyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type GetKPIValueRequest struct {
	KpiID string `protobuf:"bytes,1,opt,name=KpiID" json:"KpiID,omitempty"`
	Year  int32  `protobuf:"varint,2,opt,name=Year" json:"Year,omitempty"`
	Month int32  `protobuf:"varint,3,opt,name=Month" json:"Month,omitempty"`
}

func (m *GetKPIValueRequest) Reset()                    { *m = GetKPIValueRequest{} }
func (m *GetKPIValueRequest) String() string            { return proto.CompactTextString(m) }
func (*GetKPIValueRequest) ProtoMessage()               {}
func (*GetKPIValueRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetKPIValueRequest) GetKpiID() string {
	if m != nil {
		return m.KpiID
	}
	return ""
}

func (m *GetKPIValueRequest) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *GetKPIValueRequest) GetMonth() int32 {
	if m != nil {
		return m.Month
	}
	return 0
}

type GetKPIRequest struct {
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *GetKPIRequest) Reset()                    { *m = GetKPIRequest{} }
func (m *GetKPIRequest) String() string            { return proto.CompactTextString(m) }
func (*GetKPIRequest) ProtoMessage()               {}
func (*GetKPIRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetKPIRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateKPIRequest)(nil), "kpitracker.CreateKPIRequest")
	proto.RegisterType((*CreateKPIResponse)(nil), "kpitracker.CreateKPIResponse")
	proto.RegisterType((*KPIValue)(nil), "kpitracker.KPIValue")
	proto.RegisterType((*KPIDef)(nil), "kpitracker.KPIDef")
	proto.RegisterType((*ListKPIsResponse)(nil), "kpitracker.ListKPIsResponse")
	proto.RegisterType((*AddMonthlyKPIRequest)(nil), "kpitracker.AddMonthlyKPIRequest")
	proto.RegisterType((*GetMonthKPIValueRequest)(nil), "kpitracker.GetMonthKPIValueRequest")
	proto.RegisterType((*MonthKPIValue)(nil), "kpitracker.MonthKPIValue")
	proto.RegisterType((*GetMonthKPIValueResponse)(nil), "kpitracker.GetMonthKPIValueResponse")
	proto.RegisterType((*ListKPIsRequest)(nil), "kpitracker.ListKPIsRequest")
	proto.RegisterType((*EmptyResponse)(nil), "kpitracker.EmptyResponse")
	proto.RegisterType((*GetKPIValueRequest)(nil), "kpitracker.GetKPIValueRequest")
	proto.RegisterType((*GetKPIRequest)(nil), "kpitracker.GetKPIRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for KPITracker service

type KPITrackerClient interface {
	ListKPIs(ctx context.Context, in *ListKPIsRequest, opts ...grpc.CallOption) (*ListKPIsResponse, error)
	CreateKPI(ctx context.Context, in *CreateKPIRequest, opts ...grpc.CallOption) (*CreateKPIResponse, error)
	GetKPI(ctx context.Context, in *GetKPIRequest, opts ...grpc.CallOption) (*KPIDef, error)
	SetMonthlyKPI(ctx context.Context, in *AddMonthlyKPIRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	AddToMonthlyKPI(ctx context.Context, in *AddMonthlyKPIRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetAllMonthKPIValues(ctx context.Context, in *GetMonthKPIValueRequest, opts ...grpc.CallOption) (*GetMonthKPIValueResponse, error)
	GetMonthlyKPIValue(ctx context.Context, in *GetKPIValueRequest, opts ...grpc.CallOption) (*MonthKPIValue, error)
}

type kPITrackerClient struct {
	cc *grpc.ClientConn
}

func NewKPITrackerClient(cc *grpc.ClientConn) KPITrackerClient {
	return &kPITrackerClient{cc}
}

func (c *kPITrackerClient) ListKPIs(ctx context.Context, in *ListKPIsRequest, opts ...grpc.CallOption) (*ListKPIsResponse, error) {
	out := new(ListKPIsResponse)
	err := grpc.Invoke(ctx, "/kpitracker.KPITracker/ListKPIs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kPITrackerClient) CreateKPI(ctx context.Context, in *CreateKPIRequest, opts ...grpc.CallOption) (*CreateKPIResponse, error) {
	out := new(CreateKPIResponse)
	err := grpc.Invoke(ctx, "/kpitracker.KPITracker/CreateKPI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kPITrackerClient) GetKPI(ctx context.Context, in *GetKPIRequest, opts ...grpc.CallOption) (*KPIDef, error) {
	out := new(KPIDef)
	err := grpc.Invoke(ctx, "/kpitracker.KPITracker/GetKPI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kPITrackerClient) SetMonthlyKPI(ctx context.Context, in *AddMonthlyKPIRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/kpitracker.KPITracker/SetMonthlyKPI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kPITrackerClient) AddToMonthlyKPI(ctx context.Context, in *AddMonthlyKPIRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/kpitracker.KPITracker/AddToMonthlyKPI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kPITrackerClient) GetAllMonthKPIValues(ctx context.Context, in *GetMonthKPIValueRequest, opts ...grpc.CallOption) (*GetMonthKPIValueResponse, error) {
	out := new(GetMonthKPIValueResponse)
	err := grpc.Invoke(ctx, "/kpitracker.KPITracker/GetAllMonthKPIValues", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kPITrackerClient) GetMonthlyKPIValue(ctx context.Context, in *GetKPIValueRequest, opts ...grpc.CallOption) (*MonthKPIValue, error) {
	out := new(MonthKPIValue)
	err := grpc.Invoke(ctx, "/kpitracker.KPITracker/GetMonthlyKPIValue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KPITracker service

type KPITrackerServer interface {
	ListKPIs(context.Context, *ListKPIsRequest) (*ListKPIsResponse, error)
	CreateKPI(context.Context, *CreateKPIRequest) (*CreateKPIResponse, error)
	GetKPI(context.Context, *GetKPIRequest) (*KPIDef, error)
	SetMonthlyKPI(context.Context, *AddMonthlyKPIRequest) (*EmptyResponse, error)
	AddToMonthlyKPI(context.Context, *AddMonthlyKPIRequest) (*EmptyResponse, error)
	GetAllMonthKPIValues(context.Context, *GetMonthKPIValueRequest) (*GetMonthKPIValueResponse, error)
	GetMonthlyKPIValue(context.Context, *GetKPIValueRequest) (*MonthKPIValue, error)
}

func RegisterKPITrackerServer(s *grpc.Server, srv KPITrackerServer) {
	s.RegisterService(&_KPITracker_serviceDesc, srv)
}

func _KPITracker_ListKPIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKPIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KPITrackerServer).ListKPIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kpitracker.KPITracker/ListKPIs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KPITrackerServer).ListKPIs(ctx, req.(*ListKPIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KPITracker_CreateKPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KPITrackerServer).CreateKPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kpitracker.KPITracker/CreateKPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KPITrackerServer).CreateKPI(ctx, req.(*CreateKPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KPITracker_GetKPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KPITrackerServer).GetKPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kpitracker.KPITracker/GetKPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KPITrackerServer).GetKPI(ctx, req.(*GetKPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KPITracker_SetMonthlyKPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMonthlyKPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KPITrackerServer).SetMonthlyKPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kpitracker.KPITracker/SetMonthlyKPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KPITrackerServer).SetMonthlyKPI(ctx, req.(*AddMonthlyKPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KPITracker_AddToMonthlyKPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMonthlyKPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KPITrackerServer).AddToMonthlyKPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kpitracker.KPITracker/AddToMonthlyKPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KPITrackerServer).AddToMonthlyKPI(ctx, req.(*AddMonthlyKPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KPITracker_GetAllMonthKPIValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonthKPIValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KPITrackerServer).GetAllMonthKPIValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kpitracker.KPITracker/GetAllMonthKPIValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KPITrackerServer).GetAllMonthKPIValues(ctx, req.(*GetMonthKPIValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KPITracker_GetMonthlyKPIValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKPIValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KPITrackerServer).GetMonthlyKPIValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kpitracker.KPITracker/GetMonthlyKPIValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KPITrackerServer).GetMonthlyKPIValue(ctx, req.(*GetKPIValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KPITracker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kpitracker.KPITracker",
	HandlerType: (*KPITrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListKPIs",
			Handler:    _KPITracker_ListKPIs_Handler,
		},
		{
			MethodName: "CreateKPI",
			Handler:    _KPITracker_CreateKPI_Handler,
		},
		{
			MethodName: "GetKPI",
			Handler:    _KPITracker_GetKPI_Handler,
		},
		{
			MethodName: "SetMonthlyKPI",
			Handler:    _KPITracker_SetMonthlyKPI_Handler,
		},
		{
			MethodName: "AddToMonthlyKPI",
			Handler:    _KPITracker_AddToMonthlyKPI_Handler,
		},
		{
			MethodName: "GetAllMonthKPIValues",
			Handler:    _KPITracker_GetAllMonthKPIValues_Handler,
		},
		{
			MethodName: "GetMonthlyKPIValue",
			Handler:    _KPITracker_GetMonthlyKPIValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/kpitracker/kpitracker.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/kpitracker/kpitracker.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 580 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x55, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x96, 0x9d, 0x1f, 0x92, 0x41, 0x21, 0xed, 0x2a, 0x12, 0x26, 0x14, 0x88, 0x0c, 0x08, 0x54,
	0x55, 0xa9, 0x28, 0x12, 0x48, 0x5c, 0x20, 0x34, 0x55, 0xb0, 0xdc, 0x96, 0xc8, 0x89, 0x90, 0x38,
	0x9a, 0x78, 0x5a, 0xa2, 0xba, 0x5e, 0xe3, 0xdd, 0x08, 0xf5, 0xca, 0x1b, 0xf0, 0x16, 0x3c, 0x26,
	0xf2, 0xee, 0xda, 0x59, 0xbb, 0x0e, 0xe5, 0xd0, 0xdb, 0xee, 0xec, 0xcc, 0x37, 0xf3, 0xcd, 0x37,
	0x63, 0xc3, 0x9b, 0x73, 0x1a, 0xfa, 0xd1, 0xf9, 0x70, 0x41, 0xa3, 0xc4, 0x0f, 0x7e, 0x52, 0x1a,
	0x0c, 0x23, 0xe4, 0xfb, 0x7e, 0xbc, 0x64, 0xfb, 0x17, 0xf1, 0x92, 0x27, 0xfe, 0xe2, 0x02, 0x13,
	0xed, 0x38, 0x8c, 0x13, 0xca, 0x29, 0x81, 0xb5, 0xc5, 0x7e, 0x07, 0x5b, 0x87, 0x09, 0xfa, 0x1c,
	0xdd, 0xa9, 0xe3, 0xe1, 0x8f, 0x15, 0x32, 0x4e, 0x08, 0xd4, 0x4f, 0xfd, 0x4b, 0xb4, 0x8c, 0x81,
	0xf1, 0xb2, 0xed, 0x89, 0x73, 0x6a, 0x1b, 0x23, 0x5b, 0x58, 0xa6, 0xb4, 0xa5, 0x67, 0xfb, 0x3d,
	0x6c, 0x6b, 0xb1, 0x2c, 0xa6, 0x11, 0x43, 0xb2, 0x0b, 0x4d, 0x37, 0x5e, 0x06, 0x78, 0x26, 0xc2,
	0xef, 0x1e, 0x90, 0xa1, 0x96, 0xdf, 0x9d, 0x3a, 0x63, 0x3c, 0xf3, 0x94, 0x87, 0x3d, 0x87, 0x96,
	0x3b, 0x75, 0xbe, 0xf8, 0xe1, 0x0a, 0x49, 0x0f, 0x1a, 0x0e, 0x9b, 0x21, 0x17, 0x61, 0x2d, 0x4f,
	0x5e, 0xc8, 0x0e, 0xb4, 0x67, 0xab, 0xc5, 0x02, 0x31, 0xc0, 0x40, 0xe4, 0x36, 0xbd, 0xb5, 0x21,
	0x8d, 0x99, 0x53, 0xee, 0x87, 0x56, 0x4d, 0xbc, 0xc8, 0x8b, 0xbd, 0x07, 0x4d, 0x99, 0xa7, 0x92,
	0xc8, 0x3d, 0x30, 0x9d, 0xb1, 0xa2, 0x61, 0x3a, 0x63, 0xfb, 0x03, 0x6c, 0x1d, 0x2f, 0x19, 0x77,
	0xa7, 0x0e, 0xcb, 0x39, 0xec, 0xc1, 0x1d, 0x59, 0x21, 0xb3, 0x8c, 0x41, 0x6d, 0x03, 0x89, 0xcc,
	0xc5, 0xfe, 0x65, 0x40, 0x6f, 0x14, 0x04, 0x27, 0x34, 0xe2, 0xdf, 0xc3, 0x2b, 0xad, 0x8f, 0xbb,
	0xd0, 0x10, 0xdc, 0x54, 0x27, 0x7a, 0x25, 0x10, 0xf1, 0xe6, 0x35, 0x72, 0xfa, 0x6e, 0xbc, 0xcc,
	0x2b, 0x93, 0x97, 0x94, 0xc0, 0x57, 0xf4, 0x13, 0xc1, 0xaf, 0xe1, 0x89, 0x73, 0xea, 0x29, 0x52,
	0x59, 0x75, 0x61, 0x94, 0x17, 0xfb, 0x10, 0xee, 0x4f, 0x90, 0x8b, 0x73, 0x0e, 0xbd, 0x96, 0x53,
	0x80, 0x18, 0x55, 0x20, 0xa6, 0x0e, 0xf2, 0xdb, 0x80, 0x4e, 0x01, 0x42, 0xa9, 0x39, 0xbe, 0x51,
	0xcd, 0xb4, 0xdb, 0x39, 0x5d, 0xf3, 0x66, 0xba, 0xff, 0x4f, 0xec, 0x04, 0xac, 0xeb, 0xc4, 0x94,
	0x4e, 0xaf, 0xa0, 0x29, 0x0c, 0x99, 0x4c, 0x0f, 0xf4, 0x94, 0xc5, 0x10, 0xe5, 0x68, 0x6f, 0x43,
	0x77, 0x2d, 0xb7, 0xe8, 0x8f, 0xdd, 0x85, 0xce, 0xd1, 0x65, 0xcc, 0xaf, 0x32, 0x58, 0x7b, 0x0e,
	0x64, 0x82, 0xbc, 0xdc, 0xc6, 0x5c, 0x21, 0xa3, 0x4a, 0x21, 0xb3, 0x8a, 0x48, 0x4d, 0x27, 0xf2,
	0x04, 0x3a, 0x12, 0x35, 0x03, 0x94, 0x93, 0x68, 0x64, 0x93, 0x78, 0xf0, 0xa7, 0x0e, 0xe0, 0x4e,
	0x9d, 0xb9, 0xac, 0x9f, 0x1c, 0x41, 0x2b, 0xab, 0x94, 0x3c, 0xd4, 0x89, 0x95, 0xea, 0xef, 0xef,
	0x54, 0x3f, 0xaa, 0x1e, 0x7d, 0x82, 0x76, 0xbe, 0xa4, 0xa4, 0xe0, 0x5a, 0xde, 0xfb, 0xfe, 0xa3,
	0x0d, 0xaf, 0x0a, 0xe9, 0x2d, 0x34, 0x25, 0x01, 0x52, 0xe8, 0x73, 0x81, 0x54, 0xbf, 0x62, 0x40,
	0xc8, 0x31, 0x74, 0x66, 0x4a, 0x42, 0xb1, 0x1f, 0x64, 0xa0, 0x3b, 0x55, 0xad, 0x4e, 0xbf, 0x90,
	0xa1, 0xa0, 0x0e, 0x39, 0x85, 0xee, 0x28, 0x08, 0xe6, 0xf4, 0xb6, 0xf0, 0x7c, 0xe8, 0x4d, 0x90,
	0x8f, 0xc2, 0xb0, 0x30, 0x30, 0x8c, 0x3c, 0x2d, 0x91, 0xac, 0xda, 0xad, 0xfe, 0xb3, 0x7f, 0x3b,
	0xa9, 0x14, 0x9f, 0xc5, 0x40, 0xad, 0xab, 0x92, 0x3b, 0xf0, 0xf8, 0x7a, 0x17, 0x0b, 0xd8, 0x9b,
	0xa7, 0xf9, 0xe3, 0x0b, 0x78, 0x1e, 0x21, 0xd7, 0x3f, 0xfc, 0xea, 0x57, 0x90, 0x7e, 0xfb, 0xb5,
	0xb0, 0x6f, 0x4d, 0xf1, 0xc5, 0x7f, 0xfd, 0x37, 0x00, 0x00, 0xff, 0xff, 0x06, 0x67, 0xdd, 0x9c,
	0x2b, 0x06, 0x00, 0x00,
}
