// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/buildrepo/buildrepo.proto
// DO NOT EDIT!

/*
Package buildrepo is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/buildrepo/buildrepo.proto

It has these top-level messages:
	CreateBuildRequest
	CreateBuildResponse
	UploadTokenRequest
	UploadTokenResponse
	UploadDoneRequest
	UploadDoneResponse
	RepoEntry
	ListReposRequest
	ListReposResponse
	ListBranchesRequest
	ListBranchesResponse
	ListVersionsRequest
	ListVersionsResponse
	ListFilesRequest
	ListFilesResponse
	GetLatestVersionRequest
	GetLatestVersionResponse
	BuildMeta
	GetBlockRequest
	GetBlockResponse
	File
	Tool
	ListToolsResponse
	GetFileRequest
	FileBlock
	GetMetaRequest
	GetMetaResponse
	RepoDef
	BuildNumber
	BuildDef
	BuildInfo
	FilePattern
	FileList
*/
package buildrepo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateBuildRequest struct {
	// deprecated - use repo id instead
	Repository   string `protobuf:"bytes,1,opt,name=Repository" json:"Repository,omitempty"`
	CommitID     string `protobuf:"bytes,2,opt,name=CommitID" json:"CommitID,omitempty"`
	Branch       string `protobuf:"bytes,3,opt,name=Branch" json:"Branch,omitempty"`
	BuildID      uint64 `protobuf:"varint,4,opt,name=BuildID" json:"BuildID,omitempty"`
	CommitMSG    string `protobuf:"bytes,5,opt,name=CommitMSG" json:"CommitMSG,omitempty"`
	UserEmail    string `protobuf:"bytes,6,opt,name=UserEmail" json:"UserEmail,omitempty"`
	RepositoryID uint64 `protobuf:"varint,7,opt,name=RepositoryID" json:"RepositoryID,omitempty"`
	// the artefact name - under which path to save it
	ArtefactName string `protobuf:"bytes,8,opt,name=ArtefactName" json:"ArtefactName,omitempty"`
}

func (m *CreateBuildRequest) Reset()                    { *m = CreateBuildRequest{} }
func (m *CreateBuildRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateBuildRequest) ProtoMessage()               {}
func (*CreateBuildRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateBuildRequest) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *CreateBuildRequest) GetCommitID() string {
	if m != nil {
		return m.CommitID
	}
	return ""
}

func (m *CreateBuildRequest) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *CreateBuildRequest) GetBuildID() uint64 {
	if m != nil {
		return m.BuildID
	}
	return 0
}

func (m *CreateBuildRequest) GetCommitMSG() string {
	if m != nil {
		return m.CommitMSG
	}
	return ""
}

func (m *CreateBuildRequest) GetUserEmail() string {
	if m != nil {
		return m.UserEmail
	}
	return ""
}

func (m *CreateBuildRequest) GetRepositoryID() uint64 {
	if m != nil {
		return m.RepositoryID
	}
	return 0
}

func (m *CreateBuildRequest) GetArtefactName() string {
	if m != nil {
		return m.ArtefactName
	}
	return ""
}

type CreateBuildResponse struct {
	BuildStoreid string `protobuf:"bytes,1,opt,name=BuildStoreid" json:"BuildStoreid,omitempty"`
}

func (m *CreateBuildResponse) Reset()                    { *m = CreateBuildResponse{} }
func (m *CreateBuildResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateBuildResponse) ProtoMessage()               {}
func (*CreateBuildResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateBuildResponse) GetBuildStoreid() string {
	if m != nil {
		return m.BuildStoreid
	}
	return ""
}

type UploadTokenRequest struct {
	BuildStoreid string `protobuf:"bytes,1,opt,name=BuildStoreid" json:"BuildStoreid,omitempty"`
	Filename     string `protobuf:"bytes,2,opt,name=Filename" json:"Filename,omitempty"`
	UserEmail    string `protobuf:"bytes,3,opt,name=UserEmail" json:"UserEmail,omitempty"`
}

func (m *UploadTokenRequest) Reset()                    { *m = UploadTokenRequest{} }
func (m *UploadTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*UploadTokenRequest) ProtoMessage()               {}
func (*UploadTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UploadTokenRequest) GetBuildStoreid() string {
	if m != nil {
		return m.BuildStoreid
	}
	return ""
}

func (m *UploadTokenRequest) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *UploadTokenRequest) GetUserEmail() string {
	if m != nil {
		return m.UserEmail
	}
	return ""
}

type UploadTokenResponse struct {
	Token string `protobuf:"bytes,1,opt,name=Token" json:"Token,omitempty"`
}

func (m *UploadTokenResponse) Reset()                    { *m = UploadTokenResponse{} }
func (m *UploadTokenResponse) String() string            { return proto.CompactTextString(m) }
func (*UploadTokenResponse) ProtoMessage()               {}
func (*UploadTokenResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UploadTokenResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type UploadDoneRequest struct {
	BuildStoreid string `protobuf:"bytes,1,opt,name=BuildStoreid" json:"BuildStoreid,omitempty"`
}

func (m *UploadDoneRequest) Reset()                    { *m = UploadDoneRequest{} }
func (m *UploadDoneRequest) String() string            { return proto.CompactTextString(m) }
func (*UploadDoneRequest) ProtoMessage()               {}
func (*UploadDoneRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UploadDoneRequest) GetBuildStoreid() string {
	if m != nil {
		return m.BuildStoreid
	}
	return ""
}

type UploadDoneResponse struct {
	Closed    bool   `protobuf:"varint,1,opt,name=Closed" json:"Closed,omitempty"`
	Uploading uint32 `protobuf:"varint,2,opt,name=Uploading" json:"Uploading,omitempty"`
}

func (m *UploadDoneResponse) Reset()                    { *m = UploadDoneResponse{} }
func (m *UploadDoneResponse) String() string            { return proto.CompactTextString(m) }
func (*UploadDoneResponse) ProtoMessage()               {}
func (*UploadDoneResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UploadDoneResponse) GetClosed() bool {
	if m != nil {
		return m.Closed
	}
	return false
}

func (m *UploadDoneResponse) GetUploading() uint32 {
	if m != nil {
		return m.Uploading
	}
	return 0
}

type RepoEntry struct {
	Name        string                    `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Type        int32                     `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty"`
	Dir         string                    `protobuf:"bytes,3,opt,name=Dir" json:"Dir,omitempty"`
	Domain      string                    `protobuf:"bytes,4,opt,name=Domain" json:"Domain,omitempty"`
	LatestBuild *GetLatestVersionResponse `protobuf:"bytes,5,opt,name=LatestBuild" json:"LatestBuild,omitempty"`
}

func (m *RepoEntry) Reset()                    { *m = RepoEntry{} }
func (m *RepoEntry) String() string            { return proto.CompactTextString(m) }
func (*RepoEntry) ProtoMessage()               {}
func (*RepoEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RepoEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RepoEntry) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *RepoEntry) GetDir() string {
	if m != nil {
		return m.Dir
	}
	return ""
}

func (m *RepoEntry) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *RepoEntry) GetLatestBuild() *GetLatestVersionResponse {
	if m != nil {
		return m.LatestBuild
	}
	return nil
}

type ListReposRequest struct {
}

func (m *ListReposRequest) Reset()                    { *m = ListReposRequest{} }
func (m *ListReposRequest) String() string            { return proto.CompactTextString(m) }
func (*ListReposRequest) ProtoMessage()               {}
func (*ListReposRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type ListReposResponse struct {
	Entries []*RepoEntry `protobuf:"bytes,1,rep,name=Entries" json:"Entries,omitempty"`
}

func (m *ListReposResponse) Reset()                    { *m = ListReposResponse{} }
func (m *ListReposResponse) String() string            { return proto.CompactTextString(m) }
func (*ListReposResponse) ProtoMessage()               {}
func (*ListReposResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ListReposResponse) GetEntries() []*RepoEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type ListBranchesRequest struct {
	Repository string `protobuf:"bytes,1,opt,name=Repository" json:"Repository,omitempty"`
}

func (m *ListBranchesRequest) Reset()                    { *m = ListBranchesRequest{} }
func (m *ListBranchesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListBranchesRequest) ProtoMessage()               {}
func (*ListBranchesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ListBranchesRequest) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

type ListBranchesResponse struct {
	Entries []*RepoEntry `protobuf:"bytes,1,rep,name=Entries" json:"Entries,omitempty"`
}

func (m *ListBranchesResponse) Reset()                    { *m = ListBranchesResponse{} }
func (m *ListBranchesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListBranchesResponse) ProtoMessage()               {}
func (*ListBranchesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ListBranchesResponse) GetEntries() []*RepoEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type ListVersionsRequest struct {
	Repository string `protobuf:"bytes,1,opt,name=Repository" json:"Repository,omitempty"`
	Branch     string `protobuf:"bytes,2,opt,name=Branch" json:"Branch,omitempty"`
}

func (m *ListVersionsRequest) Reset()                    { *m = ListVersionsRequest{} }
func (m *ListVersionsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListVersionsRequest) ProtoMessage()               {}
func (*ListVersionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ListVersionsRequest) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *ListVersionsRequest) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

type ListVersionsResponse struct {
	Entries []*RepoEntry `protobuf:"bytes,1,rep,name=Entries" json:"Entries,omitempty"`
}

func (m *ListVersionsResponse) Reset()                    { *m = ListVersionsResponse{} }
func (m *ListVersionsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListVersionsResponse) ProtoMessage()               {}
func (*ListVersionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ListVersionsResponse) GetEntries() []*RepoEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type ListFilesRequest struct {
	Repository string `protobuf:"bytes,1,opt,name=Repository" json:"Repository,omitempty"`
	Branch     string `protobuf:"bytes,2,opt,name=Branch" json:"Branch,omitempty"`
	BuildID    uint64 `protobuf:"varint,3,opt,name=BuildID" json:"BuildID,omitempty"`
	Dir        string `protobuf:"bytes,4,opt,name=Dir" json:"Dir,omitempty"`
	Recursive  bool   `protobuf:"varint,5,opt,name=Recursive" json:"Recursive,omitempty"`
}

func (m *ListFilesRequest) Reset()                    { *m = ListFilesRequest{} }
func (m *ListFilesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListFilesRequest) ProtoMessage()               {}
func (*ListFilesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ListFilesRequest) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *ListFilesRequest) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *ListFilesRequest) GetBuildID() uint64 {
	if m != nil {
		return m.BuildID
	}
	return 0
}

func (m *ListFilesRequest) GetDir() string {
	if m != nil {
		return m.Dir
	}
	return ""
}

func (m *ListFilesRequest) GetRecursive() bool {
	if m != nil {
		return m.Recursive
	}
	return false
}

type ListFilesResponse struct {
	Entries []*RepoEntry `protobuf:"bytes,1,rep,name=Entries" json:"Entries,omitempty"`
}

func (m *ListFilesResponse) Reset()                    { *m = ListFilesResponse{} }
func (m *ListFilesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListFilesResponse) ProtoMessage()               {}
func (*ListFilesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ListFilesResponse) GetEntries() []*RepoEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type GetLatestVersionRequest struct {
	Repository string `protobuf:"bytes,1,opt,name=Repository" json:"Repository,omitempty"`
	Branch     string `protobuf:"bytes,2,opt,name=Branch" json:"Branch,omitempty"`
}

func (m *GetLatestVersionRequest) Reset()                    { *m = GetLatestVersionRequest{} }
func (m *GetLatestVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLatestVersionRequest) ProtoMessage()               {}
func (*GetLatestVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GetLatestVersionRequest) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *GetLatestVersionRequest) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

type GetLatestVersionResponse struct {
	BuildID   uint64     `protobuf:"varint,1,opt,name=BuildID" json:"BuildID,omitempty"`
	BuildMeta *BuildMeta `protobuf:"bytes,2,opt,name=BuildMeta" json:"BuildMeta,omitempty"`
}

func (m *GetLatestVersionResponse) Reset()                    { *m = GetLatestVersionResponse{} }
func (m *GetLatestVersionResponse) String() string            { return proto.CompactTextString(m) }
func (*GetLatestVersionResponse) ProtoMessage()               {}
func (*GetLatestVersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GetLatestVersionResponse) GetBuildID() uint64 {
	if m != nil {
		return m.BuildID
	}
	return 0
}

func (m *GetLatestVersionResponse) GetBuildMeta() *BuildMeta {
	if m != nil {
		return m.BuildMeta
	}
	return nil
}

// metadata about this repo
type BuildMeta struct {
	RepositoryID uint64 `protobuf:"varint,1,opt,name=RepositoryID" json:"RepositoryID,omitempty"`
	CommitID     string `protobuf:"bytes,2,opt,name=CommitID" json:"CommitID,omitempty"`
	Branch       string `protobuf:"bytes,3,opt,name=Branch" json:"Branch,omitempty"`
}

func (m *BuildMeta) Reset()                    { *m = BuildMeta{} }
func (m *BuildMeta) String() string            { return proto.CompactTextString(m) }
func (*BuildMeta) ProtoMessage()               {}
func (*BuildMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *BuildMeta) GetRepositoryID() uint64 {
	if m != nil {
		return m.RepositoryID
	}
	return 0
}

func (m *BuildMeta) GetCommitID() string {
	if m != nil {
		return m.CommitID
	}
	return ""
}

func (m *BuildMeta) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

type GetBlockRequest struct {
	File   *File  `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	Offset uint64 `protobuf:"varint,2,opt,name=Offset" json:"Offset,omitempty"`
	Size   uint32 `protobuf:"varint,3,opt,name=Size" json:"Size,omitempty"`
}

func (m *GetBlockRequest) Reset()                    { *m = GetBlockRequest{} }
func (m *GetBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBlockRequest) ProtoMessage()               {}
func (*GetBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *GetBlockRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *GetBlockRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetBlockRequest) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type GetBlockResponse struct {
	File   *File  `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	Offset uint64 `protobuf:"varint,2,opt,name=Offset" json:"Offset,omitempty"`
	Size   uint32 `protobuf:"varint,3,opt,name=Size" json:"Size,omitempty"`
	Data   []byte `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *GetBlockResponse) Reset()                    { *m = GetBlockResponse{} }
func (m *GetBlockResponse) String() string            { return proto.CompactTextString(m) }
func (*GetBlockResponse) ProtoMessage()               {}
func (*GetBlockResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *GetBlockResponse) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *GetBlockResponse) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetBlockResponse) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *GetBlockResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// identify a unique file
type File struct {
	Repository string `protobuf:"bytes,1,opt,name=Repository" json:"Repository,omitempty"`
	Branch     string `protobuf:"bytes,2,opt,name=Branch" json:"Branch,omitempty"`
	BuildID    uint64 `protobuf:"varint,3,opt,name=BuildID" json:"BuildID,omitempty"`
	Filename   string `protobuf:"bytes,4,opt,name=Filename" json:"Filename,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *File) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *File) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *File) GetBuildID() uint64 {
	if m != nil {
		return m.BuildID
	}
	return 0
}

func (m *File) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type Tool struct {
	Repository string `protobuf:"bytes,1,opt,name=Repository" json:"Repository,omitempty"`
	Filename   string `protobuf:"bytes,2,opt,name=Filename" json:"Filename,omitempty"`
}

func (m *Tool) Reset()                    { *m = Tool{} }
func (m *Tool) String() string            { return proto.CompactTextString(m) }
func (*Tool) ProtoMessage()               {}
func (*Tool) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *Tool) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *Tool) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type ListToolsResponse struct {
	Tools []*Tool `protobuf:"bytes,1,rep,name=Tools" json:"Tools,omitempty"`
}

func (m *ListToolsResponse) Reset()                    { *m = ListToolsResponse{} }
func (m *ListToolsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListToolsResponse) ProtoMessage()               {}
func (*ListToolsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ListToolsResponse) GetTools() []*Tool {
	if m != nil {
		return m.Tools
	}
	return nil
}

type GetFileRequest struct {
	File      *File  `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	Blocksize uint32 `protobuf:"varint,2,opt,name=Blocksize" json:"Blocksize,omitempty"`
}

func (m *GetFileRequest) Reset()                    { *m = GetFileRequest{} }
func (m *GetFileRequest) String() string            { return proto.CompactTextString(m) }
func (*GetFileRequest) ProtoMessage()               {}
func (*GetFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *GetFileRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *GetFileRequest) GetBlocksize() uint32 {
	if m != nil {
		return m.Blocksize
	}
	return 0
}

// response to above request : chunk of bytes, to be streamed
type FileBlock struct {
	Size        uint64 `protobuf:"varint,1,opt,name=Size" json:"Size,omitempty"`
	Data        []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	UploadToken string `protobuf:"bytes,3,opt,name=UploadToken" json:"UploadToken,omitempty"`
}

func (m *FileBlock) Reset()                    { *m = FileBlock{} }
func (m *FileBlock) String() string            { return proto.CompactTextString(m) }
func (*FileBlock) ProtoMessage()               {}
func (*FileBlock) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *FileBlock) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *FileBlock) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FileBlock) GetUploadToken() string {
	if m != nil {
		return m.UploadToken
	}
	return ""
}

type GetMetaRequest struct {
	File *File `protobuf:"bytes,1,opt,name=File" json:"File,omitempty"`
}

func (m *GetMetaRequest) Reset()                    { *m = GetMetaRequest{} }
func (m *GetMetaRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMetaRequest) ProtoMessage()               {}
func (*GetMetaRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *GetMetaRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

type GetMetaResponse struct {
	File *File  `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	Size uint64 `protobuf:"varint,2,opt,name=Size" json:"Size,omitempty"`
}

func (m *GetMetaResponse) Reset()                    { *m = GetMetaResponse{} }
func (m *GetMetaResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMetaResponse) ProtoMessage()               {}
func (*GetMetaResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *GetMetaResponse) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *GetMetaResponse) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type RepoDef struct {
	Repository string `protobuf:"bytes,1,opt,name=Repository" json:"Repository,omitempty"`
	Branch     string `protobuf:"bytes,2,opt,name=Branch" json:"Branch,omitempty"`
}

func (m *RepoDef) Reset()                    { *m = RepoDef{} }
func (m *RepoDef) String() string            { return proto.CompactTextString(m) }
func (*RepoDef) ProtoMessage()               {}
func (*RepoDef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *RepoDef) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *RepoDef) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

type BuildNumber struct {
	BuildID uint64 `protobuf:"varint,1,opt,name=BuildID" json:"BuildID,omitempty"`
}

func (m *BuildNumber) Reset()                    { *m = BuildNumber{} }
func (m *BuildNumber) String() string            { return proto.CompactTextString(m) }
func (*BuildNumber) ProtoMessage()               {}
func (*BuildNumber) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *BuildNumber) GetBuildID() uint64 {
	if m != nil {
		return m.BuildID
	}
	return 0
}

type BuildDef struct {
	Repository string `protobuf:"bytes,1,opt,name=Repository" json:"Repository,omitempty"`
	Branch     string `protobuf:"bytes,2,opt,name=Branch" json:"Branch,omitempty"`
	BuildID    uint64 `protobuf:"varint,3,opt,name=BuildID" json:"BuildID,omitempty"`
}

func (m *BuildDef) Reset()                    { *m = BuildDef{} }
func (m *BuildDef) String() string            { return proto.CompactTextString(m) }
func (*BuildDef) ProtoMessage()               {}
func (*BuildDef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *BuildDef) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *BuildDef) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *BuildDef) GetBuildID() uint64 {
	if m != nil {
		return m.BuildID
	}
	return 0
}

type BuildInfo struct {
	CommitID      string `protobuf:"bytes,1,opt,name=CommitID" json:"CommitID,omitempty"`
	CommitMessage string `protobuf:"bytes,2,opt,name=CommitMessage" json:"CommitMessage,omitempty"`
	UserEmail     string `protobuf:"bytes,3,opt,name=UserEmail" json:"UserEmail,omitempty"`
	BuildDate     uint32 `protobuf:"varint,4,opt,name=BuildDate" json:"BuildDate,omitempty"`
}

func (m *BuildInfo) Reset()                    { *m = BuildInfo{} }
func (m *BuildInfo) String() string            { return proto.CompactTextString(m) }
func (*BuildInfo) ProtoMessage()               {}
func (*BuildInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *BuildInfo) GetCommitID() string {
	if m != nil {
		return m.CommitID
	}
	return ""
}

func (m *BuildInfo) GetCommitMessage() string {
	if m != nil {
		return m.CommitMessage
	}
	return ""
}

func (m *BuildInfo) GetUserEmail() string {
	if m != nil {
		return m.UserEmail
	}
	return ""
}

func (m *BuildInfo) GetBuildDate() uint32 {
	if m != nil {
		return m.BuildDate
	}
	return 0
}

type FilePattern struct {
	Pattern string `protobuf:"bytes,1,opt,name=Pattern" json:"Pattern,omitempty"`
}

func (m *FilePattern) Reset()                    { *m = FilePattern{} }
func (m *FilePattern) String() string            { return proto.CompactTextString(m) }
func (*FilePattern) ProtoMessage()               {}
func (*FilePattern) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *FilePattern) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

type FileList struct {
	Files []*File `protobuf:"bytes,1,rep,name=Files" json:"Files,omitempty"`
}

func (m *FileList) Reset()                    { *m = FileList{} }
func (m *FileList) String() string            { return proto.CompactTextString(m) }
func (*FileList) ProtoMessage()               {}
func (*FileList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *FileList) GetFiles() []*File {
	if m != nil {
		return m.Files
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateBuildRequest)(nil), "buildrepo.CreateBuildRequest")
	proto.RegisterType((*CreateBuildResponse)(nil), "buildrepo.CreateBuildResponse")
	proto.RegisterType((*UploadTokenRequest)(nil), "buildrepo.UploadTokenRequest")
	proto.RegisterType((*UploadTokenResponse)(nil), "buildrepo.UploadTokenResponse")
	proto.RegisterType((*UploadDoneRequest)(nil), "buildrepo.UploadDoneRequest")
	proto.RegisterType((*UploadDoneResponse)(nil), "buildrepo.UploadDoneResponse")
	proto.RegisterType((*RepoEntry)(nil), "buildrepo.RepoEntry")
	proto.RegisterType((*ListReposRequest)(nil), "buildrepo.ListReposRequest")
	proto.RegisterType((*ListReposResponse)(nil), "buildrepo.ListReposResponse")
	proto.RegisterType((*ListBranchesRequest)(nil), "buildrepo.ListBranchesRequest")
	proto.RegisterType((*ListBranchesResponse)(nil), "buildrepo.ListBranchesResponse")
	proto.RegisterType((*ListVersionsRequest)(nil), "buildrepo.ListVersionsRequest")
	proto.RegisterType((*ListVersionsResponse)(nil), "buildrepo.ListVersionsResponse")
	proto.RegisterType((*ListFilesRequest)(nil), "buildrepo.ListFilesRequest")
	proto.RegisterType((*ListFilesResponse)(nil), "buildrepo.ListFilesResponse")
	proto.RegisterType((*GetLatestVersionRequest)(nil), "buildrepo.GetLatestVersionRequest")
	proto.RegisterType((*GetLatestVersionResponse)(nil), "buildrepo.GetLatestVersionResponse")
	proto.RegisterType((*BuildMeta)(nil), "buildrepo.BuildMeta")
	proto.RegisterType((*GetBlockRequest)(nil), "buildrepo.GetBlockRequest")
	proto.RegisterType((*GetBlockResponse)(nil), "buildrepo.GetBlockResponse")
	proto.RegisterType((*File)(nil), "buildrepo.File")
	proto.RegisterType((*Tool)(nil), "buildrepo.Tool")
	proto.RegisterType((*ListToolsResponse)(nil), "buildrepo.ListToolsResponse")
	proto.RegisterType((*GetFileRequest)(nil), "buildrepo.GetFileRequest")
	proto.RegisterType((*FileBlock)(nil), "buildrepo.FileBlock")
	proto.RegisterType((*GetMetaRequest)(nil), "buildrepo.GetMetaRequest")
	proto.RegisterType((*GetMetaResponse)(nil), "buildrepo.GetMetaResponse")
	proto.RegisterType((*RepoDef)(nil), "buildrepo.RepoDef")
	proto.RegisterType((*BuildNumber)(nil), "buildrepo.BuildNumber")
	proto.RegisterType((*BuildDef)(nil), "buildrepo.BuildDef")
	proto.RegisterType((*BuildInfo)(nil), "buildrepo.BuildInfo")
	proto.RegisterType((*FilePattern)(nil), "buildrepo.FilePattern")
	proto.RegisterType((*FileList)(nil), "buildrepo.FileList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BuildRepoManager service

type BuildRepoManagerClient interface {
	CreateBuild(ctx context.Context, in *CreateBuildRequest, opts ...grpc.CallOption) (*CreateBuildResponse, error)
	GetUploadToken(ctx context.Context, in *UploadTokenRequest, opts ...grpc.CallOption) (*UploadTokenResponse, error)
	UploadsComplete(ctx context.Context, in *UploadDoneRequest, opts ...grpc.CallOption) (*UploadDoneResponse, error)
	ListRepos(ctx context.Context, in *ListReposRequest, opts ...grpc.CallOption) (*ListReposResponse, error)
	ListBranches(ctx context.Context, in *ListBranchesRequest, opts ...grpc.CallOption) (*ListBranchesResponse, error)
	ListVersions(ctx context.Context, in *ListVersionsRequest, opts ...grpc.CallOption) (*ListVersionsResponse, error)
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
	ListTools(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*ListToolsResponse, error)
	GetLatestVersion(ctx context.Context, in *GetLatestVersionRequest, opts ...grpc.CallOption) (*GetLatestVersionResponse, error)
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error)
	GetFileMetaData(ctx context.Context, in *GetMetaRequest, opts ...grpc.CallOption) (*GetMetaResponse, error)
	GetFileAsStream(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (BuildRepoManager_GetFileAsStreamClient, error)
	PutFileAsStream(ctx context.Context, opts ...grpc.CallOption) (BuildRepoManager_PutFileAsStreamClient, error)
	ReserveNextBuildNumber(ctx context.Context, in *RepoDef, opts ...grpc.CallOption) (*BuildNumber, error)
	GetBuildInfo(ctx context.Context, in *BuildDef, opts ...grpc.CallOption) (*BuildInfo, error)
	// find a file by name in any repo
	FindFiles(ctx context.Context, in *FilePattern, opts ...grpc.CallOption) (*FileList, error)
}

type buildRepoManagerClient struct {
	cc *grpc.ClientConn
}

func NewBuildRepoManagerClient(cc *grpc.ClientConn) BuildRepoManagerClient {
	return &buildRepoManagerClient{cc}
}

func (c *buildRepoManagerClient) CreateBuild(ctx context.Context, in *CreateBuildRequest, opts ...grpc.CallOption) (*CreateBuildResponse, error) {
	out := new(CreateBuildResponse)
	err := grpc.Invoke(ctx, "/buildrepo.BuildRepoManager/CreateBuild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildRepoManagerClient) GetUploadToken(ctx context.Context, in *UploadTokenRequest, opts ...grpc.CallOption) (*UploadTokenResponse, error) {
	out := new(UploadTokenResponse)
	err := grpc.Invoke(ctx, "/buildrepo.BuildRepoManager/GetUploadToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildRepoManagerClient) UploadsComplete(ctx context.Context, in *UploadDoneRequest, opts ...grpc.CallOption) (*UploadDoneResponse, error) {
	out := new(UploadDoneResponse)
	err := grpc.Invoke(ctx, "/buildrepo.BuildRepoManager/UploadsComplete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildRepoManagerClient) ListRepos(ctx context.Context, in *ListReposRequest, opts ...grpc.CallOption) (*ListReposResponse, error) {
	out := new(ListReposResponse)
	err := grpc.Invoke(ctx, "/buildrepo.BuildRepoManager/ListRepos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildRepoManagerClient) ListBranches(ctx context.Context, in *ListBranchesRequest, opts ...grpc.CallOption) (*ListBranchesResponse, error) {
	out := new(ListBranchesResponse)
	err := grpc.Invoke(ctx, "/buildrepo.BuildRepoManager/ListBranches", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildRepoManagerClient) ListVersions(ctx context.Context, in *ListVersionsRequest, opts ...grpc.CallOption) (*ListVersionsResponse, error) {
	out := new(ListVersionsResponse)
	err := grpc.Invoke(ctx, "/buildrepo.BuildRepoManager/ListVersions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildRepoManagerClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	out := new(ListFilesResponse)
	err := grpc.Invoke(ctx, "/buildrepo.BuildRepoManager/ListFiles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildRepoManagerClient) ListTools(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*ListToolsResponse, error) {
	out := new(ListToolsResponse)
	err := grpc.Invoke(ctx, "/buildrepo.BuildRepoManager/ListTools", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildRepoManagerClient) GetLatestVersion(ctx context.Context, in *GetLatestVersionRequest, opts ...grpc.CallOption) (*GetLatestVersionResponse, error) {
	out := new(GetLatestVersionResponse)
	err := grpc.Invoke(ctx, "/buildrepo.BuildRepoManager/GetLatestVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildRepoManagerClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error) {
	out := new(GetBlockResponse)
	err := grpc.Invoke(ctx, "/buildrepo.BuildRepoManager/GetBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildRepoManagerClient) GetFileMetaData(ctx context.Context, in *GetMetaRequest, opts ...grpc.CallOption) (*GetMetaResponse, error) {
	out := new(GetMetaResponse)
	err := grpc.Invoke(ctx, "/buildrepo.BuildRepoManager/GetFileMetaData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildRepoManagerClient) GetFileAsStream(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (BuildRepoManager_GetFileAsStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BuildRepoManager_serviceDesc.Streams[0], c.cc, "/buildrepo.BuildRepoManager/GetFileAsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &buildRepoManagerGetFileAsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BuildRepoManager_GetFileAsStreamClient interface {
	Recv() (*FileBlock, error)
	grpc.ClientStream
}

type buildRepoManagerGetFileAsStreamClient struct {
	grpc.ClientStream
}

func (x *buildRepoManagerGetFileAsStreamClient) Recv() (*FileBlock, error) {
	m := new(FileBlock)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *buildRepoManagerClient) PutFileAsStream(ctx context.Context, opts ...grpc.CallOption) (BuildRepoManager_PutFileAsStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BuildRepoManager_serviceDesc.Streams[1], c.cc, "/buildrepo.BuildRepoManager/PutFileAsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &buildRepoManagerPutFileAsStreamClient{stream}
	return x, nil
}

type BuildRepoManager_PutFileAsStreamClient interface {
	Send(*FileBlock) error
	CloseAndRecv() (*common.Void, error)
	grpc.ClientStream
}

type buildRepoManagerPutFileAsStreamClient struct {
	grpc.ClientStream
}

func (x *buildRepoManagerPutFileAsStreamClient) Send(m *FileBlock) error {
	return x.ClientStream.SendMsg(m)
}

func (x *buildRepoManagerPutFileAsStreamClient) CloseAndRecv() (*common.Void, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(common.Void)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *buildRepoManagerClient) ReserveNextBuildNumber(ctx context.Context, in *RepoDef, opts ...grpc.CallOption) (*BuildNumber, error) {
	out := new(BuildNumber)
	err := grpc.Invoke(ctx, "/buildrepo.BuildRepoManager/ReserveNextBuildNumber", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildRepoManagerClient) GetBuildInfo(ctx context.Context, in *BuildDef, opts ...grpc.CallOption) (*BuildInfo, error) {
	out := new(BuildInfo)
	err := grpc.Invoke(ctx, "/buildrepo.BuildRepoManager/GetBuildInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildRepoManagerClient) FindFiles(ctx context.Context, in *FilePattern, opts ...grpc.CallOption) (*FileList, error) {
	out := new(FileList)
	err := grpc.Invoke(ctx, "/buildrepo.BuildRepoManager/FindFiles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BuildRepoManager service

type BuildRepoManagerServer interface {
	CreateBuild(context.Context, *CreateBuildRequest) (*CreateBuildResponse, error)
	GetUploadToken(context.Context, *UploadTokenRequest) (*UploadTokenResponse, error)
	UploadsComplete(context.Context, *UploadDoneRequest) (*UploadDoneResponse, error)
	ListRepos(context.Context, *ListReposRequest) (*ListReposResponse, error)
	ListBranches(context.Context, *ListBranchesRequest) (*ListBranchesResponse, error)
	ListVersions(context.Context, *ListVersionsRequest) (*ListVersionsResponse, error)
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error)
	ListTools(context.Context, *common.Void) (*ListToolsResponse, error)
	GetLatestVersion(context.Context, *GetLatestVersionRequest) (*GetLatestVersionResponse, error)
	GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error)
	GetFileMetaData(context.Context, *GetMetaRequest) (*GetMetaResponse, error)
	GetFileAsStream(*GetFileRequest, BuildRepoManager_GetFileAsStreamServer) error
	PutFileAsStream(BuildRepoManager_PutFileAsStreamServer) error
	ReserveNextBuildNumber(context.Context, *RepoDef) (*BuildNumber, error)
	GetBuildInfo(context.Context, *BuildDef) (*BuildInfo, error)
	// find a file by name in any repo
	FindFiles(context.Context, *FilePattern) (*FileList, error)
}

func RegisterBuildRepoManagerServer(s *grpc.Server, srv BuildRepoManagerServer) {
	s.RegisterService(&_BuildRepoManager_serviceDesc, srv)
}

func _BuildRepoManager_CreateBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildRepoManagerServer).CreateBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildrepo.BuildRepoManager/CreateBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildRepoManagerServer).CreateBuild(ctx, req.(*CreateBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildRepoManager_GetUploadToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildRepoManagerServer).GetUploadToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildrepo.BuildRepoManager/GetUploadToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildRepoManagerServer).GetUploadToken(ctx, req.(*UploadTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildRepoManager_UploadsComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildRepoManagerServer).UploadsComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildrepo.BuildRepoManager/UploadsComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildRepoManagerServer).UploadsComplete(ctx, req.(*UploadDoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildRepoManager_ListRepos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReposRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildRepoManagerServer).ListRepos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildrepo.BuildRepoManager/ListRepos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildRepoManagerServer).ListRepos(ctx, req.(*ListReposRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildRepoManager_ListBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBranchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildRepoManagerServer).ListBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildrepo.BuildRepoManager/ListBranches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildRepoManagerServer).ListBranches(ctx, req.(*ListBranchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildRepoManager_ListVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildRepoManagerServer).ListVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildrepo.BuildRepoManager/ListVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildRepoManagerServer).ListVersions(ctx, req.(*ListVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildRepoManager_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildRepoManagerServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildrepo.BuildRepoManager/ListFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildRepoManagerServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildRepoManager_ListTools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildRepoManagerServer).ListTools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildrepo.BuildRepoManager/ListTools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildRepoManagerServer).ListTools(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildRepoManager_GetLatestVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildRepoManagerServer).GetLatestVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildrepo.BuildRepoManager/GetLatestVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildRepoManagerServer).GetLatestVersion(ctx, req.(*GetLatestVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildRepoManager_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildRepoManagerServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildrepo.BuildRepoManager/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildRepoManagerServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildRepoManager_GetFileMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildRepoManagerServer).GetFileMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildrepo.BuildRepoManager/GetFileMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildRepoManagerServer).GetFileMetaData(ctx, req.(*GetMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildRepoManager_GetFileAsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BuildRepoManagerServer).GetFileAsStream(m, &buildRepoManagerGetFileAsStreamServer{stream})
}

type BuildRepoManager_GetFileAsStreamServer interface {
	Send(*FileBlock) error
	grpc.ServerStream
}

type buildRepoManagerGetFileAsStreamServer struct {
	grpc.ServerStream
}

func (x *buildRepoManagerGetFileAsStreamServer) Send(m *FileBlock) error {
	return x.ServerStream.SendMsg(m)
}

func _BuildRepoManager_PutFileAsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BuildRepoManagerServer).PutFileAsStream(&buildRepoManagerPutFileAsStreamServer{stream})
}

type BuildRepoManager_PutFileAsStreamServer interface {
	SendAndClose(*common.Void) error
	Recv() (*FileBlock, error)
	grpc.ServerStream
}

type buildRepoManagerPutFileAsStreamServer struct {
	grpc.ServerStream
}

func (x *buildRepoManagerPutFileAsStreamServer) SendAndClose(m *common.Void) error {
	return x.ServerStream.SendMsg(m)
}

func (x *buildRepoManagerPutFileAsStreamServer) Recv() (*FileBlock, error) {
	m := new(FileBlock)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BuildRepoManager_ReserveNextBuildNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoDef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildRepoManagerServer).ReserveNextBuildNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildrepo.BuildRepoManager/ReserveNextBuildNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildRepoManagerServer).ReserveNextBuildNumber(ctx, req.(*RepoDef))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildRepoManager_GetBuildInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildDef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildRepoManagerServer).GetBuildInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildrepo.BuildRepoManager/GetBuildInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildRepoManagerServer).GetBuildInfo(ctx, req.(*BuildDef))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildRepoManager_FindFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilePattern)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildRepoManagerServer).FindFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildrepo.BuildRepoManager/FindFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildRepoManagerServer).FindFiles(ctx, req.(*FilePattern))
	}
	return interceptor(ctx, in, info, handler)
}

var _BuildRepoManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "buildrepo.BuildRepoManager",
	HandlerType: (*BuildRepoManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBuild",
			Handler:    _BuildRepoManager_CreateBuild_Handler,
		},
		{
			MethodName: "GetUploadToken",
			Handler:    _BuildRepoManager_GetUploadToken_Handler,
		},
		{
			MethodName: "UploadsComplete",
			Handler:    _BuildRepoManager_UploadsComplete_Handler,
		},
		{
			MethodName: "ListRepos",
			Handler:    _BuildRepoManager_ListRepos_Handler,
		},
		{
			MethodName: "ListBranches",
			Handler:    _BuildRepoManager_ListBranches_Handler,
		},
		{
			MethodName: "ListVersions",
			Handler:    _BuildRepoManager_ListVersions_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _BuildRepoManager_ListFiles_Handler,
		},
		{
			MethodName: "ListTools",
			Handler:    _BuildRepoManager_ListTools_Handler,
		},
		{
			MethodName: "GetLatestVersion",
			Handler:    _BuildRepoManager_GetLatestVersion_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _BuildRepoManager_GetBlock_Handler,
		},
		{
			MethodName: "GetFileMetaData",
			Handler:    _BuildRepoManager_GetFileMetaData_Handler,
		},
		{
			MethodName: "ReserveNextBuildNumber",
			Handler:    _BuildRepoManager_ReserveNextBuildNumber_Handler,
		},
		{
			MethodName: "GetBuildInfo",
			Handler:    _BuildRepoManager_GetBuildInfo_Handler,
		},
		{
			MethodName: "FindFiles",
			Handler:    _BuildRepoManager_FindFiles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFileAsStream",
			Handler:       _BuildRepoManager_GetFileAsStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutFileAsStream",
			Handler:       _BuildRepoManager_PutFileAsStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "golang.conradwood.net/apis/buildrepo/buildrepo.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/buildrepo/buildrepo.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 1230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x58, 0xdd, 0x52, 0xdc, 0xb6,
	0x17, 0x1f, 0xc3, 0x02, 0xbb, 0x67, 0xe1, 0x0f, 0x11, 0x0c, 0x7f, 0xd7, 0x21, 0x94, 0x51, 0xd2,
	0x96, 0x99, 0xce, 0x6c, 0x5a, 0xda, 0x0c, 0x4d, 0xef, 0x60, 0x0d, 0x94, 0x0c, 0x90, 0xd4, 0x40,
	0x6e, 0xda, 0x1b, 0xb3, 0xab, 0x25, 0x9e, 0x78, 0xad, 0xad, 0x2d, 0x92, 0xd2, 0x07, 0xe8, 0x4c,
	0x6f, 0x3b, 0x7d, 0x84, 0x3e, 0x68, 0x47, 0x47, 0xb2, 0x2d, 0xd9, 0xbb, 0x0c, 0x1f, 0xed, 0x0d,
	0x48, 0x47, 0xe7, 0x5b, 0x3f, 0x9d, 0x73, 0xbc, 0xf0, 0xed, 0x25, 0x8f, 0xc3, 0xe4, 0xb2, 0xd3,
	0xe3, 0x49, 0x1a, 0xf6, 0x3f, 0x72, 0xde, 0xef, 0x24, 0x4c, 0x3c, 0x0f, 0x47, 0x51, 0xf6, 0xfc,
	0xe2, 0x2a, 0x8a, 0xfb, 0x29, 0x1b, 0xf1, 0x72, 0xd5, 0x19, 0xa5, 0x5c, 0x70, 0xd2, 0x2a, 0x08,
	0x5e, 0xe7, 0x06, 0x05, 0x3d, 0x3e, 0x1c, 0xf2, 0x44, 0xff, 0x53, 0xa2, 0xf4, 0xf7, 0x29, 0x20,
	0xdd, 0x94, 0x85, 0x82, 0xed, 0x4a, 0x1d, 0x01, 0xfb, 0xe5, 0x8a, 0x65, 0x82, 0xac, 0x03, 0x04,
	0x6c, 0xc4, 0xb3, 0x48, 0xf0, 0xf4, 0xda, 0x75, 0x36, 0x9c, 0xcd, 0x56, 0x60, 0x50, 0x88, 0x07,
	0xcd, 0x2e, 0x1f, 0x0e, 0x23, 0x71, 0xe8, 0xbb, 0x53, 0x78, 0x5a, 0xec, 0xc9, 0x2a, 0xcc, 0xee,
	0xa6, 0x61, 0xd2, 0x7b, 0xe7, 0x4e, 0xe3, 0x89, 0xde, 0x11, 0x17, 0xe6, 0xd0, 0xc6, 0xa1, 0xef,
	0x36, 0x36, 0x9c, 0xcd, 0x46, 0x90, 0x6f, 0xc9, 0x1a, 0xb4, 0x94, 0xf4, 0xf1, 0xe9, 0x81, 0x3b,
	0x83, 0x42, 0x25, 0x41, 0x9e, 0x9e, 0x67, 0x2c, 0xdd, 0x1b, 0x86, 0x51, 0xec, 0xce, 0xaa, 0xd3,
	0x82, 0x40, 0x28, 0xcc, 0x97, 0x7e, 0x1d, 0xfa, 0xee, 0x1c, 0xaa, 0xb6, 0x68, 0x92, 0x67, 0x27,
	0x15, 0x6c, 0x10, 0xf6, 0xc4, 0x49, 0x38, 0x64, 0x6e, 0x13, 0x95, 0x58, 0x34, 0xfa, 0x12, 0x96,
	0xad, 0x3c, 0x64, 0x23, 0x9e, 0x64, 0x4c, 0x8a, 0x22, 0xe1, 0x54, 0xf0, 0x94, 0x45, 0x7d, 0x9d,
	0x0a, 0x8b, 0x46, 0x53, 0x20, 0xe7, 0xa3, 0x98, 0x87, 0xfd, 0x33, 0xfe, 0x9e, 0x25, 0x79, 0x0a,
	0x6f, 0x21, 0x29, 0xd3, 0xb8, 0x1f, 0xc5, 0x2c, 0x91, 0x4e, 0xe9, 0x34, 0xe6, 0x7b, 0x3b, 0xec,
	0xe9, 0x4a, 0xd8, 0xf4, 0x4b, 0x58, 0xb6, 0x6c, 0x6a, 0x77, 0x57, 0x60, 0x06, 0x09, 0xda, 0x9a,
	0xda, 0xd0, 0x6d, 0x78, 0xa4, 0x98, 0x7d, 0x9e, 0xb0, 0x3b, 0xf8, 0x47, 0x5f, 0xe5, 0x91, 0x29,
	0x41, 0x6d, 0x64, 0x15, 0x66, 0xbb, 0x31, 0xcf, 0x98, 0x92, 0x69, 0x06, 0x7a, 0x87, 0x1e, 0x23,
	0x77, 0x94, 0x5c, 0x62, 0x38, 0x0b, 0x41, 0x49, 0xa0, 0x7f, 0x3b, 0xd0, 0x92, 0xb7, 0xb2, 0x97,
	0x88, 0xf4, 0x9a, 0x10, 0x68, 0xe0, 0x55, 0x28, 0xab, 0xb8, 0x96, 0xb4, 0xb3, 0xeb, 0x91, 0xca,
	0xc4, 0x4c, 0x80, 0x6b, 0xb2, 0x04, 0xd3, 0x7e, 0x94, 0xea, 0xf8, 0xe5, 0x52, 0x5a, 0xf7, 0xf9,
	0x30, 0x8c, 0x12, 0x44, 0x51, 0x2b, 0xd0, 0x3b, 0xb2, 0x07, 0xed, 0xa3, 0x50, 0xb0, 0x4c, 0x60,
	0x04, 0x08, 0xa3, 0xf6, 0xd6, 0xd3, 0x4e, 0xf9, 0x56, 0x0e, 0x98, 0x50, 0x0c, 0x6f, 0x59, 0x9a,
	0x45, 0xbc, 0x48, 0x5a, 0x60, 0xca, 0x51, 0x02, 0x4b, 0x47, 0x51, 0x26, 0x10, 0x3f, 0x3a, 0x55,
	0xb4, 0x0b, 0x8f, 0x0c, 0x9a, 0xce, 0x42, 0x07, 0xe6, 0x64, 0x28, 0x11, 0xcb, 0x5c, 0x67, 0x63,
	0x7a, 0xb3, 0xbd, 0xb5, 0x62, 0xd8, 0x2a, 0x02, 0x0d, 0x72, 0x26, 0xfa, 0x02, 0x96, 0xa5, 0x12,
	0xf5, 0x18, 0x58, 0x76, 0xcb, 0x97, 0x46, 0xf7, 0x61, 0xc5, 0x16, 0xbb, 0xa7, 0xf9, 0x63, 0x65,
	0x5e, 0xc7, 0x7e, 0x5b, 0xf3, 0xc6, 0x63, 0x9e, 0x32, 0x1f, 0x73, 0xee, 0x56, 0xa9, 0xee, 0x9e,
	0x6e, 0xfd, 0xe5, 0xa8, 0x7c, 0x4b, 0xd8, 0x3f, 0xd4, 0x29, 0xb3, 0xc2, 0x4c, 0xdb, 0x15, 0x46,
	0xc3, 0xa8, 0x51, 0xc2, 0x68, 0x4d, 0xa2, 0xb1, 0x77, 0x95, 0x66, 0xd1, 0x07, 0x86, 0x60, 0x69,
	0x06, 0x25, 0x21, 0xbf, 0x71, 0xed, 0xd5, 0x3d, 0x63, 0xfb, 0x11, 0xfe, 0x5f, 0xc7, 0xdc, 0xc3,
	0xd2, 0xfe, 0x0e, 0xdc, 0x49, 0x30, 0x36, 0xa3, 0x77, 0xec, 0xe8, 0xb7, 0xa0, 0x85, 0xcb, 0x63,
	0x26, 0x42, 0x54, 0x68, 0xbb, 0x5e, 0x9c, 0x05, 0x25, 0x1b, 0xed, 0x19, 0x32, 0xb5, 0x22, 0xeb,
	0x8c, 0x29, 0xb2, 0xf7, 0x68, 0x09, 0xf4, 0x02, 0x16, 0x0f, 0x98, 0xd8, 0x8d, 0x79, 0xef, 0x7d,
	0x9e, 0x99, 0xa7, 0xd0, 0x18, 0x44, 0xb1, 0x2a, 0x0c, 0xed, 0xad, 0x45, 0xc3, 0x4d, 0x79, 0x19,
	0x01, 0x1e, 0x4a, 0x7d, 0xaf, 0x07, 0x83, 0x8c, 0x09, 0xb4, 0xd4, 0x08, 0xf4, 0x4e, 0x56, 0x90,
	0xd3, 0xe8, 0x37, 0x86, 0x56, 0x16, 0x02, 0x5c, 0xd3, 0x8f, 0xb0, 0x54, 0xda, 0xd0, 0xa9, 0xfa,
	0xb7, 0x8d, 0x48, 0x9a, 0x1f, 0x8a, 0x10, 0x01, 0x36, 0x1f, 0xe0, 0x9a, 0x0a, 0x68, 0x48, 0x6d,
	0xff, 0x01, 0x9a, 0xcd, 0xb6, 0xd1, 0xb0, 0xdb, 0x06, 0xdd, 0x85, 0xc6, 0x19, 0xe7, 0xf1, 0x6d,
	0x3a, 0xf8, 0xa4, 0xd6, 0x43, 0xbf, 0x57, 0xe8, 0x97, 0x7a, 0x4a, 0xf4, 0x7f, 0x26, 0x5b, 0x0b,
	0x8f, 0x73, 0xec, 0x9b, 0x49, 0x93, 0xf4, 0x40, 0x9d, 0xd2, 0x53, 0xf8, 0xdf, 0x01, 0xc3, 0x87,
	0x73, 0xa7, 0x1b, 0x5d, 0x83, 0x16, 0x5e, 0x51, 0x26, 0x33, 0xab, 0x7b, 0x47, 0x41, 0xa0, 0xe7,
	0xd0, 0x92, 0xbc, 0x48, 0x28, 0xf2, 0xaf, 0x40, 0x68, 0xe7, 0x7f, 0xaa, 0xcc, 0x3f, 0xd9, 0x80,
	0xb6, 0xd1, 0x22, 0x35, 0xf2, 0x4c, 0x12, 0x7d, 0x81, 0xbe, 0x22, 0xf2, 0x4b, 0x5f, 0xf7, 0x6f,
	0xf2, 0x55, 0xfe, 0xa5, 0xaf, 0x10, 0xb5, 0x4a, 0xec, 0x2e, 0x80, 0xca, 0x1d, 0x9f, 0x2a, 0x1d,
	0xa7, 0x3b, 0x30, 0x27, 0x2f, 0xc5, 0x67, 0x83, 0x7b, 0xd7, 0x84, 0x2f, 0xa0, 0x8d, 0xc0, 0x38,
	0xb9, 0x1a, 0x5e, 0xb0, 0x74, 0x72, 0x19, 0xa0, 0x3f, 0x43, 0x13, 0x97, 0x0f, 0x30, 0x36, 0x19,
	0x94, 0xf4, 0x0f, 0x47, 0x57, 0x8c, 0xc3, 0x64, 0xc0, 0xad, 0x6a, 0xe0, 0x54, 0xaa, 0xc1, 0x33,
	0x58, 0xd0, 0xd3, 0x1d, 0xcb, 0xb2, 0xf0, 0x32, 0xc7, 0x9f, 0x4d, 0xbc, 0x79, 0xfe, 0x41, 0xbc,
	0x60, 0x2c, 0xa1, 0x50, 0x6f, 0x60, 0x21, 0x28, 0x09, 0x32, 0x25, 0x32, 0xef, 0x6f, 0x42, 0x21,
	0x58, 0x9a, 0x48, 0xa7, 0xf5, 0x52, 0xfb, 0x92, 0x6f, 0xe9, 0xd7, 0xea, 0x15, 0x48, 0xb4, 0x4b,
	0x80, 0x63, 0xbd, 0x1f, 0x03, 0x70, 0xbc, 0x44, 0x75, 0xba, 0xf5, 0x67, 0x0b, 0x96, 0xf4, 0x8c,
	0x38, 0xe2, 0xc7, 0x61, 0x12, 0x5e, 0xb2, 0x94, 0x1c, 0x41, 0xdb, 0x98, 0x1e, 0xc9, 0x13, 0x43,
	0xb6, 0x3e, 0x5d, 0x7b, 0xeb, 0x93, 0x8e, 0x35, 0x9a, 0x5e, 0x23, 0x2e, 0x0d, 0xa4, 0x5a, 0x0a,
	0xeb, 0xb3, 0xa6, 0xa5, 0x70, 0xdc, 0x58, 0x78, 0x02, 0x8b, 0x8a, 0x9c, 0x75, 0xf9, 0x70, 0x14,
	0x33, 0xc1, 0xc8, 0x5a, 0x4d, 0xc4, 0x18, 0x0e, 0xbd, 0x27, 0x13, 0x4e, 0xb5, 0xbe, 0x7d, 0x68,
	0x15, 0x03, 0x11, 0x79, 0x6c, 0xf0, 0x56, 0x47, 0x27, 0x6f, 0x6d, 0xfc, 0x61, 0x11, 0xe8, 0xbc,
	0x39, 0xdc, 0x90, 0xf5, 0x0a, 0x77, 0x65, 0x58, 0xf2, 0x3e, 0x9d, 0x78, 0x6e, 0x2b, 0xcc, 0xc7,
	0x92, 0x9a, 0xc2, 0xca, 0xf8, 0x53, 0x53, 0x58, 0x9b, 0x67, 0x74, 0xa4, 0x78, 0xf5, 0xb5, 0x48,
	0xcd, 0xa1, 0xa5, 0x16, 0xa9, 0x3d, 0x3b, 0x6c, 0x2b, 0x3d, 0x58, 0x23, 0xc9, 0x7c, 0x47, 0x7f,
	0x83, 0xbd, 0xe5, 0x51, 0xbf, 0x26, 0x68, 0x97, 0xdd, 0x9f, 0xb0, 0x7d, 0x59, 0x1d, 0x9f, 0xd0,
	0x1b, 0xa7, 0x5a, 0xe5, 0xce, 0x6d, 0x26, 0x5f, 0xd2, 0x85, 0x66, 0xde, 0x1b, 0x89, 0x67, 0x0b,
	0x98, 0x4d, 0xd9, 0x7b, 0x3c, 0xf6, 0x4c, 0x2b, 0xf9, 0x01, 0xcb, 0xa1, 0x0c, 0x57, 0x96, 0x44,
	0x2c, 0xbd, 0x9f, 0xd8, 0xfc, 0x46, 0x85, 0xf5, 0xbc, 0x71, 0x47, 0x5a, 0x93, 0x5f, 0x68, 0xda,
	0xc9, 0x4e, 0x45, 0xca, 0xc2, 0x61, 0x55, 0x93, 0xd1, 0x57, 0xbc, 0x95, 0xca, 0x03, 0x45, 0xaf,
	0xbe, 0x72, 0xc8, 0x36, 0x2c, 0xbe, 0xb9, 0xb2, 0xb5, 0x8c, 0x65, 0xf5, 0xac, 0x6b, 0xd8, 0x74,
	0x88, 0x0f, 0xab, 0x01, 0xcb, 0x58, 0xfa, 0x81, 0x9d, 0xb0, 0x5f, 0x85, 0x59, 0x53, 0x49, 0x65,
	0xd0, 0xf3, 0xd9, 0xc0, 0x5b, 0xad, 0x4e, 0x50, 0x9a, 0xf7, 0x25, 0xcc, 0xcb, 0x14, 0x15, 0x95,
	0x70, 0xb9, 0xca, 0x27, 0x85, 0x6b, 0xe3, 0x17, 0xb2, 0x7e, 0x27, 0xdb, 0x5c, 0xd2, 0x57, 0x60,
	0x5b, 0xad, 0xf8, 0xac, 0x4b, 0x96, 0xb7, 0x5c, 0xa1, 0xe3, 0x3b, 0xf8, 0x1c, 0x9e, 0x25, 0x4c,
	0x98, 0x5f, 0xfd, 0xfa, 0x77, 0x00, 0xf9, 0xe1, 0x5f, 0x0a, 0x5c, 0xcc, 0xe2, 0x57, 0xff, 0x37,
	0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x5f, 0x04, 0x22, 0x68, 0x10, 0x00, 0x00,
}
