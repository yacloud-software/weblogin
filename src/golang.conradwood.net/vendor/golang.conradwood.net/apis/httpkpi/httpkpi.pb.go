// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/httpkpi/httpkpi.proto
// DO NOT EDIT!

/*
Package httpkpi is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/httpkpi/httpkpi.proto

It has these top-level messages:
	NewCallRequest
	NewCallResponse
	GroupDef
	KPIRequest
	HistEntry
	KPIResponse
	Empty
	GroupList
	GroupRequest
	PerUserResponse
	HitResponse
*/
package httpkpi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"
import auth "golang.conradwood.net/apis/auth"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NewCallRequest struct {
	Service        string `protobuf:"bytes,1,opt,name=Service" json:"Service,omitempty"`
	TargetHost     string `protobuf:"bytes,2,opt,name=TargetHost" json:"TargetHost,omitempty"`
	RemoteHost     string `protobuf:"bytes,3,opt,name=RemoteHost" json:"RemoteHost,omitempty"`
	RequestURL     string `protobuf:"bytes,4,opt,name=RequestURL" json:"RequestURL,omitempty"`
	ResponseCode   int32  `protobuf:"varint,5,opt,name=ResponseCode" json:"ResponseCode,omitempty"`
	ResponseTimeMS int64  `protobuf:"varint,6,opt,name=ResponseTimeMS" json:"ResponseTimeMS,omitempty"`
	Group          string `protobuf:"bytes,7,opt,name=Group" json:"Group,omitempty"`
	UserID         string `protobuf:"bytes,8,opt,name=UserID" json:"UserID,omitempty"`
}

func (m *NewCallRequest) Reset()                    { *m = NewCallRequest{} }
func (m *NewCallRequest) String() string            { return proto.CompactTextString(m) }
func (*NewCallRequest) ProtoMessage()               {}
func (*NewCallRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NewCallRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *NewCallRequest) GetTargetHost() string {
	if m != nil {
		return m.TargetHost
	}
	return ""
}

func (m *NewCallRequest) GetRemoteHost() string {
	if m != nil {
		return m.RemoteHost
	}
	return ""
}

func (m *NewCallRequest) GetRequestURL() string {
	if m != nil {
		return m.RequestURL
	}
	return ""
}

func (m *NewCallRequest) GetResponseCode() int32 {
	if m != nil {
		return m.ResponseCode
	}
	return 0
}

func (m *NewCallRequest) GetResponseTimeMS() int64 {
	if m != nil {
		return m.ResponseTimeMS
	}
	return 0
}

func (m *NewCallRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *NewCallRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type NewCallResponse struct {
}

func (m *NewCallResponse) Reset()                    { *m = NewCallResponse{} }
func (m *NewCallResponse) String() string            { return proto.CompactTextString(m) }
func (*NewCallResponse) ProtoMessage()               {}
func (*NewCallResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// defines which log entries to include
type GroupDef struct {
	StartTime uint64   `protobuf:"varint,1,opt,name=StartTime" json:"StartTime,omitempty"`
	EndTime   uint64   `protobuf:"varint,2,opt,name=EndTime" json:"EndTime,omitempty"`
	Name      []string `protobuf:"bytes,3,rep,name=Name" json:"Name,omitempty"`
}

func (m *GroupDef) Reset()                    { *m = GroupDef{} }
func (m *GroupDef) String() string            { return proto.CompactTextString(m) }
func (*GroupDef) ProtoMessage()               {}
func (*GroupDef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GroupDef) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *GroupDef) GetEndTime() uint64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *GroupDef) GetName() []string {
	if m != nil {
		return m.Name
	}
	return nil
}

type KPIRequest struct {
	Group            *GroupDef `protobuf:"bytes,1,opt,name=Group" json:"Group,omitempty"`
	HistMilliSeconds []int32   `protobuf:"varint,2,rep,packed,name=HistMilliSeconds" json:"HistMilliSeconds,omitempty"`
}

func (m *KPIRequest) Reset()                    { *m = KPIRequest{} }
func (m *KPIRequest) String() string            { return proto.CompactTextString(m) }
func (*KPIRequest) ProtoMessage()               {}
func (*KPIRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *KPIRequest) GetGroup() *GroupDef {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *KPIRequest) GetHistMilliSeconds() []int32 {
	if m != nil {
		return m.HistMilliSeconds
	}
	return nil
}

type HistEntry struct {
	MilliSeconds int32  `protobuf:"varint,1,opt,name=MilliSeconds" json:"MilliSeconds,omitempty"`
	TotalCount   uint64 `protobuf:"varint,2,opt,name=TotalCount" json:"TotalCount,omitempty"`
}

func (m *HistEntry) Reset()                    { *m = HistEntry{} }
func (m *HistEntry) String() string            { return proto.CompactTextString(m) }
func (*HistEntry) ProtoMessage()               {}
func (*HistEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *HistEntry) GetMilliSeconds() int32 {
	if m != nil {
		return m.MilliSeconds
	}
	return 0
}

func (m *HistEntry) GetTotalCount() uint64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

type KPIResponse struct {
	TotalInGroup uint64       `protobuf:"varint,1,opt,name=TotalInGroup" json:"TotalInGroup,omitempty"`
	TotalLarger  uint64       `protobuf:"varint,2,opt,name=TotalLarger" json:"TotalLarger,omitempty"`
	Entries      []*HistEntry `protobuf:"bytes,3,rep,name=Entries" json:"Entries,omitempty"`
	TotalErrors  uint64       `protobuf:"varint,4,opt,name=TotalErrors" json:"TotalErrors,omitempty"`
}

func (m *KPIResponse) Reset()                    { *m = KPIResponse{} }
func (m *KPIResponse) String() string            { return proto.CompactTextString(m) }
func (*KPIResponse) ProtoMessage()               {}
func (*KPIResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *KPIResponse) GetTotalInGroup() uint64 {
	if m != nil {
		return m.TotalInGroup
	}
	return 0
}

func (m *KPIResponse) GetTotalLarger() uint64 {
	if m != nil {
		return m.TotalLarger
	}
	return 0
}

func (m *KPIResponse) GetEntries() []*HistEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *KPIResponse) GetTotalErrors() uint64 {
	if m != nil {
		return m.TotalErrors
	}
	return 0
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type GroupList struct {
	Names []string `protobuf:"bytes,1,rep,name=Names" json:"Names,omitempty"`
}

func (m *GroupList) Reset()                    { *m = GroupList{} }
func (m *GroupList) String() string            { return proto.CompactTextString(m) }
func (*GroupList) ProtoMessage()               {}
func (*GroupList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GroupList) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type GroupRequest struct {
	GroupName string `protobuf:"bytes,1,opt,name=GroupName" json:"GroupName,omitempty"`
}

func (m *GroupRequest) Reset()                    { *m = GroupRequest{} }
func (m *GroupRequest) String() string            { return proto.CompactTextString(m) }
func (*GroupRequest) ProtoMessage()               {}
func (*GroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GroupRequest) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

type PerUserResponse struct {
	User  *auth.User `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
	Count uint64     `protobuf:"varint,2,opt,name=Count" json:"Count,omitempty"`
}

func (m *PerUserResponse) Reset()                    { *m = PerUserResponse{} }
func (m *PerUserResponse) String() string            { return proto.CompactTextString(m) }
func (*PerUserResponse) ProtoMessage()               {}
func (*PerUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PerUserResponse) GetUser() *auth.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *PerUserResponse) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type HitResponse struct {
	Responses []*PerUserResponse `protobuf:"bytes,2,rep,name=Responses" json:"Responses,omitempty"`
}

func (m *HitResponse) Reset()                    { *m = HitResponse{} }
func (m *HitResponse) String() string            { return proto.CompactTextString(m) }
func (*HitResponse) ProtoMessage()               {}
func (*HitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *HitResponse) GetResponses() []*PerUserResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

func init() {
	proto.RegisterType((*NewCallRequest)(nil), "httpkpi.NewCallRequest")
	proto.RegisterType((*NewCallResponse)(nil), "httpkpi.NewCallResponse")
	proto.RegisterType((*GroupDef)(nil), "httpkpi.GroupDef")
	proto.RegisterType((*KPIRequest)(nil), "httpkpi.KPIRequest")
	proto.RegisterType((*HistEntry)(nil), "httpkpi.HistEntry")
	proto.RegisterType((*KPIResponse)(nil), "httpkpi.KPIResponse")
	proto.RegisterType((*Empty)(nil), "httpkpi.Empty")
	proto.RegisterType((*GroupList)(nil), "httpkpi.GroupList")
	proto.RegisterType((*GroupRequest)(nil), "httpkpi.GroupRequest")
	proto.RegisterType((*PerUserResponse)(nil), "httpkpi.PerUserResponse")
	proto.RegisterType((*HitResponse)(nil), "httpkpi.HitResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HTTPKPITracker service

type HTTPKPITrackerClient interface {
	NewCall(ctx context.Context, in *NewCallRequest, opts ...grpc.CallOption) (*NewCallResponse, error)
	CalcKPIs(ctx context.Context, in *KPIRequest, opts ...grpc.CallOption) (*KPIResponse, error)
	// updates the kpi tracker with all the services
	// we currently know about
	UpdateKPITracker(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	ListGroups(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*GroupList, error)
	HitCountByGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*HitResponse, error)
}

type hTTPKPITrackerClient struct {
	cc *grpc.ClientConn
}

func NewHTTPKPITrackerClient(cc *grpc.ClientConn) HTTPKPITrackerClient {
	return &hTTPKPITrackerClient{cc}
}

func (c *hTTPKPITrackerClient) NewCall(ctx context.Context, in *NewCallRequest, opts ...grpc.CallOption) (*NewCallResponse, error) {
	out := new(NewCallResponse)
	err := grpc.Invoke(ctx, "/httpkpi.HTTPKPITracker/NewCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPKPITrackerClient) CalcKPIs(ctx context.Context, in *KPIRequest, opts ...grpc.CallOption) (*KPIResponse, error) {
	out := new(KPIResponse)
	err := grpc.Invoke(ctx, "/httpkpi.HTTPKPITracker/CalcKPIs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPKPITrackerClient) UpdateKPITracker(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/httpkpi.HTTPKPITracker/UpdateKPITracker", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPKPITrackerClient) ListGroups(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*GroupList, error) {
	out := new(GroupList)
	err := grpc.Invoke(ctx, "/httpkpi.HTTPKPITracker/ListGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPKPITrackerClient) HitCountByGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*HitResponse, error) {
	out := new(HitResponse)
	err := grpc.Invoke(ctx, "/httpkpi.HTTPKPITracker/HitCountByGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HTTPKPITracker service

type HTTPKPITrackerServer interface {
	NewCall(context.Context, *NewCallRequest) (*NewCallResponse, error)
	CalcKPIs(context.Context, *KPIRequest) (*KPIResponse, error)
	// updates the kpi tracker with all the services
	// we currently know about
	UpdateKPITracker(context.Context, *Empty) (*Empty, error)
	ListGroups(context.Context, *common.Void) (*GroupList, error)
	HitCountByGroup(context.Context, *GroupRequest) (*HitResponse, error)
}

func RegisterHTTPKPITrackerServer(s *grpc.Server, srv HTTPKPITrackerServer) {
	s.RegisterService(&_HTTPKPITracker_serviceDesc, srv)
}

func _HTTPKPITracker_NewCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPKPITrackerServer).NewCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/httpkpi.HTTPKPITracker/NewCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPKPITrackerServer).NewCall(ctx, req.(*NewCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPKPITracker_CalcKPIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPKPITrackerServer).CalcKPIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/httpkpi.HTTPKPITracker/CalcKPIs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPKPITrackerServer).CalcKPIs(ctx, req.(*KPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPKPITracker_UpdateKPITracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPKPITrackerServer).UpdateKPITracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/httpkpi.HTTPKPITracker/UpdateKPITracker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPKPITrackerServer).UpdateKPITracker(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPKPITracker_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPKPITrackerServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/httpkpi.HTTPKPITracker/ListGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPKPITrackerServer).ListGroups(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPKPITracker_HitCountByGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPKPITrackerServer).HitCountByGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/httpkpi.HTTPKPITracker/HitCountByGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPKPITrackerServer).HitCountByGroup(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HTTPKPITracker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "httpkpi.HTTPKPITracker",
	HandlerType: (*HTTPKPITrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewCall",
			Handler:    _HTTPKPITracker_NewCall_Handler,
		},
		{
			MethodName: "CalcKPIs",
			Handler:    _HTTPKPITracker_CalcKPIs_Handler,
		},
		{
			MethodName: "UpdateKPITracker",
			Handler:    _HTTPKPITracker_UpdateKPITracker_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _HTTPKPITracker_ListGroups_Handler,
		},
		{
			MethodName: "HitCountByGroup",
			Handler:    _HTTPKPITracker_HitCountByGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/httpkpi/httpkpi.proto",
}

func init() { proto.RegisterFile("golang.conradwood.net/apis/httpkpi/httpkpi.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 671 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x54, 0x5d, 0x4f, 0xdb, 0x3c,
	0x14, 0x56, 0xbf, 0x28, 0x3d, 0x45, 0x05, 0xfc, 0xf2, 0x6e, 0x51, 0x85, 0x50, 0x17, 0x4d, 0x5b,
	0x85, 0x50, 0x98, 0x3a, 0x6d, 0x57, 0xd3, 0x2e, 0x28, 0x15, 0xad, 0xf8, 0x58, 0xe5, 0x16, 0xee,
	0xbd, 0xc6, 0x83, 0x88, 0x34, 0xce, 0x6c, 0x77, 0x88, 0xfb, 0xfd, 0x93, 0x5d, 0xed, 0x5f, 0x4e,
	0x3e, 0x8e, 0xd3, 0x04, 0x24, 0x6e, 0x92, 0x3c, 0xcf, 0xf9, 0xf0, 0xf1, 0x73, 0x4e, 0x0e, 0x7c,
	0xb8, 0x15, 0x31, 0x4b, 0x6e, 0x83, 0x85, 0x48, 0x24, 0x0b, 0x1f, 0x84, 0x08, 0x83, 0x84, 0xeb,
	0x63, 0x96, 0x46, 0xea, 0xf8, 0x4e, 0xeb, 0xf4, 0x3e, 0x8d, 0xdc, 0x3b, 0x48, 0xa5, 0xd0, 0x82,
	0x34, 0x33, 0xd8, 0x0d, 0x5e, 0x08, 0x5d, 0x88, 0xe5, 0x52, 0x24, 0xd9, 0xcb, 0x06, 0x76, 0x0f,
	0x5f, 0xf0, 0x67, 0x2b, 0x7d, 0x87, 0x0f, 0xeb, 0xeb, 0xff, 0xae, 0x42, 0xe7, 0x8a, 0x3f, 0x0c,
	0x59, 0x1c, 0x53, 0xfe, 0x73, 0xc5, 0x95, 0x26, 0x1e, 0x34, 0x67, 0x5c, 0xfe, 0x8a, 0x16, 0xdc,
	0xab, 0xf4, 0x2a, 0xfd, 0x16, 0x75, 0x90, 0x1c, 0x00, 0xcc, 0x99, 0xbc, 0xe5, 0x7a, 0x2c, 0x94,
	0xf6, 0xaa, 0x68, 0x2c, 0x30, 0xc6, 0x4e, 0xf9, 0x52, 0x68, 0x8e, 0xf6, 0x9a, 0xb5, 0xaf, 0x19,
	0x6b, 0xc7, 0x43, 0xae, 0xe9, 0x85, 0x57, 0x77, 0x76, 0xc7, 0x10, 0x1f, 0xb6, 0x28, 0x57, 0xa9,
	0x48, 0x14, 0x1f, 0x8a, 0x90, 0x7b, 0x8d, 0x5e, 0xa5, 0xdf, 0xa0, 0x25, 0x8e, 0xbc, 0x83, 0x8e,
	0xc3, 0xf3, 0x68, 0xc9, 0x2f, 0x67, 0xde, 0x46, 0xaf, 0xd2, 0xaf, 0xd1, 0x27, 0x2c, 0xd9, 0x83,
	0xc6, 0x99, 0x14, 0xab, 0xd4, 0x6b, 0xe2, 0x31, 0x16, 0x90, 0x57, 0xb0, 0x71, 0xad, 0xb8, 0x9c,
	0x9c, 0x7a, 0x9b, 0x48, 0x67, 0xc8, 0xdf, 0x85, 0xed, 0x5c, 0x05, 0x9b, 0xc6, 0xbf, 0x81, 0x4d,
	0x8c, 0x39, 0xe5, 0x3f, 0xc8, 0x3e, 0xb4, 0x66, 0x9a, 0x49, 0x6d, 0x72, 0xa3, 0x28, 0x75, 0xba,
	0x26, 0x8c, 0x60, 0xa3, 0x24, 0x44, 0x5b, 0x15, 0x6d, 0x0e, 0x12, 0x02, 0xf5, 0x2b, 0xb6, 0xe4,
	0x5e, 0xad, 0x57, 0xeb, 0xb7, 0x28, 0x7e, 0xfb, 0x0c, 0xe0, 0x7c, 0x3a, 0x71, 0x62, 0xbf, 0x77,
	0x65, 0x9a, 0xac, 0xed, 0xc1, 0x6e, 0xe0, 0x66, 0xc0, 0x9d, 0xed, 0x2a, 0x3f, 0x84, 0x9d, 0x71,
	0xa4, 0xf4, 0x65, 0x14, 0xc7, 0xd1, 0x8c, 0x2f, 0x44, 0x12, 0x2a, 0xaf, 0xda, 0xab, 0xf5, 0x1b,
	0xf4, 0x19, 0xef, 0x7f, 0x83, 0x96, 0xe1, 0x46, 0x89, 0x96, 0x8f, 0x46, 0xd4, 0x52, 0x50, 0xc5,
	0x8a, 0x5a, 0xe4, 0xb0, 0xb1, 0x42, 0xb3, 0x78, 0x28, 0x56, 0x89, 0xce, 0x2e, 0x51, 0x60, 0xfc,
	0x3f, 0x15, 0x68, 0x63, 0xd1, 0x56, 0x1b, 0x93, 0x13, 0xad, 0x93, 0x64, 0x5d, 0x7c, 0x9d, 0x96,
	0x38, 0xd2, 0x83, 0x36, 0xe2, 0x0b, 0x33, 0x1f, 0x32, 0x4b, 0x5a, 0xa4, 0xc8, 0x91, 0xd1, 0x4d,
	0xcb, 0x88, 0x2b, 0x14, 0xa8, 0x3d, 0x20, 0xf9, 0xed, 0xf3, 0xf2, 0xa9, 0x73, 0xc9, 0xf3, 0x8d,
	0xa4, 0x14, 0x52, 0xe1, 0xf4, 0xb8, 0x7c, 0x96, 0xf2, 0x9b, 0xd0, 0x18, 0x2d, 0x53, 0xfd, 0xe8,
	0xbf, 0x81, 0x16, 0xd6, 0x70, 0x11, 0x29, 0x6d, 0x06, 0xc1, 0xe8, 0x6e, 0x2e, 0x6e, 0x9a, 0x60,
	0x81, 0x7f, 0x04, 0x5b, 0xe8, 0xe2, 0xfa, 0xb0, 0x9f, 0x85, 0x60, 0xbb, 0xec, 0xd8, 0xaf, 0x09,
	0xff, 0x0c, 0xb6, 0xa7, 0x5c, 0x9a, 0x59, 0xc9, 0x25, 0x38, 0x80, 0xba, 0xc1, 0x59, 0xdf, 0x20,
	0xc0, 0x7f, 0x0a, 0x3d, 0x90, 0x37, 0xc7, 0x16, 0xd5, 0xb4, 0xc0, 0x1f, 0x41, 0x7b, 0x1c, 0xe9,
	0x3c, 0xc9, 0x67, 0x68, 0xb9, 0x6f, 0xdb, 0xcd, 0xf6, 0xc0, 0xcb, 0x35, 0x78, 0x72, 0x22, 0x5d,
	0xbb, 0x0e, 0xfe, 0x56, 0xa1, 0x33, 0x9e, 0xcf, 0xa7, 0xe7, 0xd3, 0xc9, 0x5c, 0xb2, 0xc5, 0x3d,
	0x97, 0xe4, 0x0b, 0x34, 0xb3, 0x09, 0x26, 0xaf, 0xf3, 0x14, 0xe5, 0x3f, 0xbb, 0xeb, 0x3d, 0x37,
	0x64, 0x85, 0x7c, 0x82, 0xcd, 0x21, 0x8b, 0x17, 0xe7, 0xd3, 0x89, 0x22, 0xff, 0xe5, 0x5e, 0xeb,
	0x39, 0xed, 0xee, 0x95, 0xc9, 0x2c, 0x6c, 0x00, 0x3b, 0xd7, 0x69, 0xc8, 0x34, 0x2f, 0x14, 0xd2,
	0xc9, 0x3d, 0xb1, 0x19, 0xdd, 0x27, 0x98, 0x04, 0x00, 0xa6, 0x2f, 0x28, 0xae, 0x22, 0x5b, 0x41,
	0xb6, 0xba, 0x6e, 0x44, 0x14, 0x76, 0x49, 0x79, 0xfc, 0xb1, 0x7f, 0x5f, 0x61, 0x7b, 0x1c, 0x69,
	0x94, 0xef, 0xe4, 0xd1, 0x8e, 0xd6, 0xff, 0x65, 0xb7, 0xe7, 0x35, 0x16, 0x34, 0x3e, 0x79, 0x0b,
	0x7e, 0xc2, 0x75, 0x71, 0x19, 0x66, 0xeb, 0xd1, 0xec, 0x43, 0x17, 0xf1, 0x7d, 0x03, 0xd7, 0xe1,
	0xc7, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x41, 0xd7, 0x53, 0x6b, 0xa7, 0x05, 0x00, 0x00,
}
