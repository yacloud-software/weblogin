// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/ifttt/ifttt.proto
// DO NOT EDIT!

/*
Package ifttt is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/ifttt/ifttt.proto

It has these top-level messages:
	StandardRequest
	StandardResponse
	AuthRequest
	AuthResponse
	BrightnessRequest
*/
package ifttt

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// setup ifttt applet like so:
// URL https://www.conradwood.net/ifttt/[rpcname]
// BODY postdata: "TextField: [TextField]"
type StandardRequest struct {
	TextField string `protobuf:"bytes,1,opt,name=TextField" json:"TextField,omitempty"`
	Secret    string `protobuf:"bytes,2,opt,name=Secret" json:"Secret,omitempty"`
	Origin    string `protobuf:"bytes,3,opt,name=Origin" json:"Origin,omitempty"`
}

func (m *StandardRequest) Reset()                    { *m = StandardRequest{} }
func (m *StandardRequest) String() string            { return proto.CompactTextString(m) }
func (*StandardRequest) ProtoMessage()               {}
func (*StandardRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *StandardRequest) GetTextField() string {
	if m != nil {
		return m.TextField
	}
	return ""
}

func (m *StandardRequest) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *StandardRequest) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

type StandardResponse struct {
	Response string `protobuf:"bytes,1,opt,name=Response" json:"Response,omitempty"`
}

func (m *StandardResponse) Reset()                    { *m = StandardResponse{} }
func (m *StandardResponse) String() string            { return proto.CompactTextString(m) }
func (*StandardResponse) ProtoMessage()               {}
func (*StandardResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StandardResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type AuthRequest struct {
	Foo string `protobuf:"bytes,1,opt,name=Foo" json:"Foo,omitempty"`
}

func (m *AuthRequest) Reset()                    { *m = AuthRequest{} }
func (m *AuthRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthRequest) ProtoMessage()               {}
func (*AuthRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AuthRequest) GetFoo() string {
	if m != nil {
		return m.Foo
	}
	return ""
}

type AuthResponse struct {
	Foo string `protobuf:"bytes,1,opt,name=Foo" json:"Foo,omitempty"`
}

func (m *AuthResponse) Reset()                    { *m = AuthResponse{} }
func (m *AuthResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthResponse) ProtoMessage()               {}
func (*AuthResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AuthResponse) GetFoo() string {
	if m != nil {
		return m.Foo
	}
	return ""
}

type BrightnessRequest struct {
	Brightness uint32 `protobuf:"varint,1,opt,name=Brightness" json:"Brightness,omitempty"`
}

func (m *BrightnessRequest) Reset()                    { *m = BrightnessRequest{} }
func (m *BrightnessRequest) String() string            { return proto.CompactTextString(m) }
func (*BrightnessRequest) ProtoMessage()               {}
func (*BrightnessRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BrightnessRequest) GetBrightness() uint32 {
	if m != nil {
		return m.Brightness
	}
	return 0
}

func init() {
	proto.RegisterType((*StandardRequest)(nil), "ifttt.StandardRequest")
	proto.RegisterType((*StandardResponse)(nil), "ifttt.StandardResponse")
	proto.RegisterType((*AuthRequest)(nil), "ifttt.AuthRequest")
	proto.RegisterType((*AuthResponse)(nil), "ifttt.AuthResponse")
	proto.RegisterType((*BrightnessRequest)(nil), "ifttt.BrightnessRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IFTTTService service

type IFTTTServiceClient interface {
	// turn heating up or down
	Heating(ctx context.Context, in *StandardRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	// turn cnw desk lights on/off
	DeskLights(ctx context.Context, in *StandardRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	// turn pennys lights on or off
	PennyLights(ctx context.Context, in *StandardRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	// turn the fairylights in the garden on or off
	FairyLights(ctx context.Context, in *StandardRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	// turn the fairylights in the garden on or off
	ChristmasStar(ctx context.Context, in *StandardRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	// turn stuff off we're going to bed
	GoodNight(ctx context.Context, in *StandardRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	// turn my singingcat leds on off or colour (in study/max room)
	MyLights(ctx context.Context, in *StandardRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	// turn the singingcat leds on off or colour
	SingingCat(ctx context.Context, in *StandardRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	// turn the nanoleafs on off
	Nanoleaf(ctx context.Context, in *StandardRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	// add sth to the shopping list
	Shopping(ctx context.Context, in *StandardRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	// control teakettle
	Kettle(ctx context.Context, in *StandardRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	// not really implemented
	Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	// more generic version of all the above
	AtHome(ctx context.Context, in *StandardRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	// set brightness
	SetBrightness(ctx context.Context, in *BrightnessRequest, opts ...grpc.CallOption) (*StandardResponse, error)
}

type iFTTTServiceClient struct {
	cc *grpc.ClientConn
}

func NewIFTTTServiceClient(cc *grpc.ClientConn) IFTTTServiceClient {
	return &iFTTTServiceClient{cc}
}

func (c *iFTTTServiceClient) Heating(ctx context.Context, in *StandardRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := grpc.Invoke(ctx, "/ifttt.IFTTTService/Heating", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iFTTTServiceClient) DeskLights(ctx context.Context, in *StandardRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := grpc.Invoke(ctx, "/ifttt.IFTTTService/DeskLights", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iFTTTServiceClient) PennyLights(ctx context.Context, in *StandardRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := grpc.Invoke(ctx, "/ifttt.IFTTTService/PennyLights", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iFTTTServiceClient) FairyLights(ctx context.Context, in *StandardRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := grpc.Invoke(ctx, "/ifttt.IFTTTService/FairyLights", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iFTTTServiceClient) ChristmasStar(ctx context.Context, in *StandardRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := grpc.Invoke(ctx, "/ifttt.IFTTTService/ChristmasStar", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iFTTTServiceClient) GoodNight(ctx context.Context, in *StandardRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := grpc.Invoke(ctx, "/ifttt.IFTTTService/GoodNight", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iFTTTServiceClient) MyLights(ctx context.Context, in *StandardRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := grpc.Invoke(ctx, "/ifttt.IFTTTService/MyLights", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iFTTTServiceClient) SingingCat(ctx context.Context, in *StandardRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := grpc.Invoke(ctx, "/ifttt.IFTTTService/SingingCat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iFTTTServiceClient) Nanoleaf(ctx context.Context, in *StandardRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := grpc.Invoke(ctx, "/ifttt.IFTTTService/Nanoleaf", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iFTTTServiceClient) Shopping(ctx context.Context, in *StandardRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := grpc.Invoke(ctx, "/ifttt.IFTTTService/Shopping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iFTTTServiceClient) Kettle(ctx context.Context, in *StandardRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := grpc.Invoke(ctx, "/ifttt.IFTTTService/Kettle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iFTTTServiceClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := grpc.Invoke(ctx, "/ifttt.IFTTTService/Auth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iFTTTServiceClient) AtHome(ctx context.Context, in *StandardRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := grpc.Invoke(ctx, "/ifttt.IFTTTService/AtHome", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iFTTTServiceClient) SetBrightness(ctx context.Context, in *BrightnessRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := grpc.Invoke(ctx, "/ifttt.IFTTTService/SetBrightness", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IFTTTService service

type IFTTTServiceServer interface {
	// turn heating up or down
	Heating(context.Context, *StandardRequest) (*StandardResponse, error)
	// turn cnw desk lights on/off
	DeskLights(context.Context, *StandardRequest) (*StandardResponse, error)
	// turn pennys lights on or off
	PennyLights(context.Context, *StandardRequest) (*StandardResponse, error)
	// turn the fairylights in the garden on or off
	FairyLights(context.Context, *StandardRequest) (*StandardResponse, error)
	// turn the fairylights in the garden on or off
	ChristmasStar(context.Context, *StandardRequest) (*StandardResponse, error)
	// turn stuff off we're going to bed
	GoodNight(context.Context, *StandardRequest) (*StandardResponse, error)
	// turn my singingcat leds on off or colour (in study/max room)
	MyLights(context.Context, *StandardRequest) (*StandardResponse, error)
	// turn the singingcat leds on off or colour
	SingingCat(context.Context, *StandardRequest) (*StandardResponse, error)
	// turn the nanoleafs on off
	Nanoleaf(context.Context, *StandardRequest) (*StandardResponse, error)
	// add sth to the shopping list
	Shopping(context.Context, *StandardRequest) (*StandardResponse, error)
	// control teakettle
	Kettle(context.Context, *StandardRequest) (*StandardResponse, error)
	// not really implemented
	Auth(context.Context, *AuthRequest) (*AuthResponse, error)
	// more generic version of all the above
	AtHome(context.Context, *StandardRequest) (*StandardResponse, error)
	// set brightness
	SetBrightness(context.Context, *BrightnessRequest) (*StandardResponse, error)
}

func RegisterIFTTTServiceServer(s *grpc.Server, srv IFTTTServiceServer) {
	s.RegisterService(&_IFTTTService_serviceDesc, srv)
}

func _IFTTTService_Heating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StandardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IFTTTServiceServer).Heating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ifttt.IFTTTService/Heating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IFTTTServiceServer).Heating(ctx, req.(*StandardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IFTTTService_DeskLights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StandardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IFTTTServiceServer).DeskLights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ifttt.IFTTTService/DeskLights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IFTTTServiceServer).DeskLights(ctx, req.(*StandardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IFTTTService_PennyLights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StandardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IFTTTServiceServer).PennyLights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ifttt.IFTTTService/PennyLights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IFTTTServiceServer).PennyLights(ctx, req.(*StandardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IFTTTService_FairyLights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StandardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IFTTTServiceServer).FairyLights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ifttt.IFTTTService/FairyLights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IFTTTServiceServer).FairyLights(ctx, req.(*StandardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IFTTTService_ChristmasStar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StandardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IFTTTServiceServer).ChristmasStar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ifttt.IFTTTService/ChristmasStar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IFTTTServiceServer).ChristmasStar(ctx, req.(*StandardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IFTTTService_GoodNight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StandardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IFTTTServiceServer).GoodNight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ifttt.IFTTTService/GoodNight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IFTTTServiceServer).GoodNight(ctx, req.(*StandardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IFTTTService_MyLights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StandardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IFTTTServiceServer).MyLights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ifttt.IFTTTService/MyLights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IFTTTServiceServer).MyLights(ctx, req.(*StandardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IFTTTService_SingingCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StandardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IFTTTServiceServer).SingingCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ifttt.IFTTTService/SingingCat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IFTTTServiceServer).SingingCat(ctx, req.(*StandardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IFTTTService_Nanoleaf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StandardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IFTTTServiceServer).Nanoleaf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ifttt.IFTTTService/Nanoleaf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IFTTTServiceServer).Nanoleaf(ctx, req.(*StandardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IFTTTService_Shopping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StandardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IFTTTServiceServer).Shopping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ifttt.IFTTTService/Shopping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IFTTTServiceServer).Shopping(ctx, req.(*StandardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IFTTTService_Kettle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StandardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IFTTTServiceServer).Kettle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ifttt.IFTTTService/Kettle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IFTTTServiceServer).Kettle(ctx, req.(*StandardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IFTTTService_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IFTTTServiceServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ifttt.IFTTTService/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IFTTTServiceServer).Auth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IFTTTService_AtHome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StandardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IFTTTServiceServer).AtHome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ifttt.IFTTTService/AtHome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IFTTTServiceServer).AtHome(ctx, req.(*StandardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IFTTTService_SetBrightness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrightnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IFTTTServiceServer).SetBrightness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ifttt.IFTTTService/SetBrightness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IFTTTServiceServer).SetBrightness(ctx, req.(*BrightnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IFTTTService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ifttt.IFTTTService",
	HandlerType: (*IFTTTServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heating",
			Handler:    _IFTTTService_Heating_Handler,
		},
		{
			MethodName: "DeskLights",
			Handler:    _IFTTTService_DeskLights_Handler,
		},
		{
			MethodName: "PennyLights",
			Handler:    _IFTTTService_PennyLights_Handler,
		},
		{
			MethodName: "FairyLights",
			Handler:    _IFTTTService_FairyLights_Handler,
		},
		{
			MethodName: "ChristmasStar",
			Handler:    _IFTTTService_ChristmasStar_Handler,
		},
		{
			MethodName: "GoodNight",
			Handler:    _IFTTTService_GoodNight_Handler,
		},
		{
			MethodName: "MyLights",
			Handler:    _IFTTTService_MyLights_Handler,
		},
		{
			MethodName: "SingingCat",
			Handler:    _IFTTTService_SingingCat_Handler,
		},
		{
			MethodName: "Nanoleaf",
			Handler:    _IFTTTService_Nanoleaf_Handler,
		},
		{
			MethodName: "Shopping",
			Handler:    _IFTTTService_Shopping_Handler,
		},
		{
			MethodName: "Kettle",
			Handler:    _IFTTTService_Kettle_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _IFTTTService_Auth_Handler,
		},
		{
			MethodName: "AtHome",
			Handler:    _IFTTTService_AtHome_Handler,
		},
		{
			MethodName: "SetBrightness",
			Handler:    _IFTTTService_SetBrightness_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/ifttt/ifttt.proto",
}

func init() { proto.RegisterFile("golang.conradwood.net/apis/ifttt/ifttt.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x54, 0x5b, 0xaf, 0xd2, 0x40,
	0x10, 0xce, 0xf1, 0x68, 0x3d, 0xcc, 0x81, 0x88, 0x6b, 0x82, 0x0d, 0x31, 0x4a, 0xfa, 0xe4, 0x83,
	0x29, 0x89, 0x3c, 0x79, 0xc1, 0x08, 0x98, 0x8a, 0x51, 0xd1, 0xd0, 0xbe, 0x9b, 0x95, 0x0e, 0xed,
	0xc6, 0xb2, 0x5b, 0x77, 0x07, 0x2f, 0x7f, 0xd9, 0x5f, 0x61, 0xda, 0x2e, 0x16, 0x25, 0x3e, 0xb4,
	0xe7, 0xa5, 0xd9, 0xf9, 0xfa, 0x5d, 0x26, 0x9b, 0x9d, 0x81, 0x47, 0x89, 0xca, 0xb8, 0x4c, 0xfc,
	0x8d, 0x92, 0x9a, 0xc7, 0xdf, 0x95, 0x8a, 0x7d, 0x89, 0x34, 0xe6, 0xb9, 0x30, 0x63, 0xb1, 0x25,
	0xa2, 0xea, 0xeb, 0xe7, 0x5a, 0x91, 0x62, 0x37, 0xca, 0xc2, 0xfb, 0x04, 0xb7, 0x42, 0xe2, 0x32,
	0xe6, 0x3a, 0x5e, 0xe3, 0xd7, 0x3d, 0x1a, 0x62, 0xf7, 0xa0, 0x13, 0xe1, 0x0f, 0x0a, 0x04, 0x66,
	0xb1, 0x7b, 0x36, 0x3a, 0x7b, 0xd8, 0x59, 0xd7, 0x00, 0x1b, 0x80, 0x13, 0xe2, 0x46, 0x23, 0xb9,
	0xd7, 0xca, 0x5f, 0xb6, 0x2a, 0xf0, 0x0f, 0x5a, 0x24, 0x42, 0xba, 0xe7, 0x15, 0x5e, 0x55, 0x9e,
	0x0f, 0xfd, 0x3a, 0xc0, 0xe4, 0x4a, 0x1a, 0x64, 0x43, 0xb8, 0x38, 0x9c, 0x6d, 0xc0, 0x9f, 0xda,
	0x7b, 0x00, 0x97, 0xb3, 0x3d, 0xa5, 0x87, 0x66, 0xfa, 0x70, 0x1e, 0x28, 0x65, 0x59, 0xc5, 0xd1,
	0x1b, 0x41, 0xb7, 0x22, 0x58, 0xb3, 0x53, 0xc6, 0x04, 0x6e, 0xcf, 0xb5, 0x48, 0x52, 0x92, 0x68,
	0xcc, 0xc1, 0xe8, 0x3e, 0x40, 0x0d, 0x96, 0xec, 0xde, 0xfa, 0x08, 0x79, 0xfc, 0xcb, 0x81, 0xee,
	0x9b, 0x20, 0x8a, 0xa2, 0x10, 0xf5, 0x37, 0xb1, 0x41, 0xf6, 0x14, 0x6e, 0x2e, 0x91, 0x93, 0x90,
	0x09, 0x1b, 0xf8, 0xd5, 0xcd, 0xfd, 0x73, 0x53, 0xc3, 0xbb, 0x27, 0xb8, 0xed, 0x69, 0x0a, 0xf0,
	0x0a, 0xcd, 0x97, 0x77, 0x85, 0xbb, 0x69, 0x2e, 0x7f, 0x01, 0x97, 0x1f, 0x51, 0xca, 0x9f, 0x57,
	0xd0, 0x07, 0x5c, 0xe8, 0xd6, 0xfa, 0x97, 0xd0, 0x5b, 0xa4, 0x5a, 0x18, 0xda, 0x71, 0x13, 0x12,
	0xd7, 0xcd, 0x1d, 0x9e, 0x43, 0xe7, 0xb5, 0x52, 0xf1, 0xaa, 0x68, 0xa0, 0xb9, 0xfa, 0x19, 0x5c,
	0xbc, 0x6f, 0xdd, 0xfc, 0x14, 0x20, 0x14, 0x32, 0x11, 0x32, 0x59, 0xf0, 0x76, 0xd9, 0x2b, 0x2e,
	0x55, 0x86, 0x7c, 0xdb, 0x4a, 0x1c, 0xa6, 0x2a, 0xcf, 0x5b, 0x3d, 0x9a, 0x27, 0xe0, 0xbc, 0x45,
	0xa2, 0x0c, 0x9b, 0x4b, 0xc7, 0x70, 0xbd, 0x98, 0x09, 0xc6, 0x2c, 0xe1, 0x68, 0x82, 0x86, 0x77,
	0xfe, 0xc2, 0xea, 0xac, 0x19, 0x2d, 0xd5, 0xae, 0x45, 0xd6, 0x1c, 0x7a, 0x21, 0x52, 0x3d, 0x39,
	0xcc, 0xb5, 0xcc, 0x93, 0x99, 0xfb, 0xaf, 0xc7, 0xdc, 0x83, 0x91, 0x44, 0x3a, 0xde, 0x54, 0x76,
	0x77, 0x15, 0xcb, 0xaa, 0x12, 0x7d, 0x76, 0xca, 0x3d, 0x35, 0xf9, 0x1d, 0x00, 0x00, 0xff, 0xff,
	0x51, 0x15, 0xcb, 0x64, 0xd7, 0x04, 0x00, 0x00,
}
