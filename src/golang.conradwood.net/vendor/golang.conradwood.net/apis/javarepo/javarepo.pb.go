// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/javarepo/javarepo.proto
// DO NOT EDIT!

/*
Package javarepo is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/javarepo/javarepo.proto

It has these top-level messages:
	Repository
	RepositoryList
*/
package javarepo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"
import h2gproxy "golang.conradwood.net/apis/h2gproxy"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Repository struct {
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
}

func (m *Repository) Reset()                    { *m = Repository{} }
func (m *Repository) String() string            { return proto.CompactTextString(m) }
func (*Repository) ProtoMessage()               {}
func (*Repository) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Repository) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RepositoryList struct {
	Repositories []*Repository `protobuf:"bytes,1,rep,name=Repositories" json:"Repositories,omitempty"`
}

func (m *RepositoryList) Reset()                    { *m = RepositoryList{} }
func (m *RepositoryList) String() string            { return proto.CompactTextString(m) }
func (*RepositoryList) ProtoMessage()               {}
func (*RepositoryList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RepositoryList) GetRepositories() []*Repository {
	if m != nil {
		return m.Repositories
	}
	return nil
}

func init() {
	proto.RegisterType((*Repository)(nil), "javarepo.Repository")
	proto.RegisterType((*RepositoryList)(nil), "javarepo.RepositoryList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for JavaRepo service

type JavaRepoClient interface {
	ListRepositories(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*RepositoryList, error)
	// download maven stuff
	StreamHTTP(ctx context.Context, in *h2gproxy.StreamRequest, opts ...grpc.CallOption) (JavaRepo_StreamHTTPClient, error)
}

type javaRepoClient struct {
	cc *grpc.ClientConn
}

func NewJavaRepoClient(cc *grpc.ClientConn) JavaRepoClient {
	return &javaRepoClient{cc}
}

func (c *javaRepoClient) ListRepositories(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*RepositoryList, error) {
	out := new(RepositoryList)
	err := grpc.Invoke(ctx, "/javarepo.JavaRepo/ListRepositories", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *javaRepoClient) StreamHTTP(ctx context.Context, in *h2gproxy.StreamRequest, opts ...grpc.CallOption) (JavaRepo_StreamHTTPClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_JavaRepo_serviceDesc.Streams[0], c.cc, "/javarepo.JavaRepo/StreamHTTP", opts...)
	if err != nil {
		return nil, err
	}
	x := &javaRepoStreamHTTPClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JavaRepo_StreamHTTPClient interface {
	Recv() (*h2gproxy.StreamDataResponse, error)
	grpc.ClientStream
}

type javaRepoStreamHTTPClient struct {
	grpc.ClientStream
}

func (x *javaRepoStreamHTTPClient) Recv() (*h2gproxy.StreamDataResponse, error) {
	m := new(h2gproxy.StreamDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for JavaRepo service

type JavaRepoServer interface {
	ListRepositories(context.Context, *common.Void) (*RepositoryList, error)
	// download maven stuff
	StreamHTTP(*h2gproxy.StreamRequest, JavaRepo_StreamHTTPServer) error
}

func RegisterJavaRepoServer(s *grpc.Server, srv JavaRepoServer) {
	s.RegisterService(&_JavaRepo_serviceDesc, srv)
}

func _JavaRepo_ListRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JavaRepoServer).ListRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/javarepo.JavaRepo/ListRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JavaRepoServer).ListRepositories(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _JavaRepo_StreamHTTP_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(h2gproxy.StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JavaRepoServer).StreamHTTP(m, &javaRepoStreamHTTPServer{stream})
}

type JavaRepo_StreamHTTPServer interface {
	Send(*h2gproxy.StreamDataResponse) error
	grpc.ServerStream
}

type javaRepoStreamHTTPServer struct {
	grpc.ServerStream
}

func (x *javaRepoStreamHTTPServer) Send(m *h2gproxy.StreamDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _JavaRepo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "javarepo.JavaRepo",
	HandlerType: (*JavaRepoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRepositories",
			Handler:    _JavaRepo_ListRepositories_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamHTTP",
			Handler:       _JavaRepo_StreamHTTP_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "golang.conradwood.net/apis/javarepo/javarepo.proto",
}

func init() { proto.RegisterFile("golang.conradwood.net/apis/javarepo/javarepo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x50, 0x4f, 0x4b, 0x3b, 0x31,
	0x10, 0x65, 0xf9, 0xfd, 0x90, 0x3a, 0x16, 0x91, 0x20, 0xb8, 0x2c, 0x1e, 0x96, 0x8a, 0xd0, 0x53,
	0x2a, 0xeb, 0x45, 0x3c, 0x8a, 0x82, 0x14, 0x11, 0x89, 0xc5, 0xfb, 0xd8, 0x1d, 0xd6, 0x88, 0x9b,
	0x89, 0x49, 0xac, 0xf6, 0x43, 0xf8, 0x9d, 0x65, 0xff, 0x98, 0x56, 0x91, 0x9e, 0xf2, 0xf2, 0xf2,
	0xde, 0x4c, 0xde, 0x83, 0xa2, 0xe2, 0x17, 0x34, 0x95, 0x9c, 0xb3, 0x71, 0x58, 0xbe, 0x33, 0x97,
	0xd2, 0x50, 0x98, 0xa0, 0xd5, 0x7e, 0xf2, 0x8c, 0x0b, 0x74, 0x64, 0x39, 0x02, 0x69, 0x1d, 0x07,
	0x16, 0x83, 0xef, 0x7b, 0x26, 0x37, 0xb8, 0xe7, 0x5c, 0xd7, 0x6c, 0xfa, 0xa3, 0x73, 0x66, 0x9b,
	0xb6, 0x3d, 0x15, 0x95, 0x75, 0xfc, 0xb1, 0x8c, 0xa0, 0xf3, 0x8c, 0x72, 0x00, 0x45, 0x96, 0xbd,
	0x0e, 0xec, 0x96, 0x42, 0xc0, 0xff, 0x5b, 0xac, 0x29, 0x4d, 0xf2, 0x64, 0xbc, 0xad, 0x5a, 0x3c,
	0x9a, 0xc2, 0xee, 0x4a, 0x71, 0xa3, 0x7d, 0x10, 0x67, 0x30, 0x8c, 0x8c, 0x26, 0x9f, 0x26, 0xf9,
	0xbf, 0xf1, 0x4e, 0xb1, 0x2f, 0x63, 0x90, 0x95, 0x5e, 0xfd, 0x50, 0x16, 0x9f, 0x09, 0x0c, 0xa6,
	0xb8, 0xc0, 0x86, 0x14, 0xe7, 0xb0, 0xd7, 0x8c, 0x5b, 0x17, 0x88, 0xa1, 0xec, 0x13, 0x3d, 0xb0,
	0x2e, 0xb3, 0xf4, 0xaf, 0x91, 0xed, 0x17, 0xae, 0x00, 0xee, 0x83, 0x23, 0xac, 0xaf, 0x67, 0xb3,
	0x3b, 0x71, 0x20, 0x63, 0xaa, 0x8e, 0x55, 0xf4, 0xfa, 0x46, 0x3e, 0x64, 0x87, 0xbf, 0x1f, 0x2e,
	0x31, 0xa0, 0x22, 0x6f, 0xd9, 0x78, 0x3a, 0x49, 0x2e, 0x8e, 0xe1, 0xc8, 0x50, 0x58, 0x2f, 0xac,
	0xaf, 0xb0, 0xe9, 0x2c, 0x2e, 0x7f, 0xdc, 0x6a, 0xbb, 0x3a, 0xfd, 0x0a, 0x00, 0x00, 0xff, 0xff,
	0xbf, 0x60, 0x39, 0xae, 0xcf, 0x01, 0x00, 0x00,
}
