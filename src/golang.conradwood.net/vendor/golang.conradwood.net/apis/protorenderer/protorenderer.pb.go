// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/protorenderer/protorenderer.proto
// DO NOT EDIT!

/*
Package protorenderer is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/protorenderer/protorenderer.proto

It has these top-level messages:
	DBProtoFile
	PersistID
	AddProtoRequest
	AddProtoResponse
	ProtoFile
	MetaProtoFile
	Package
	Service
	RPC
	Message
	Field
	PackageIDRequest
	ID
	MessageIDRequest
	FilenameList
	FileRequest
	File
	Version
	ProtocRequest
	FlatPackage
	FlatPackageList
	CompileRequest
	CompileResult
	CompiledFile
	DeleteRequest
	FindServiceByNameRequest
	ServiceList
	ServiceResponse
*/
package protorenderer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"
import h2gproxy "golang.conradwood.net/apis/h2gproxy"
import google_protobuf "github.com/golang/protobuf/protoc-gen-go/descriptor"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// keeping a file in database with metadata
type DBProtoFile struct {
	ID           uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	RepositoryID uint64 `protobuf:"varint,3,opt,name=RepositoryID" json:"RepositoryID,omitempty"`
}

func (m *DBProtoFile) Reset()                    { *m = DBProtoFile{} }
func (m *DBProtoFile) String() string            { return proto.CompactTextString(m) }
func (*DBProtoFile) ProtoMessage()               {}
func (*DBProtoFile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DBProtoFile) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *DBProtoFile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DBProtoFile) GetRepositoryID() uint64 {
	if m != nil {
		return m.RepositoryID
	}
	return 0
}

// simple database mapping strategy to keep persistent IDs between restarts
type PersistID struct {
	ID  uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Key string `protobuf:"bytes,2,opt,name=Key" json:"Key,omitempty"`
}

func (m *PersistID) Reset()                    { *m = PersistID{} }
func (m *PersistID) String() string            { return proto.CompactTextString(m) }
func (*PersistID) ProtoMessage()               {}
func (*PersistID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PersistID) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *PersistID) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// add a single proto to the proto repo
type AddProtoRequest struct {
	Name         string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Content      string `protobuf:"bytes,2,opt,name=Content" json:"Content,omitempty"`
	RepositoryID uint64 `protobuf:"varint,3,opt,name=RepositoryID" json:"RepositoryID,omitempty"`
}

func (m *AddProtoRequest) Reset()                    { *m = AddProtoRequest{} }
func (m *AddProtoRequest) String() string            { return proto.CompactTextString(m) }
func (*AddProtoRequest) ProtoMessage()               {}
func (*AddProtoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AddProtoRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddProtoRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *AddProtoRequest) GetRepositoryID() uint64 {
	if m != nil {
		return m.RepositoryID
	}
	return 0
}

// response to adding a single proto
type AddProtoResponse struct {
	Version      uint64   `protobuf:"varint,1,opt,name=Version" json:"Version,omitempty"`
	ProtoVersion uint64   `protobuf:"varint,2,opt,name=ProtoVersion" json:"ProtoVersion,omitempty"`
	GoPackage    string   `protobuf:"bytes,3,opt,name=GoPackage" json:"GoPackage,omitempty"`
	JavaPackage  string   `protobuf:"bytes,4,opt,name=JavaPackage" json:"JavaPackage,omitempty"`
	Imports      []string `protobuf:"bytes,5,rep,name=Imports" json:"Imports,omitempty"`
}

func (m *AddProtoResponse) Reset()                    { *m = AddProtoResponse{} }
func (m *AddProtoResponse) String() string            { return proto.CompactTextString(m) }
func (*AddProtoResponse) ProtoMessage()               {}
func (*AddProtoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AddProtoResponse) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *AddProtoResponse) GetProtoVersion() uint64 {
	if m != nil {
		return m.ProtoVersion
	}
	return 0
}

func (m *AddProtoResponse) GetGoPackage() string {
	if m != nil {
		return m.GoPackage
	}
	return ""
}

func (m *AddProtoResponse) GetJavaPackage() string {
	if m != nil {
		return m.JavaPackage
	}
	return ""
}

func (m *AddProtoResponse) GetImports() []string {
	if m != nil {
		return m.Imports
	}
	return nil
}

type ProtoFile struct {
	GoPackage   string   `protobuf:"bytes,1,opt,name=GoPackage" json:"GoPackage,omitempty"`
	JavaPackage string   `protobuf:"bytes,2,opt,name=JavaPackage" json:"JavaPackage,omitempty"`
	Filename    string   `protobuf:"bytes,3,opt,name=Filename" json:"Filename,omitempty"`
	Content     string   `protobuf:"bytes,4,opt,name=Content" json:"Content,omitempty"`
	Imports     []string `protobuf:"bytes,5,rep,name=Imports" json:"Imports,omitempty"`
	//
	// metacompiler adds ingredients here at the end of its compile process.
	// this provides a backreference to the 'meta-compiled' details for each protofile
	Meta         *MetaProtoFile `protobuf:"bytes,6,opt,name=Meta" json:"Meta,omitempty"`
	RepositoryID uint64         `protobuf:"varint,7,opt,name=RepositoryID" json:"RepositoryID,omitempty"`
}

func (m *ProtoFile) Reset()                    { *m = ProtoFile{} }
func (m *ProtoFile) String() string            { return proto.CompactTextString(m) }
func (*ProtoFile) ProtoMessage()               {}
func (*ProtoFile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ProtoFile) GetGoPackage() string {
	if m != nil {
		return m.GoPackage
	}
	return ""
}

func (m *ProtoFile) GetJavaPackage() string {
	if m != nil {
		return m.JavaPackage
	}
	return ""
}

func (m *ProtoFile) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *ProtoFile) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ProtoFile) GetImports() []string {
	if m != nil {
		return m.Imports
	}
	return nil
}

func (m *ProtoFile) GetMeta() *MetaProtoFile {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ProtoFile) GetRepositoryID() uint64 {
	if m != nil {
		return m.RepositoryID
	}
	return 0
}

// link between "meta" and our protofiles.
type MetaProtoFile struct {
	// the package this protofile is in
	PackageID string `protobuf:"bytes,1,opt,name=PackageID" json:"PackageID,omitempty"`
	// the "package" meta has parsed
	Package *Package `protobuf:"bytes,2,opt,name=Package" json:"Package,omitempty"`
}

func (m *MetaProtoFile) Reset()                    { *m = MetaProtoFile{} }
func (m *MetaProtoFile) String() string            { return proto.CompactTextString(m) }
func (*MetaProtoFile) ProtoMessage()               {}
func (*MetaProtoFile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MetaProtoFile) GetPackageID() string {
	if m != nil {
		return m.PackageID
	}
	return ""
}

func (m *MetaProtoFile) GetPackage() *Package {
	if m != nil {
		return m.Package
	}
	return nil
}

// package has an ID which we attempt to keep stable
// suitable for semi-shortterm references, e.g. html links
type Package struct {
	ID       string     `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Name     string     `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Prefix   string     `protobuf:"bytes,3,opt,name=Prefix" json:"Prefix,omitempty"`
	Services []*Service `protobuf:"bytes,4,rep,name=Services" json:"Services,omitempty"`
	Messages []*Message `protobuf:"bytes,5,rep,name=Messages" json:"Messages,omitempty"`
}

func (m *Package) Reset()                    { *m = Package{} }
func (m *Package) String() string            { return proto.CompactTextString(m) }
func (*Package) ProtoMessage()               {}
func (*Package) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Package) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Package) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Package) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *Package) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *Package) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

type Service struct {
	ID        string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	RPCs      []*RPC `protobuf:"bytes,3,rep,name=RPCs" json:"RPCs,omitempty"`
	Comment   string `protobuf:"bytes,4,opt,name=Comment" json:"Comment,omitempty"`
	PackageID string `protobuf:"bytes,5,opt,name=PackageID" json:"PackageID,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Service) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Service) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Service) GetRPCs() []*RPC {
	if m != nil {
		return m.RPCs
	}
	return nil
}

func (m *Service) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *Service) GetPackageID() string {
	if m != nil {
		return m.PackageID
	}
	return ""
}

type RPC struct {
	ID         string   `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Name       string   `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Input      *Message `protobuf:"bytes,3,opt,name=Input" json:"Input,omitempty"`
	Output     *Message `protobuf:"bytes,4,opt,name=Output" json:"Output,omitempty"`
	Comment    string   `protobuf:"bytes,5,opt,name=Comment" json:"Comment,omitempty"`
	ServiceID  string   `protobuf:"bytes,6,opt,name=ServiceID" json:"ServiceID,omitempty"`
	Deprecated bool     `protobuf:"varint,7,opt,name=Deprecated" json:"Deprecated,omitempty"`
}

func (m *RPC) Reset()                    { *m = RPC{} }
func (m *RPC) String() string            { return proto.CompactTextString(m) }
func (*RPC) ProtoMessage()               {}
func (*RPC) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RPC) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *RPC) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RPC) GetInput() *Message {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *RPC) GetOutput() *Message {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *RPC) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *RPC) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

func (m *RPC) GetDeprecated() bool {
	if m != nil {
		return m.Deprecated
	}
	return false
}

type Message struct {
	ID        string   `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Name      string   `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Comment   string   `protobuf:"bytes,3,opt,name=Comment" json:"Comment,omitempty"`
	PackageID string   `protobuf:"bytes,4,opt,name=PackageID" json:"PackageID,omitempty"`
	Fields    []*Field `protobuf:"bytes,5,rep,name=Fields" json:"Fields,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Message) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Message) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Message) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *Message) GetPackageID() string {
	if m != nil {
		return m.PackageID
	}
	return ""
}

func (m *Message) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

type Field struct {
	ID          string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Type        string `protobuf:"bytes,3,opt,name=Type" json:"Type,omitempty"`
	ExtraType   string `protobuf:"bytes,4,opt,name=ExtraType" json:"ExtraType,omitempty"`
	Repeated    bool   `protobuf:"varint,5,opt,name=Repeated" json:"Repeated,omitempty"`
	Required    bool   `protobuf:"varint,6,opt,name=Required" json:"Required,omitempty"`
	Optional    bool   `protobuf:"varint,7,opt,name=Optional" json:"Optional,omitempty"`
	Comment     string `protobuf:"bytes,8,opt,name=Comment" json:"Comment,omitempty"`
	MessageID   string `protobuf:"bytes,9,opt,name=MessageID" json:"MessageID,omitempty"`
	MessageName string `protobuf:"bytes,10,opt,name=MessageName" json:"MessageName,omitempty"`
}

func (m *Field) Reset()                    { *m = Field{} }
func (m *Field) String() string            { return proto.CompactTextString(m) }
func (*Field) ProtoMessage()               {}
func (*Field) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Field) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Field) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Field) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Field) GetExtraType() string {
	if m != nil {
		return m.ExtraType
	}
	return ""
}

func (m *Field) GetRepeated() bool {
	if m != nil {
		return m.Repeated
	}
	return false
}

func (m *Field) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

func (m *Field) GetOptional() bool {
	if m != nil {
		return m.Optional
	}
	return false
}

func (m *Field) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *Field) GetMessageID() string {
	if m != nil {
		return m.MessageID
	}
	return ""
}

func (m *Field) GetMessageName() string {
	if m != nil {
		return m.MessageName
	}
	return ""
}

type PackageIDRequest struct {
	Package string `protobuf:"bytes,1,opt,name=Package" json:"Package,omitempty"`
	Prefix  string `protobuf:"bytes,2,opt,name=Prefix" json:"Prefix,omitempty"`
}

func (m *PackageIDRequest) Reset()                    { *m = PackageIDRequest{} }
func (m *PackageIDRequest) String() string            { return proto.CompactTextString(m) }
func (*PackageIDRequest) ProtoMessage()               {}
func (*PackageIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PackageIDRequest) GetPackage() string {
	if m != nil {
		return m.Package
	}
	return ""
}

func (m *PackageIDRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type ID struct {
	// the actual ID
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *ID) Reset()                    { *m = ID{} }
func (m *ID) String() string            { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()               {}
func (*ID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ID) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type MessageIDRequest struct {
	PackageID   string `protobuf:"bytes,1,opt,name=PackageID" json:"PackageID,omitempty"`
	MessageName string `protobuf:"bytes,2,opt,name=MessageName" json:"MessageName,omitempty"`
}

func (m *MessageIDRequest) Reset()                    { *m = MessageIDRequest{} }
func (m *MessageIDRequest) String() string            { return proto.CompactTextString(m) }
func (*MessageIDRequest) ProtoMessage()               {}
func (*MessageIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *MessageIDRequest) GetPackageID() string {
	if m != nil {
		return m.PackageID
	}
	return ""
}

func (m *MessageIDRequest) GetMessageName() string {
	if m != nil {
		return m.MessageName
	}
	return ""
}

// ****************************************************************
// Stuff for retrieving files
// ***************************************************************
type FilenameList struct {
	Files []string `protobuf:"bytes,1,rep,name=Files" json:"Files,omitempty"`
}

func (m *FilenameList) Reset()                    { *m = FilenameList{} }
func (m *FilenameList) String() string            { return proto.CompactTextString(m) }
func (*FilenameList) ProtoMessage()               {}
func (*FilenameList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *FilenameList) GetFiles() []string {
	if m != nil {
		return m.Files
	}
	return nil
}

type FileRequest struct {
	PackageID *ID    `protobuf:"bytes,1,opt,name=PackageID" json:"PackageID,omitempty"`
	Filename  string `protobuf:"bytes,2,opt,name=Filename" json:"Filename,omitempty"`
}

func (m *FileRequest) Reset()                    { *m = FileRequest{} }
func (m *FileRequest) String() string            { return proto.CompactTextString(m) }
func (*FileRequest) ProtoMessage()               {}
func (*FileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *FileRequest) GetPackageID() *ID {
	if m != nil {
		return m.PackageID
	}
	return nil
}

func (m *FileRequest) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type File struct {
	Content      []byte `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	RepositoryID uint64 `protobuf:"varint,2,opt,name=RepositoryID" json:"RepositoryID,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *File) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *File) GetRepositoryID() uint64 {
	if m != nil {
		return m.RepositoryID
	}
	return 0
}

type Version struct {
	Version      uint64 `protobuf:"varint,1,opt,name=Version" json:"Version,omitempty"`
	Compiling    bool   `protobuf:"varint,2,opt,name=Compiling" json:"Compiling,omitempty"`
	NextVersion  uint64 `protobuf:"varint,3,opt,name=NextVersion" json:"NextVersion,omitempty"`
	ProtoVersion uint64 `protobuf:"varint,4,opt,name=ProtoVersion" json:"ProtoVersion,omitempty"`
}

func (m *Version) Reset()                    { *m = Version{} }
func (m *Version) String() string            { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()               {}
func (*Version) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Version) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Version) GetCompiling() bool {
	if m != nil {
		return m.Compiling
	}
	return false
}

func (m *Version) GetNextVersion() uint64 {
	if m != nil {
		return m.NextVersion
	}
	return 0
}

func (m *Version) GetProtoVersion() uint64 {
	if m != nil {
		return m.ProtoVersion
	}
	return 0
}

type ProtocRequest struct {
	VerifyToken string                                 `protobuf:"bytes,1,opt,name=VerifyToken" json:"VerifyToken,omitempty"`
	ProtoFiles  []*google_protobuf.FileDescriptorProto `protobuf:"bytes,2,rep,name=ProtoFiles" json:"ProtoFiles,omitempty"`
}

func (m *ProtocRequest) Reset()                    { *m = ProtocRequest{} }
func (m *ProtocRequest) String() string            { return proto.CompactTextString(m) }
func (*ProtocRequest) ProtoMessage()               {}
func (*ProtocRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ProtocRequest) GetVerifyToken() string {
	if m != nil {
		return m.VerifyToken
	}
	return ""
}

func (m *ProtocRequest) GetProtoFiles() []*google_protobuf.FileDescriptorProto {
	if m != nil {
		return m.ProtoFiles
	}
	return nil
}

// a package, but without nested objects
type FlatPackage struct {
	ID     string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Prefix string `protobuf:"bytes,3,opt,name=Prefix" json:"Prefix,omitempty"`
}

func (m *FlatPackage) Reset()                    { *m = FlatPackage{} }
func (m *FlatPackage) String() string            { return proto.CompactTextString(m) }
func (*FlatPackage) ProtoMessage()               {}
func (*FlatPackage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *FlatPackage) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *FlatPackage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FlatPackage) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type FlatPackageList struct {
	Packages []*FlatPackage `protobuf:"bytes,1,rep,name=Packages" json:"Packages,omitempty"`
}

func (m *FlatPackageList) Reset()                    { *m = FlatPackageList{} }
func (m *FlatPackageList) String() string            { return proto.CompactTextString(m) }
func (*FlatPackageList) ProtoMessage()               {}
func (*FlatPackageList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *FlatPackageList) GetPackages() []*FlatPackage {
	if m != nil {
		return m.Packages
	}
	return nil
}

type CompileRequest struct {
	AddProtoRequest *AddProtoRequest             `protobuf:"bytes,1,opt,name=AddProtoRequest" json:"AddProtoRequest,omitempty"`
	Languages       []common.ProgrammingLanguage `protobuf:"varint,2,rep,packed,name=Languages,enum=common.ProgrammingLanguage" json:"Languages,omitempty"`
}

func (m *CompileRequest) Reset()                    { *m = CompileRequest{} }
func (m *CompileRequest) String() string            { return proto.CompactTextString(m) }
func (*CompileRequest) ProtoMessage()               {}
func (*CompileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *CompileRequest) GetAddProtoRequest() *AddProtoRequest {
	if m != nil {
		return m.AddProtoRequest
	}
	return nil
}

func (m *CompileRequest) GetLanguages() []common.ProgrammingLanguage {
	if m != nil {
		return m.Languages
	}
	return nil
}

type CompileResult struct {
	SourceFilename string          `protobuf:"bytes,1,opt,name=SourceFilename" json:"SourceFilename,omitempty"`
	CompileError   string          `protobuf:"bytes,2,opt,name=CompileError" json:"CompileError,omitempty"`
	Files          []*CompiledFile `protobuf:"bytes,3,rep,name=Files" json:"Files,omitempty"`
}

func (m *CompileResult) Reset()                    { *m = CompileResult{} }
func (m *CompileResult) String() string            { return proto.CompactTextString(m) }
func (*CompileResult) ProtoMessage()               {}
func (*CompileResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *CompileResult) GetSourceFilename() string {
	if m != nil {
		return m.SourceFilename
	}
	return ""
}

func (m *CompileResult) GetCompileError() string {
	if m != nil {
		return m.CompileError
	}
	return ""
}

func (m *CompileResult) GetFiles() []*CompiledFile {
	if m != nil {
		return m.Files
	}
	return nil
}

type CompiledFile struct {
	Language common.ProgrammingLanguage `protobuf:"varint,1,opt,name=Language,enum=common.ProgrammingLanguage" json:"Language,omitempty"`
	Filename string                     `protobuf:"bytes,2,opt,name=Filename" json:"Filename,omitempty"`
	Content  []byte                     `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (m *CompiledFile) Reset()                    { *m = CompiledFile{} }
func (m *CompiledFile) String() string            { return proto.CompactTextString(m) }
func (*CompiledFile) ProtoMessage()               {}
func (*CompiledFile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *CompiledFile) GetLanguage() common.ProgrammingLanguage {
	if m != nil {
		return m.Language
	}
	return common.ProgrammingLanguage_INVALID
}

func (m *CompiledFile) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *CompiledFile) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type DeleteRequest struct {
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *DeleteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type FindServiceByNameRequest struct {
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
}

func (m *FindServiceByNameRequest) Reset()                    { *m = FindServiceByNameRequest{} }
func (m *FindServiceByNameRequest) String() string            { return proto.CompactTextString(m) }
func (*FindServiceByNameRequest) ProtoMessage()               {}
func (*FindServiceByNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *FindServiceByNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ServiceList struct {
	Services []*ServiceResponse `protobuf:"bytes,1,rep,name=Services" json:"Services,omitempty"`
}

func (m *ServiceList) Reset()                    { *m = ServiceList{} }
func (m *ServiceList) String() string            { return proto.CompactTextString(m) }
func (*ServiceList) ProtoMessage()               {}
func (*ServiceList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *ServiceList) GetServices() []*ServiceResponse {
	if m != nil {
		return m.Services
	}
	return nil
}

type ServiceResponse struct {
	Service     *Service `protobuf:"bytes,1,opt,name=Service" json:"Service,omitempty"`
	Package     *Package `protobuf:"bytes,2,opt,name=Package" json:"Package,omitempty"`
	PackageName string   `protobuf:"bytes,3,opt,name=PackageName" json:"PackageName,omitempty"`
	PackageFQDN string   `protobuf:"bytes,4,opt,name=PackageFQDN" json:"PackageFQDN,omitempty"`
}

func (m *ServiceResponse) Reset()                    { *m = ServiceResponse{} }
func (m *ServiceResponse) String() string            { return proto.CompactTextString(m) }
func (*ServiceResponse) ProtoMessage()               {}
func (*ServiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *ServiceResponse) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *ServiceResponse) GetPackage() *Package {
	if m != nil {
		return m.Package
	}
	return nil
}

func (m *ServiceResponse) GetPackageName() string {
	if m != nil {
		return m.PackageName
	}
	return ""
}

func (m *ServiceResponse) GetPackageFQDN() string {
	if m != nil {
		return m.PackageFQDN
	}
	return ""
}

func init() {
	proto.RegisterType((*DBProtoFile)(nil), "protorenderer.DBProtoFile")
	proto.RegisterType((*PersistID)(nil), "protorenderer.PersistID")
	proto.RegisterType((*AddProtoRequest)(nil), "protorenderer.AddProtoRequest")
	proto.RegisterType((*AddProtoResponse)(nil), "protorenderer.AddProtoResponse")
	proto.RegisterType((*ProtoFile)(nil), "protorenderer.ProtoFile")
	proto.RegisterType((*MetaProtoFile)(nil), "protorenderer.MetaProtoFile")
	proto.RegisterType((*Package)(nil), "protorenderer.Package")
	proto.RegisterType((*Service)(nil), "protorenderer.Service")
	proto.RegisterType((*RPC)(nil), "protorenderer.RPC")
	proto.RegisterType((*Message)(nil), "protorenderer.Message")
	proto.RegisterType((*Field)(nil), "protorenderer.Field")
	proto.RegisterType((*PackageIDRequest)(nil), "protorenderer.PackageIDRequest")
	proto.RegisterType((*ID)(nil), "protorenderer.ID")
	proto.RegisterType((*MessageIDRequest)(nil), "protorenderer.MessageIDRequest")
	proto.RegisterType((*FilenameList)(nil), "protorenderer.FilenameList")
	proto.RegisterType((*FileRequest)(nil), "protorenderer.FileRequest")
	proto.RegisterType((*File)(nil), "protorenderer.File")
	proto.RegisterType((*Version)(nil), "protorenderer.Version")
	proto.RegisterType((*ProtocRequest)(nil), "protorenderer.ProtocRequest")
	proto.RegisterType((*FlatPackage)(nil), "protorenderer.FlatPackage")
	proto.RegisterType((*FlatPackageList)(nil), "protorenderer.FlatPackageList")
	proto.RegisterType((*CompileRequest)(nil), "protorenderer.CompileRequest")
	proto.RegisterType((*CompileResult)(nil), "protorenderer.CompileResult")
	proto.RegisterType((*CompiledFile)(nil), "protorenderer.CompiledFile")
	proto.RegisterType((*DeleteRequest)(nil), "protorenderer.DeleteRequest")
	proto.RegisterType((*FindServiceByNameRequest)(nil), "protorenderer.FindServiceByNameRequest")
	proto.RegisterType((*ServiceList)(nil), "protorenderer.ServiceList")
	proto.RegisterType((*ServiceResponse)(nil), "protorenderer.ServiceResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ProtoRendererService service

type ProtoRendererServiceClient interface {
	// add or update a ".proto" file in the renderers database
	UpdateProto(ctx context.Context, in *AddProtoRequest, opts ...grpc.CallOption) (*AddProtoResponse, error)
	// basic parse ;). Fast, quick no dependency parser
	MiniParser(ctx context.Context, in *AddProtoRequest, opts ...grpc.CallOption) (*ProtoFile, error)
	// we can submit protofiles from protoc to protorenderer server for analysis
	SubmitSource(ctx context.Context, in *ProtocRequest, opts ...grpc.CallOption) (*common.Void, error)
	// download classes, jars, .pb.go files or a tar full of pythons
	StreamHTTP(ctx context.Context, in *h2gproxy.StreamRequest, opts ...grpc.CallOption) (ProtoRendererService_StreamHTTPClient, error)
	// get all packages ("flat", it does not include services/message protos)
	GetPackages(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*FlatPackageList, error)
	// get a specific package (not "flat", it _does_ include services/messages protos)
	GetPackageByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Package, error)
	// get all java class names for a given packageID
	// This is an EXPERIMENTAL API - subject to change.
	// the match between "package" and "namespace" and "filename" is ill-defined. In future
	// The api might return filenames in an abstract naming scheme (or not) and requires
	// more input parameters.
	GetFilesJavaClass(ctx context.Context, in *ID, opts ...grpc.CallOption) (*FilenameList, error)
	// get all .pb.go files for a given package
	GetFilesGO(ctx context.Context, in *ID, opts ...grpc.CallOption) (*FilenameList, error)
	// get all .proto files for a given package
	GetFilesProto(ctx context.Context, in *ID, opts ...grpc.CallOption) (*FilenameList, error)
	// get all .py files for a given package
	GetFilesPython(ctx context.Context, in *ID, opts ...grpc.CallOption) (*FilenameList, error)
	//
	// get a specific file by filename
	// This is an EXPERIMENTAL API - subject to change.
	// the match between "package" and "namespace" and "filename" is ill-defined. In future
	// The api might return filenames in an abstract naming scheme (or not) and requires
	// more input parameters.
	GetFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*File, error)
	// get the current version of the store
	GetVersion(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*Version, error)
	// compile a file, return output(s), but do not store results
	CompileFile(ctx context.Context, in *CompileRequest, opts ...grpc.CallOption) (*CompileResult, error)
	// list all sourcefiles
	ListSourceFiles(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*FilenameList, error)
	// delete a file
	DeleteFile(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*common.Void, error)
	// find a service by name (might return multiple - beware)
	FindServiceByName(ctx context.Context, in *FindServiceByNameRequest, opts ...grpc.CallOption) (*ServiceList, error)
	// get a service by ID
	FindServiceByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*ServiceResponse, error)
}

type protoRendererServiceClient struct {
	cc *grpc.ClientConn
}

func NewProtoRendererServiceClient(cc *grpc.ClientConn) ProtoRendererServiceClient {
	return &protoRendererServiceClient{cc}
}

func (c *protoRendererServiceClient) UpdateProto(ctx context.Context, in *AddProtoRequest, opts ...grpc.CallOption) (*AddProtoResponse, error) {
	out := new(AddProtoResponse)
	err := grpc.Invoke(ctx, "/protorenderer.ProtoRendererService/UpdateProto", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoRendererServiceClient) MiniParser(ctx context.Context, in *AddProtoRequest, opts ...grpc.CallOption) (*ProtoFile, error) {
	out := new(ProtoFile)
	err := grpc.Invoke(ctx, "/protorenderer.ProtoRendererService/MiniParser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoRendererServiceClient) SubmitSource(ctx context.Context, in *ProtocRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/protorenderer.ProtoRendererService/SubmitSource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoRendererServiceClient) StreamHTTP(ctx context.Context, in *h2gproxy.StreamRequest, opts ...grpc.CallOption) (ProtoRendererService_StreamHTTPClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ProtoRendererService_serviceDesc.Streams[0], c.cc, "/protorenderer.ProtoRendererService/StreamHTTP", opts...)
	if err != nil {
		return nil, err
	}
	x := &protoRendererServiceStreamHTTPClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProtoRendererService_StreamHTTPClient interface {
	Recv() (*h2gproxy.StreamDataResponse, error)
	grpc.ClientStream
}

type protoRendererServiceStreamHTTPClient struct {
	grpc.ClientStream
}

func (x *protoRendererServiceStreamHTTPClient) Recv() (*h2gproxy.StreamDataResponse, error) {
	m := new(h2gproxy.StreamDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *protoRendererServiceClient) GetPackages(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*FlatPackageList, error) {
	out := new(FlatPackageList)
	err := grpc.Invoke(ctx, "/protorenderer.ProtoRendererService/GetPackages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoRendererServiceClient) GetPackageByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Package, error) {
	out := new(Package)
	err := grpc.Invoke(ctx, "/protorenderer.ProtoRendererService/GetPackageByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoRendererServiceClient) GetFilesJavaClass(ctx context.Context, in *ID, opts ...grpc.CallOption) (*FilenameList, error) {
	out := new(FilenameList)
	err := grpc.Invoke(ctx, "/protorenderer.ProtoRendererService/GetFilesJavaClass", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoRendererServiceClient) GetFilesGO(ctx context.Context, in *ID, opts ...grpc.CallOption) (*FilenameList, error) {
	out := new(FilenameList)
	err := grpc.Invoke(ctx, "/protorenderer.ProtoRendererService/GetFilesGO", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoRendererServiceClient) GetFilesProto(ctx context.Context, in *ID, opts ...grpc.CallOption) (*FilenameList, error) {
	out := new(FilenameList)
	err := grpc.Invoke(ctx, "/protorenderer.ProtoRendererService/GetFilesProto", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoRendererServiceClient) GetFilesPython(ctx context.Context, in *ID, opts ...grpc.CallOption) (*FilenameList, error) {
	out := new(FilenameList)
	err := grpc.Invoke(ctx, "/protorenderer.ProtoRendererService/GetFilesPython", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoRendererServiceClient) GetFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := grpc.Invoke(ctx, "/protorenderer.ProtoRendererService/GetFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoRendererServiceClient) GetVersion(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := grpc.Invoke(ctx, "/protorenderer.ProtoRendererService/GetVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoRendererServiceClient) CompileFile(ctx context.Context, in *CompileRequest, opts ...grpc.CallOption) (*CompileResult, error) {
	out := new(CompileResult)
	err := grpc.Invoke(ctx, "/protorenderer.ProtoRendererService/CompileFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoRendererServiceClient) ListSourceFiles(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*FilenameList, error) {
	out := new(FilenameList)
	err := grpc.Invoke(ctx, "/protorenderer.ProtoRendererService/ListSourceFiles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoRendererServiceClient) DeleteFile(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/protorenderer.ProtoRendererService/DeleteFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoRendererServiceClient) FindServiceByName(ctx context.Context, in *FindServiceByNameRequest, opts ...grpc.CallOption) (*ServiceList, error) {
	out := new(ServiceList)
	err := grpc.Invoke(ctx, "/protorenderer.ProtoRendererService/FindServiceByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoRendererServiceClient) FindServiceByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := grpc.Invoke(ctx, "/protorenderer.ProtoRendererService/FindServiceByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProtoRendererService service

type ProtoRendererServiceServer interface {
	// add or update a ".proto" file in the renderers database
	UpdateProto(context.Context, *AddProtoRequest) (*AddProtoResponse, error)
	// basic parse ;). Fast, quick no dependency parser
	MiniParser(context.Context, *AddProtoRequest) (*ProtoFile, error)
	// we can submit protofiles from protoc to protorenderer server for analysis
	SubmitSource(context.Context, *ProtocRequest) (*common.Void, error)
	// download classes, jars, .pb.go files or a tar full of pythons
	StreamHTTP(*h2gproxy.StreamRequest, ProtoRendererService_StreamHTTPServer) error
	// get all packages ("flat", it does not include services/message protos)
	GetPackages(context.Context, *common.Void) (*FlatPackageList, error)
	// get a specific package (not "flat", it _does_ include services/messages protos)
	GetPackageByID(context.Context, *ID) (*Package, error)
	// get all java class names for a given packageID
	// This is an EXPERIMENTAL API - subject to change.
	// the match between "package" and "namespace" and "filename" is ill-defined. In future
	// The api might return filenames in an abstract naming scheme (or not) and requires
	// more input parameters.
	GetFilesJavaClass(context.Context, *ID) (*FilenameList, error)
	// get all .pb.go files for a given package
	GetFilesGO(context.Context, *ID) (*FilenameList, error)
	// get all .proto files for a given package
	GetFilesProto(context.Context, *ID) (*FilenameList, error)
	// get all .py files for a given package
	GetFilesPython(context.Context, *ID) (*FilenameList, error)
	//
	// get a specific file by filename
	// This is an EXPERIMENTAL API - subject to change.
	// the match between "package" and "namespace" and "filename" is ill-defined. In future
	// The api might return filenames in an abstract naming scheme (or not) and requires
	// more input parameters.
	GetFile(context.Context, *FileRequest) (*File, error)
	// get the current version of the store
	GetVersion(context.Context, *common.Void) (*Version, error)
	// compile a file, return output(s), but do not store results
	CompileFile(context.Context, *CompileRequest) (*CompileResult, error)
	// list all sourcefiles
	ListSourceFiles(context.Context, *common.Void) (*FilenameList, error)
	// delete a file
	DeleteFile(context.Context, *DeleteRequest) (*common.Void, error)
	// find a service by name (might return multiple - beware)
	FindServiceByName(context.Context, *FindServiceByNameRequest) (*ServiceList, error)
	// get a service by ID
	FindServiceByID(context.Context, *ID) (*ServiceResponse, error)
}

func RegisterProtoRendererServiceServer(s *grpc.Server, srv ProtoRendererServiceServer) {
	s.RegisterService(&_ProtoRendererService_serviceDesc, srv)
}

func _ProtoRendererService_UpdateProto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProtoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoRendererServiceServer).UpdateProto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protorenderer.ProtoRendererService/UpdateProto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoRendererServiceServer).UpdateProto(ctx, req.(*AddProtoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoRendererService_MiniParser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProtoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoRendererServiceServer).MiniParser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protorenderer.ProtoRendererService/MiniParser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoRendererServiceServer).MiniParser(ctx, req.(*AddProtoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoRendererService_SubmitSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoRendererServiceServer).SubmitSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protorenderer.ProtoRendererService/SubmitSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoRendererServiceServer).SubmitSource(ctx, req.(*ProtocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoRendererService_StreamHTTP_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(h2gproxy.StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProtoRendererServiceServer).StreamHTTP(m, &protoRendererServiceStreamHTTPServer{stream})
}

type ProtoRendererService_StreamHTTPServer interface {
	Send(*h2gproxy.StreamDataResponse) error
	grpc.ServerStream
}

type protoRendererServiceStreamHTTPServer struct {
	grpc.ServerStream
}

func (x *protoRendererServiceStreamHTTPServer) Send(m *h2gproxy.StreamDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProtoRendererService_GetPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoRendererServiceServer).GetPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protorenderer.ProtoRendererService/GetPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoRendererServiceServer).GetPackages(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoRendererService_GetPackageByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoRendererServiceServer).GetPackageByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protorenderer.ProtoRendererService/GetPackageByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoRendererServiceServer).GetPackageByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoRendererService_GetFilesJavaClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoRendererServiceServer).GetFilesJavaClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protorenderer.ProtoRendererService/GetFilesJavaClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoRendererServiceServer).GetFilesJavaClass(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoRendererService_GetFilesGO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoRendererServiceServer).GetFilesGO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protorenderer.ProtoRendererService/GetFilesGO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoRendererServiceServer).GetFilesGO(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoRendererService_GetFilesProto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoRendererServiceServer).GetFilesProto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protorenderer.ProtoRendererService/GetFilesProto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoRendererServiceServer).GetFilesProto(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoRendererService_GetFilesPython_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoRendererServiceServer).GetFilesPython(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protorenderer.ProtoRendererService/GetFilesPython",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoRendererServiceServer).GetFilesPython(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoRendererService_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoRendererServiceServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protorenderer.ProtoRendererService/GetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoRendererServiceServer).GetFile(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoRendererService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoRendererServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protorenderer.ProtoRendererService/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoRendererServiceServer).GetVersion(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoRendererService_CompileFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoRendererServiceServer).CompileFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protorenderer.ProtoRendererService/CompileFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoRendererServiceServer).CompileFile(ctx, req.(*CompileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoRendererService_ListSourceFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoRendererServiceServer).ListSourceFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protorenderer.ProtoRendererService/ListSourceFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoRendererServiceServer).ListSourceFiles(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoRendererService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoRendererServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protorenderer.ProtoRendererService/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoRendererServiceServer).DeleteFile(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoRendererService_FindServiceByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindServiceByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoRendererServiceServer).FindServiceByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protorenderer.ProtoRendererService/FindServiceByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoRendererServiceServer).FindServiceByName(ctx, req.(*FindServiceByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoRendererService_FindServiceByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoRendererServiceServer).FindServiceByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protorenderer.ProtoRendererService/FindServiceByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoRendererServiceServer).FindServiceByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProtoRendererService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protorenderer.ProtoRendererService",
	HandlerType: (*ProtoRendererServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateProto",
			Handler:    _ProtoRendererService_UpdateProto_Handler,
		},
		{
			MethodName: "MiniParser",
			Handler:    _ProtoRendererService_MiniParser_Handler,
		},
		{
			MethodName: "SubmitSource",
			Handler:    _ProtoRendererService_SubmitSource_Handler,
		},
		{
			MethodName: "GetPackages",
			Handler:    _ProtoRendererService_GetPackages_Handler,
		},
		{
			MethodName: "GetPackageByID",
			Handler:    _ProtoRendererService_GetPackageByID_Handler,
		},
		{
			MethodName: "GetFilesJavaClass",
			Handler:    _ProtoRendererService_GetFilesJavaClass_Handler,
		},
		{
			MethodName: "GetFilesGO",
			Handler:    _ProtoRendererService_GetFilesGO_Handler,
		},
		{
			MethodName: "GetFilesProto",
			Handler:    _ProtoRendererService_GetFilesProto_Handler,
		},
		{
			MethodName: "GetFilesPython",
			Handler:    _ProtoRendererService_GetFilesPython_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _ProtoRendererService_GetFile_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _ProtoRendererService_GetVersion_Handler,
		},
		{
			MethodName: "CompileFile",
			Handler:    _ProtoRendererService_CompileFile_Handler,
		},
		{
			MethodName: "ListSourceFiles",
			Handler:    _ProtoRendererService_ListSourceFiles_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _ProtoRendererService_DeleteFile_Handler,
		},
		{
			MethodName: "FindServiceByName",
			Handler:    _ProtoRendererService_FindServiceByName_Handler,
		},
		{
			MethodName: "FindServiceByID",
			Handler:    _ProtoRendererService_FindServiceByID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamHTTP",
			Handler:       _ProtoRendererService_StreamHTTP_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "golang.conradwood.net/apis/protorenderer/protorenderer.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/protorenderer/protorenderer.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 1466 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x58, 0xdd, 0x6e, 0xdb, 0xc6,
	0x12, 0x06, 0x25, 0xd9, 0x96, 0x46, 0xfe, 0xcb, 0x1e, 0x23, 0x87, 0x50, 0x7c, 0x7c, 0x04, 0x9e,
	0x20, 0xc7, 0x28, 0x52, 0x39, 0x55, 0x81, 0xfe, 0x24, 0x01, 0xda, 0x5a, 0x8c, 0x1d, 0xa5, 0x89,
	0xa3, 0xd2, 0x4e, 0x50, 0xf4, 0xa6, 0x60, 0xc4, 0x8d, 0x42, 0x44, 0xe2, 0x32, 0xe4, 0x2a, 0xb1,
	0x2e, 0x7a, 0x59, 0xf4, 0xa2, 0x68, 0x6f, 0x8a, 0xbe, 0x44, 0x81, 0x3e, 0x40, 0x9f, 0xa6, 0xcf,
	0xd0, 0x37, 0x28, 0xf6, 0x97, 0x4b, 0x52, 0x92, 0x6d, 0xa0, 0x57, 0xe6, 0xfc, 0xcf, 0x7c, 0x3b,
	0x3b, 0x3b, 0x32, 0xdc, 0x1f, 0x91, 0xb1, 0x1f, 0x8d, 0x3a, 0x43, 0x12, 0x25, 0x7e, 0xf0, 0x8e,
	0x90, 0xa0, 0x13, 0x61, 0x7a, 0xe0, 0xc7, 0x61, 0x7a, 0x10, 0x27, 0x84, 0x92, 0x04, 0x47, 0x01,
	0x4e, 0x70, 0x92, 0xa7, 0x3a, 0x9c, 0x42, 0x1b, 0x39, 0x66, 0xab, 0xb3, 0xc4, 0xd9, 0x90, 0x4c,
	0x26, 0x24, 0x92, 0x7f, 0x84, 0x79, 0xab, 0xbb, 0x44, 0xff, 0x55, 0x77, 0x14, 0x27, 0xe4, 0x7c,
	0xa6, 0x3f, 0xa4, 0x4d, 0x7b, 0x44, 0xc8, 0x68, 0x8c, 0x45, 0x3a, 0x2f, 0xa6, 0x2f, 0x0f, 0x02,
	0x9c, 0x0e, 0x93, 0x30, 0xa6, 0x44, 0x26, 0xe5, 0x3c, 0x83, 0xa6, 0x7b, 0x38, 0x60, 0x9f, 0x47,
	0xe1, 0x18, 0xa3, 0x4d, 0xa8, 0xf4, 0x5d, 0xdb, 0x6a, 0x5b, 0xfb, 0x35, 0xaf, 0xd2, 0x77, 0x11,
	0x82, 0xda, 0x89, 0x3f, 0xc1, 0x76, 0xa5, 0x6d, 0xed, 0x37, 0x3c, 0xfe, 0x8d, 0x1c, 0x58, 0xf7,
	0x70, 0x4c, 0xd2, 0x90, 0x92, 0x64, 0xd6, 0x77, 0xed, 0x2a, 0xd7, 0xce, 0xf1, 0x9c, 0xf7, 0xa1,
	0x31, 0xc0, 0x49, 0x1a, 0xa6, 0xb4, 0xef, 0x96, 0x9c, 0x6e, 0x43, 0xf5, 0x4b, 0x3c, 0x93, 0x3e,
	0xd9, 0xa7, 0x33, 0x84, 0xad, 0x2f, 0x82, 0x80, 0xa7, 0xe1, 0xe1, 0x37, 0x53, 0x9c, 0x52, 0x1d,
	0xd9, 0x32, 0x22, 0xdb, 0xb0, 0xd6, 0x23, 0x11, 0xc5, 0x11, 0x95, 0xc6, 0x8a, 0xbc, 0x54, 0x4e,
	0xbf, 0x59, 0xb0, 0x9d, 0x45, 0x49, 0x63, 0x12, 0xa5, 0xdc, 0xe5, 0x73, 0x96, 0x28, 0x89, 0x64,
	0x82, 0x8a, 0x64, 0x2e, 0xb9, 0xaa, 0x12, 0x57, 0x84, 0x4b, 0x93, 0x87, 0x76, 0xa1, 0x71, 0x4c,
	0x06, 0xfe, 0xf0, 0xb5, 0x3f, 0xc2, 0x3c, 0x66, 0xc3, 0xcb, 0x18, 0xa8, 0x0d, 0xcd, 0x47, 0xfe,
	0x5b, 0x5f, 0xc9, 0x6b, 0x5c, 0x6e, 0xb2, 0x58, 0xf4, 0xfe, 0x24, 0x26, 0x09, 0x4d, 0xed, 0x95,
	0x76, 0x95, 0x15, 0x24, 0x49, 0xe7, 0x2f, 0x0b, 0x1a, 0xd9, 0xb1, 0xe4, 0xe2, 0x58, 0x17, 0xc4,
	0xa9, 0x94, 0xe3, 0xb4, 0xa0, 0xce, 0xfc, 0x44, 0x0c, 0x50, 0x91, 0xa6, 0xa6, 0x4d, 0x50, 0x6b,
	0x79, 0x50, 0x17, 0x66, 0x87, 0xee, 0x40, 0xed, 0x09, 0xa6, 0xbe, 0xbd, 0xda, 0xb6, 0xf6, 0x9b,
	0xdd, 0xdd, 0x4e, 0xbe, 0xdd, 0x99, 0x48, 0xe7, 0xee, 0x71, 0xcd, 0xd2, 0x01, 0xad, 0xcd, 0x39,
	0xa0, 0x6f, 0x61, 0x23, 0x67, 0xca, 0xca, 0x96, 0x15, 0xc8, 0xfe, 0x69, 0x78, 0x19, 0x03, 0xdd,
	0x81, 0x35, 0xb3, 0xe4, 0x66, 0xf7, 0x7a, 0x21, 0x0f, 0x29, 0xf5, 0x94, 0x9a, 0xf3, 0xbb, 0xa5,
	0x4d, 0x8c, 0xa6, 0x6c, 0x2c, 0xec, 0xf4, 0xeb, 0xb0, 0x3a, 0x48, 0xf0, 0xcb, 0xf0, 0x5c, 0x82,
	0x26, 0x29, 0xd4, 0x85, 0xfa, 0x29, 0x4e, 0xde, 0x86, 0x43, 0x9c, 0xda, 0xb5, 0x76, 0x75, 0x4e,
	0x68, 0x29, 0xf6, 0xb4, 0x1e, 0xb3, 0x79, 0x82, 0xd3, 0xd4, 0x1f, 0x61, 0x81, 0x66, 0xd9, 0x46,
	0x8a, 0x3d, 0xad, 0xe7, 0xfc, 0x64, 0xc1, 0x9a, 0x74, 0x70, 0xa9, 0x7c, 0x6f, 0x41, 0xcd, 0x1b,
	0xf4, 0x52, 0xbb, 0xca, 0xfd, 0xa3, 0x82, 0x7f, 0x6f, 0xd0, 0xf3, 0xb8, 0x5c, 0x1c, 0xf9, 0x64,
	0x92, 0x3b, 0x72, 0x4e, 0xe6, 0x11, 0x5f, 0x29, 0x20, 0xee, 0xfc, 0x69, 0x41, 0xd5, 0x1b, 0xf4,
	0x2e, 0x95, 0xcb, 0x6d, 0x58, 0xe9, 0x47, 0xf1, 0x94, 0x72, 0xe8, 0x16, 0x17, 0x2b, 0x94, 0x50,
	0x07, 0x56, 0x9f, 0x4e, 0x29, 0x53, 0xaf, 0x2d, 0x55, 0x97, 0x5a, 0x66, 0x05, 0x2b, 0xa5, 0x0a,
	0x24, 0x64, 0x7d, 0x97, 0xf7, 0x67, 0xc3, 0xcb, 0x18, 0x68, 0x0f, 0xc0, 0xc5, 0x71, 0x82, 0x87,
	0x3e, 0xc5, 0x01, 0x6f, 0xc2, 0xba, 0x67, 0x70, 0x9c, 0x5f, 0x2c, 0x58, 0x93, 0xb1, 0x2e, 0x55,
	0xa5, 0x91, 0x47, 0x75, 0x09, 0x92, 0xb5, 0x62, 0xef, 0xde, 0x86, 0xd5, 0xa3, 0x10, 0x8f, 0x03,
	0xd5, 0x0b, 0x3b, 0x85, 0x7a, 0xb9, 0xd0, 0x93, 0x3a, 0xce, 0x8f, 0x15, 0x58, 0xe1, 0x9f, 0x97,
	0xca, 0x09, 0x41, 0xed, 0x6c, 0x16, 0xab, 0x8b, 0xce, 0xbf, 0x59, 0x36, 0x0f, 0xce, 0x69, 0xe2,
	0x73, 0x81, 0xcc, 0x46, 0x33, 0xd8, 0x78, 0xf0, 0x70, 0x8c, 0x39, 0x26, 0x2b, 0x1c, 0x13, 0x4d,
	0x0b, 0xd9, 0x9b, 0x69, 0x98, 0xe0, 0x80, 0xc3, 0xc9, 0x65, 0x82, 0x66, 0xb2, 0xa7, 0x31, 0x0d,
	0x49, 0xe4, 0x8f, 0x25, 0x96, 0x9a, 0x36, 0x91, 0xa9, 0x97, 0x90, 0x91, 0x10, 0xf7, 0x5d, 0xbb,
	0x21, 0x72, 0xd1, 0x0c, 0x36, 0xcc, 0x24, 0xc1, 0x0b, 0x03, 0x31, 0xcc, 0x0c, 0x96, 0xe3, 0xc2,
	0xb6, 0x06, 0x52, 0xbd, 0x16, 0x76, 0x36, 0x0b, 0x04, 0x38, 0xfa, 0x9e, 0x67, 0x77, 0xb8, 0x62,
	0xde, 0x61, 0x67, 0x87, 0x21, 0x59, 0xc4, 0xd3, 0xf1, 0x60, 0x5b, 0xa7, 0xa2, 0x7c, 0x2f, 0x9f,
	0x42, 0x85, 0x7c, 0x2b, 0xe5, 0x7c, 0x6f, 0xc2, 0xba, 0x1a, 0xb6, 0x8f, 0xc3, 0x94, 0xa2, 0x1d,
	0x76, 0x98, 0x63, 0x9c, 0xda, 0x16, 0x1f, 0xaa, 0x82, 0x70, 0xbe, 0x81, 0x26, 0x1f, 0x97, 0x32,
	0xe8, 0x41, 0x31, 0x68, 0xb3, 0x7b, 0xad, 0xd0, 0x23, 0x7d, 0xd7, 0xcc, 0xc3, 0x1c, 0xf1, 0x95,
	0xfc, 0x88, 0x77, 0x5c, 0xa8, 0xf1, 0x79, 0x6a, 0x8c, 0x7a, 0xe6, 0x72, 0x7d, 0xf1, 0xfb, 0x59,
	0x99, 0x33, 0x9e, 0x7f, 0xb0, 0xf4, 0x5b, 0xb9, 0xe4, 0xd9, 0xdc, 0x85, 0x46, 0x8f, 0x4c, 0xe2,
	0x70, 0x1c, 0x46, 0x23, 0xee, 0xa6, 0xee, 0x65, 0x0c, 0x86, 0xd6, 0x09, 0x3e, 0xa7, 0xca, 0x56,
	0x3c, 0xd3, 0x26, 0xab, 0xf4, 0xec, 0xd6, 0xca, 0xcf, 0xae, 0xf3, 0x0e, 0x36, 0x38, 0x3d, 0x54,
	0x68, 0xb5, 0xa1, 0xf9, 0x1c, 0x27, 0xe1, 0xcb, 0xd9, 0x19, 0x79, 0x8d, 0x23, 0x79, 0x48, 0x26,
	0x0b, 0xb9, 0x00, 0xfa, 0x5d, 0x49, 0xed, 0x0a, 0xbf, 0x74, 0x37, 0x3b, 0x62, 0x3d, 0xea, 0xa8,
	0xf5, 0xa8, 0xc3, 0xa4, 0xae, 0x5e, 0x91, 0xc4, 0xa6, 0x60, 0xd8, 0x39, 0x7d, 0x68, 0x1e, 0x8d,
	0x7d, 0xfa, 0x0f, 0xbc, 0x21, 0x4e, 0x1f, 0xb6, 0x0c, 0x57, 0xbc, 0x31, 0x3e, 0x82, 0xba, 0x24,
	0x45, 0x6f, 0x34, 0xbb, 0xad, 0xe2, 0x58, 0xc8, 0x2c, 0x3c, 0xad, 0xeb, 0xfc, 0x6a, 0xc1, 0xa6,
	0x80, 0x58, 0xb7, 0xcf, 0xc3, 0xd2, 0x42, 0x25, 0x9b, 0x68, 0xaf, 0xe0, 0xb1, 0xa0, 0xe5, 0x95,
	0xf6, 0xb0, 0x4f, 0xa1, 0xf1, 0xd8, 0x8f, 0x46, 0x53, 0x9e, 0x15, 0xc3, 0x6d, 0xb3, 0x7b, 0xa3,
	0x23, 0x17, 0xd3, 0x41, 0x42, 0x46, 0x89, 0x3f, 0x99, 0x84, 0xd1, 0x48, 0xe9, 0x78, 0x99, 0xb6,
	0xf3, 0xb3, 0x05, 0x1b, 0x3a, 0xaf, 0x74, 0x3a, 0xa6, 0xe8, 0x16, 0x6c, 0x9e, 0x92, 0x69, 0x32,
	0xc4, 0xba, 0x55, 0x05, 0x78, 0x05, 0x2e, 0x6b, 0x02, 0x69, 0xf8, 0x20, 0x49, 0x48, 0x22, 0x01,
	0xcd, 0xf1, 0xd0, 0x07, 0xea, 0x1a, 0x89, 0xd7, 0xee, 0x46, 0xa1, 0x30, 0xa9, 0x1b, 0xf0, 0x4b,
	0x25, 0xef, 0xd8, 0x77, 0xda, 0x2d, 0x67, 0xa3, 0x8f, 0xa1, 0xae, 0xb2, 0xe5, 0x89, 0x5c, 0x50,
	0x9a, 0x56, 0x5e, 0x76, 0xd9, 0xcc, 0x4b, 0x56, 0xcd, 0x5d, 0x32, 0xe7, 0x7f, 0xb0, 0xe1, 0xe2,
	0x31, 0xa6, 0x78, 0xc9, 0x8e, 0xeb, 0x74, 0xc0, 0x3e, 0x0a, 0xa3, 0x40, 0x3e, 0x59, 0x87, 0x33,
	0xc6, 0x5c, 0xa6, 0xdf, 0x87, 0xa6, 0xd4, 0xe5, 0x3d, 0x74, 0xd7, 0x58, 0x4d, 0x44, 0x0f, 0xed,
	0x2d, 0x58, 0x4d, 0xe4, 0x06, 0x9c, 0xad, 0x28, 0xce, 0x1f, 0x16, 0x6c, 0x15, 0xa4, 0x6c, 0xc9,
	0x92, 0x2c, 0xd9, 0x40, 0x8b, 0x36, 0x1d, 0xbd, 0xa8, 0x5c, 0x79, 0x2d, 0x63, 0xb7, 0x57, 0x7e,
	0x9e, 0x64, 0x0b, 0xaa, 0xc9, 0x32, 0x34, 0x8e, 0xbe, 0x72, 0x4f, 0xd4, 0x26, 0x6d, 0xb0, 0xba,
	0xdf, 0x37, 0x60, 0x47, 0xf6, 0xad, 0x08, 0xa3, 0xd2, 0x39, 0x81, 0xe6, 0xb3, 0x38, 0xf0, 0x29,
	0xe6, 0x52, 0x74, 0x41, 0xff, 0xb7, 0xfe, 0xbb, 0x50, 0x2e, 0x01, 0x39, 0x02, 0x78, 0x12, 0x46,
	0xe1, 0xc0, 0x4f, 0x52, 0x9c, 0x5c, 0xe8, 0xce, 0x2e, 0xd6, 0xae, 0x77, 0xdb, 0xbb, 0xb0, 0x7e,
	0x3a, 0x7d, 0x31, 0x09, 0xa9, 0x68, 0x7d, 0xb4, 0x3b, 0x4f, 0x53, 0x0d, 0xb8, 0xd6, 0xba, 0xea,
	0xcb, 0xe7, 0x24, 0x0c, 0xd0, 0x03, 0x80, 0x53, 0x9a, 0x60, 0x7f, 0xf2, 0xf0, 0xec, 0x6c, 0x80,
	0xfe, 0xdd, 0xd1, 0xbf, 0xfa, 0x04, 0x57, 0x19, 0xed, 0x16, 0x05, 0xae, 0x4f, 0x7d, 0x55, 0xc8,
	0x1d, 0x0b, 0xdd, 0x83, 0xe6, 0x31, 0x56, 0xf3, 0x24, 0x45, 0xb9, 0x18, 0xad, 0xbd, 0xc5, 0xa3,
	0x87, 0x37, 0xda, 0x3d, 0xd8, 0xcc, 0x8c, 0x0f, 0x67, 0x7d, 0x17, 0x95, 0xdf, 0xa7, 0xd6, 0x82,
	0xa3, 0x47, 0x3d, 0xb8, 0x76, 0x8c, 0x29, 0xbf, 0x94, 0xec, 0x67, 0x4a, 0x6f, 0xec, 0xa7, 0xe9,
	0x3c, 0xfb, 0x1b, 0xa5, 0xb5, 0xc8, 0x78, 0x47, 0xef, 0x03, 0x28, 0x27, 0xc7, 0x4f, 0xaf, 0x6c,
	0xfd, 0x19, 0x6c, 0x28, 0x6b, 0xd1, 0x19, 0x57, 0x75, 0xf0, 0x39, 0x07, 0x40, 0x38, 0x98, 0xd1,
	0x57, 0x24, 0xba, 0xb2, 0x87, 0xbb, 0xb0, 0x26, 0x3d, 0xa0, 0xd6, 0x1c, 0x3d, 0x75, 0x8c, 0xff,
	0x9a, 0x23, 0x43, 0x5d, 0x5e, 0xbc, 0x7a, 0x34, 0xf3, 0x47, 0x57, 0x44, 0x5d, 0x69, 0x3d, 0x82,
	0xa6, 0x1c, 0x7f, 0xdc, 0xc5, 0x7f, 0xe6, 0x4f, 0xcc, 0xac, 0x7b, 0x16, 0x88, 0xf9, 0x24, 0xbf,
	0x0f, 0x5b, 0xac, 0x86, 0x6c, 0x6e, 0x17, 0xfb, 0x67, 0x69, 0xe5, 0x9f, 0xb0, 0x35, 0x9c, 0x4d,
	0x42, 0xf1, 0x33, 0xaf, 0xa0, 0x9a, 0x1b, 0x92, 0x85, 0xd6, 0xff, 0x1a, 0xae, 0x95, 0xc6, 0x23,
	0xfa, 0x7f, 0x29, 0xd6, 0xfc, 0x01, 0xda, 0x6a, 0xcd, 0x1f, 0x5e, 0x3c, 0x27, 0x17, 0xb6, 0x72,
	0x76, 0xf3, 0x3b, 0xfa, 0x82, 0x69, 0x7a, 0xf8, 0x1e, 0xec, 0x47, 0x98, 0x9a, 0xff, 0xa4, 0x91,
	0xff, 0xb6, 0xf1, 0xe3, 0x30, 0xcd, 0xdb, 0xbe, 0x58, 0xe5, 0xe4, 0x87, 0x7f, 0x07, 0x00, 0x00,
	0xff, 0xff, 0xca, 0x81, 0x67, 0x43, 0x57, 0x12, 0x00, 0x00,
}
