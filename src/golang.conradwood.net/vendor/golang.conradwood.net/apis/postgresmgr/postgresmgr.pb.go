// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/postgresmgr/postgresmgr.proto
// DO NOT EDIT!

/*
Package postgresmgr is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/postgresmgr/postgresmgr.proto

It has these top-level messages:
	Info
	InstanceRequest
	InstanceResponse
	ChangePasswordRequest
	ChangePasswordResponse
	InstanceList
	Session
	SessionList
	SessionID
	QueryRequest
	Column
	Row
	Field
	QueryResult
	QueryLog
*/
package postgresmgr

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// for database
type Info struct {
	ID       uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	DBUser   string `protobuf:"bytes,3,opt,name=DBUser" json:"DBUser,omitempty"`
	Password string `protobuf:"bytes,4,opt,name=Password" json:"Password,omitempty"`
	Host     string `protobuf:"bytes,5,opt,name=Host" json:"Host,omitempty"`
}

func (m *Info) Reset()                    { *m = Info{} }
func (m *Info) String() string            { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()               {}
func (*Info) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Info) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Info) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Info) GetDBUser() string {
	if m != nil {
		return m.DBUser
	}
	return ""
}

func (m *Info) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Info) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type InstanceRequest struct {
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Host string `protobuf:"bytes,2,opt,name=Host" json:"Host,omitempty"`
}

func (m *InstanceRequest) Reset()                    { *m = InstanceRequest{} }
func (m *InstanceRequest) String() string            { return proto.CompactTextString(m) }
func (*InstanceRequest) ProtoMessage()               {}
func (*InstanceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *InstanceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InstanceRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type InstanceResponse struct {
	Name     string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	User     string `protobuf:"bytes,2,opt,name=User" json:"User,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=Password" json:"Password,omitempty"`
	Host     string `protobuf:"bytes,4,opt,name=Host" json:"Host,omitempty"`
}

func (m *InstanceResponse) Reset()                    { *m = InstanceResponse{} }
func (m *InstanceResponse) String() string            { return proto.CompactTextString(m) }
func (*InstanceResponse) ProtoMessage()               {}
func (*InstanceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *InstanceResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InstanceResponse) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *InstanceResponse) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *InstanceResponse) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type ChangePasswordRequest struct {
	User     string `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password" json:"Password,omitempty"`
	Host     string `protobuf:"bytes,3,opt,name=Host" json:"Host,omitempty"`
}

func (m *ChangePasswordRequest) Reset()                    { *m = ChangePasswordRequest{} }
func (m *ChangePasswordRequest) String() string            { return proto.CompactTextString(m) }
func (*ChangePasswordRequest) ProtoMessage()               {}
func (*ChangePasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ChangePasswordRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ChangePasswordRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ChangePasswordRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type ChangePasswordResponse struct {
	Request     *ChangePasswordRequest `protobuf:"bytes,1,opt,name=Request" json:"Request,omitempty"`
	NewPassword string                 `protobuf:"bytes,2,opt,name=NewPassword" json:"NewPassword,omitempty"`
}

func (m *ChangePasswordResponse) Reset()                    { *m = ChangePasswordResponse{} }
func (m *ChangePasswordResponse) String() string            { return proto.CompactTextString(m) }
func (*ChangePasswordResponse) ProtoMessage()               {}
func (*ChangePasswordResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ChangePasswordResponse) GetRequest() *ChangePasswordRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ChangePasswordResponse) GetNewPassword() string {
	if m != nil {
		return m.NewPassword
	}
	return ""
}

type InstanceList struct {
	Instances []*InstanceResponse `protobuf:"bytes,1,rep,name=Instances" json:"Instances,omitempty"`
	PGPass    string              `protobuf:"bytes,2,opt,name=PGPass" json:"PGPass,omitempty"`
}

func (m *InstanceList) Reset()                    { *m = InstanceList{} }
func (m *InstanceList) String() string            { return proto.CompactTextString(m) }
func (*InstanceList) ProtoMessage()               {}
func (*InstanceList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *InstanceList) GetInstances() []*InstanceResponse {
	if m != nil {
		return m.Instances
	}
	return nil
}

func (m *InstanceList) GetPGPass() string {
	if m != nil {
		return m.PGPass
	}
	return ""
}

type Session struct {
	Host        string `protobuf:"bytes,1,opt,name=Host" json:"Host,omitempty"`
	Pid         string `protobuf:"bytes,2,opt,name=Pid" json:"Pid,omitempty"`
	Username    string `protobuf:"bytes,3,opt,name=Username" json:"Username,omitempty"`
	Database    string `protobuf:"bytes,4,opt,name=Database" json:"Database,omitempty"`
	Address     string `protobuf:"bytes,5,opt,name=Address" json:"Address,omitempty"`
	Application string `protobuf:"bytes,6,opt,name=Application" json:"Application,omitempty"`
}

func (m *Session) Reset()                    { *m = Session{} }
func (m *Session) String() string            { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()               {}
func (*Session) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Session) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Session) GetPid() string {
	if m != nil {
		return m.Pid
	}
	return ""
}

func (m *Session) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Session) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

func (m *Session) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Session) GetApplication() string {
	if m != nil {
		return m.Application
	}
	return ""
}

type SessionList struct {
	Sessions []*Session `protobuf:"bytes,1,rep,name=Sessions" json:"Sessions,omitempty"`
}

func (m *SessionList) Reset()                    { *m = SessionList{} }
func (m *SessionList) String() string            { return proto.CompactTextString(m) }
func (*SessionList) ProtoMessage()               {}
func (*SessionList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SessionList) GetSessions() []*Session {
	if m != nil {
		return m.Sessions
	}
	return nil
}

type SessionID struct {
	Pid  string `protobuf:"bytes,1,opt,name=Pid" json:"Pid,omitempty"`
	Host string `protobuf:"bytes,2,opt,name=Host" json:"Host,omitempty"`
}

func (m *SessionID) Reset()                    { *m = SessionID{} }
func (m *SessionID) String() string            { return proto.CompactTextString(m) }
func (*SessionID) ProtoMessage()               {}
func (*SessionID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SessionID) GetPid() string {
	if m != nil {
		return m.Pid
	}
	return ""
}

func (m *SessionID) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type QueryRequest struct {
	Database string `protobuf:"bytes,1,opt,name=Database" json:"Database,omitempty"`
	Host     string `protobuf:"bytes,2,opt,name=Host" json:"Host,omitempty"`
	Query    string `protobuf:"bytes,3,opt,name=Query" json:"Query,omitempty"`
}

func (m *QueryRequest) Reset()                    { *m = QueryRequest{} }
func (m *QueryRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()               {}
func (*QueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *QueryRequest) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

func (m *QueryRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *QueryRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

//
// see https://golang.org/src/database/sql/sql.go?s=84259:84499#L2957
type Column struct {
	GoType    string `protobuf:"bytes,1,opt,name=GoType" json:"GoType,omitempty"`
	DBType    string `protobuf:"bytes,2,opt,name=DBType" json:"DBType,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	Length    int64  `protobuf:"varint,4,opt,name=Length" json:"Length,omitempty"`
	Precision int64  `protobuf:"varint,5,opt,name=Precision" json:"Precision,omitempty"`
	Scale     int64  `protobuf:"varint,6,opt,name=Scale" json:"Scale,omitempty"`
	Nullable  bool   `protobuf:"varint,7,opt,name=Nullable" json:"Nullable,omitempty"`
}

func (m *Column) Reset()                    { *m = Column{} }
func (m *Column) String() string            { return proto.CompactTextString(m) }
func (*Column) ProtoMessage()               {}
func (*Column) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Column) GetGoType() string {
	if m != nil {
		return m.GoType
	}
	return ""
}

func (m *Column) GetDBType() string {
	if m != nil {
		return m.DBType
	}
	return ""
}

func (m *Column) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Column) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *Column) GetPrecision() int64 {
	if m != nil {
		return m.Precision
	}
	return 0
}

func (m *Column) GetScale() int64 {
	if m != nil {
		return m.Scale
	}
	return 0
}

func (m *Column) GetNullable() bool {
	if m != nil {
		return m.Nullable
	}
	return false
}

type Row struct {
	Fields []*Field `protobuf:"bytes,1,rep,name=Fields" json:"Fields,omitempty"`
}

func (m *Row) Reset()                    { *m = Row{} }
func (m *Row) String() string            { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()               {}
func (*Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Row) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

//
// only one of them might be filled in, depending on columntype
type Field struct {
	IsNull      bool    `protobuf:"varint,1,opt,name=IsNull" json:"IsNull,omitempty"`
	Bytes       []byte  `protobuf:"bytes,2,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
	FloateValue float64 `protobuf:"fixed64,3,opt,name=FloateValue" json:"FloateValue,omitempty"`
	Int64Value  int64   `protobuf:"varint,4,opt,name=Int64Value" json:"Int64Value,omitempty"`
	StringValue string  `protobuf:"bytes,5,opt,name=StringValue" json:"StringValue,omitempty"`
}

func (m *Field) Reset()                    { *m = Field{} }
func (m *Field) String() string            { return proto.CompactTextString(m) }
func (*Field) ProtoMessage()               {}
func (*Field) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Field) GetIsNull() bool {
	if m != nil {
		return m.IsNull
	}
	return false
}

func (m *Field) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

func (m *Field) GetFloateValue() float64 {
	if m != nil {
		return m.FloateValue
	}
	return 0
}

func (m *Field) GetInt64Value() int64 {
	if m != nil {
		return m.Int64Value
	}
	return 0
}

func (m *Field) GetStringValue() string {
	if m != nil {
		return m.StringValue
	}
	return ""
}

type QueryResult struct {
	Columns []*Column `protobuf:"bytes,1,rep,name=Columns" json:"Columns,omitempty"`
	Rows    []*Row    `protobuf:"bytes,2,rep,name=Rows" json:"Rows,omitempty"`
}

func (m *QueryResult) Reset()                    { *m = QueryResult{} }
func (m *QueryResult) String() string            { return proto.CompactTextString(m) }
func (*QueryResult) ProtoMessage()               {}
func (*QueryResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *QueryResult) GetColumns() []*Column {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *QueryResult) GetRows() []*Row {
	if m != nil {
		return m.Rows
	}
	return nil
}

type QueryLog struct {
	ID        uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	UserID    string `protobuf:"bytes,2,opt,name=UserID" json:"UserID,omitempty"`
	Timestamp uint32 `protobuf:"varint,3,opt,name=Timestamp" json:"Timestamp,omitempty"`
	Query     string `protobuf:"bytes,4,opt,name=Query" json:"Query,omitempty"`
	Database  string `protobuf:"bytes,5,opt,name=Database" json:"Database,omitempty"`
	Host      string `protobuf:"bytes,6,opt,name=Host" json:"Host,omitempty"`
}

func (m *QueryLog) Reset()                    { *m = QueryLog{} }
func (m *QueryLog) String() string            { return proto.CompactTextString(m) }
func (*QueryLog) ProtoMessage()               {}
func (*QueryLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *QueryLog) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *QueryLog) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *QueryLog) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *QueryLog) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *QueryLog) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

func (m *QueryLog) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func init() {
	proto.RegisterType((*Info)(nil), "postgresmgr.Info")
	proto.RegisterType((*InstanceRequest)(nil), "postgresmgr.InstanceRequest")
	proto.RegisterType((*InstanceResponse)(nil), "postgresmgr.InstanceResponse")
	proto.RegisterType((*ChangePasswordRequest)(nil), "postgresmgr.ChangePasswordRequest")
	proto.RegisterType((*ChangePasswordResponse)(nil), "postgresmgr.ChangePasswordResponse")
	proto.RegisterType((*InstanceList)(nil), "postgresmgr.InstanceList")
	proto.RegisterType((*Session)(nil), "postgresmgr.Session")
	proto.RegisterType((*SessionList)(nil), "postgresmgr.SessionList")
	proto.RegisterType((*SessionID)(nil), "postgresmgr.SessionID")
	proto.RegisterType((*QueryRequest)(nil), "postgresmgr.QueryRequest")
	proto.RegisterType((*Column)(nil), "postgresmgr.Column")
	proto.RegisterType((*Row)(nil), "postgresmgr.Row")
	proto.RegisterType((*Field)(nil), "postgresmgr.Field")
	proto.RegisterType((*QueryResult)(nil), "postgresmgr.QueryResult")
	proto.RegisterType((*QueryLog)(nil), "postgresmgr.QueryLog")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PostgresMgr service

type PostgresMgrClient interface {
	// create a new database instance
	CreateInstance(ctx context.Context, in *InstanceRequest, opts ...grpc.CallOption) (*InstanceResponse, error)
	// change the password for an instance
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error)
	// get all known instances (root only)
	GetInstances(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*InstanceList, error)
	// import a known db connection
	ImportInstance(ctx context.Context, in *InstanceResponse, opts ...grpc.CallOption) (*common.Void, error)
	// get current sessions
	GetSessions(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*SessionList, error)
	// run a query (and log the fact one did, return result
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResult, error)
	// run a query (and log the fact one did, return result
	Exec(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*common.Void, error)
}

type postgresMgrClient struct {
	cc *grpc.ClientConn
}

func NewPostgresMgrClient(cc *grpc.ClientConn) PostgresMgrClient {
	return &postgresMgrClient{cc}
}

func (c *postgresMgrClient) CreateInstance(ctx context.Context, in *InstanceRequest, opts ...grpc.CallOption) (*InstanceResponse, error) {
	out := new(InstanceResponse)
	err := grpc.Invoke(ctx, "/postgresmgr.PostgresMgr/CreateInstance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresMgrClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {
	out := new(ChangePasswordResponse)
	err := grpc.Invoke(ctx, "/postgresmgr.PostgresMgr/ChangePassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresMgrClient) GetInstances(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*InstanceList, error) {
	out := new(InstanceList)
	err := grpc.Invoke(ctx, "/postgresmgr.PostgresMgr/GetInstances", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresMgrClient) ImportInstance(ctx context.Context, in *InstanceResponse, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/postgresmgr.PostgresMgr/ImportInstance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresMgrClient) GetSessions(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*SessionList, error) {
	out := new(SessionList)
	err := grpc.Invoke(ctx, "/postgresmgr.PostgresMgr/GetSessions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresMgrClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResult, error) {
	out := new(QueryResult)
	err := grpc.Invoke(ctx, "/postgresmgr.PostgresMgr/Query", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresMgrClient) Exec(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/postgresmgr.PostgresMgr/Exec", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PostgresMgr service

type PostgresMgrServer interface {
	// create a new database instance
	CreateInstance(context.Context, *InstanceRequest) (*InstanceResponse, error)
	// change the password for an instance
	ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error)
	// get all known instances (root only)
	GetInstances(context.Context, *common.Void) (*InstanceList, error)
	// import a known db connection
	ImportInstance(context.Context, *InstanceResponse) (*common.Void, error)
	// get current sessions
	GetSessions(context.Context, *common.Void) (*SessionList, error)
	// run a query (and log the fact one did, return result
	Query(context.Context, *QueryRequest) (*QueryResult, error)
	// run a query (and log the fact one did, return result
	Exec(context.Context, *QueryRequest) (*common.Void, error)
}

func RegisterPostgresMgrServer(s *grpc.Server, srv PostgresMgrServer) {
	s.RegisterService(&_PostgresMgr_serviceDesc, srv)
}

func _PostgresMgr_CreateInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresMgrServer).CreateInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgresmgr.PostgresMgr/CreateInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresMgrServer).CreateInstance(ctx, req.(*InstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresMgr_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresMgrServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgresmgr.PostgresMgr/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresMgrServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresMgr_GetInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresMgrServer).GetInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgresmgr.PostgresMgr/GetInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresMgrServer).GetInstances(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresMgr_ImportInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresMgrServer).ImportInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgresmgr.PostgresMgr/ImportInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresMgrServer).ImportInstance(ctx, req.(*InstanceResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresMgr_GetSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresMgrServer).GetSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgresmgr.PostgresMgr/GetSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresMgrServer).GetSessions(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresMgr_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresMgrServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgresmgr.PostgresMgr/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresMgrServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresMgr_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresMgrServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgresmgr.PostgresMgr/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresMgrServer).Exec(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PostgresMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "postgresmgr.PostgresMgr",
	HandlerType: (*PostgresMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInstance",
			Handler:    _PostgresMgr_CreateInstance_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _PostgresMgr_ChangePassword_Handler,
		},
		{
			MethodName: "GetInstances",
			Handler:    _PostgresMgr_GetInstances_Handler,
		},
		{
			MethodName: "ImportInstance",
			Handler:    _PostgresMgr_ImportInstance_Handler,
		},
		{
			MethodName: "GetSessions",
			Handler:    _PostgresMgr_GetSessions_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _PostgresMgr_Query_Handler,
		},
		{
			MethodName: "Exec",
			Handler:    _PostgresMgr_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/postgresmgr/postgresmgr.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/postgresmgr/postgresmgr.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 874 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x56, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x96, 0xe3, 0x34, 0x49, 0x8f, 0x43, 0xa9, 0x86, 0xa5, 0x32, 0xd1, 0x82, 0x22, 0x83, 0x50,
	0x84, 0x44, 0xca, 0x96, 0x7f, 0xb1, 0x08, 0x6d, 0x1b, 0xb6, 0x58, 0xea, 0x56, 0x61, 0x5a, 0x56,
	0x42, 0x5c, 0x4d, 0x9d, 0xc1, 0x6b, 0x64, 0xcf, 0x18, 0xcf, 0x44, 0xd9, 0xbe, 0x08, 0x12, 0xd7,
	0xbc, 0x02, 0xaf, 0xc2, 0xfb, 0xa0, 0x19, 0xcf, 0xc4, 0xe3, 0x34, 0x89, 0xf6, 0x2a, 0xf3, 0x9d,
	0x39, 0x3f, 0xdf, 0xf9, 0x99, 0x13, 0xc3, 0x37, 0x29, 0xcf, 0x09, 0x4b, 0xa7, 0x09, 0x67, 0x15,
	0x59, 0xac, 0x38, 0x5f, 0x4c, 0x19, 0x95, 0xa7, 0xa4, 0xcc, 0xc4, 0x69, 0xc9, 0x85, 0x4c, 0x2b,
	0x2a, 0x8a, 0xb4, 0x72, 0xcf, 0xd3, 0xb2, 0xe2, 0x92, 0xa3, 0xc0, 0x11, 0x8d, 0xa6, 0x7b, 0xdc,
	0x24, 0xbc, 0x28, 0x38, 0x33, 0x3f, 0xb5, 0x71, 0x54, 0x41, 0x37, 0x66, 0xbf, 0x73, 0x74, 0x04,
	0x9d, 0x78, 0x16, 0x7a, 0x63, 0x6f, 0xd2, 0xc5, 0x9d, 0x78, 0x86, 0x10, 0x74, 0xaf, 0x49, 0x41,
	0xc3, 0xce, 0xd8, 0x9b, 0x1c, 0x62, 0x7d, 0x46, 0x27, 0xd0, 0x9b, 0x9d, 0xff, 0x22, 0x68, 0x15,
	0xfa, 0x5a, 0x6a, 0x10, 0x1a, 0xc1, 0x60, 0x4e, 0x84, 0x58, 0xf1, 0x6a, 0x11, 0x76, 0xf5, 0xcd,
	0x1a, 0x2b, 0x3f, 0x3f, 0x71, 0x21, 0xc3, 0x83, 0xda, 0x8f, 0x3a, 0x47, 0xdf, 0xc2, 0xdb, 0x31,
	0x13, 0x92, 0xb0, 0x84, 0x62, 0xfa, 0xe7, 0x92, 0x0a, 0xb9, 0x0e, 0xe7, 0x39, 0xe1, 0xac, 0x69,
	0xc7, 0x31, 0xfd, 0x03, 0x8e, 0x1b, 0x53, 0x51, 0x72, 0x26, 0xe8, 0x2e, 0x5b, 0x4d, 0xd4, 0xd8,
	0x3e, 0xa0, 0xe9, 0xef, 0xa0, 0xd9, 0x75, 0x62, 0xfd, 0x06, 0xef, 0x5e, 0xbc, 0x22, 0x2c, 0xa5,
	0x56, 0xcb, 0x21, 0xab, 0x9d, 0x7b, 0x3b, 0x9c, 0x77, 0x76, 0x38, 0xf7, 0x1d, 0xe7, 0xaf, 0xe1,
	0x64, 0xd3, 0xb9, 0x49, 0xe7, 0x29, 0xf4, 0x4d, 0x20, 0x1d, 0x20, 0x38, 0x8b, 0xa6, 0x6e, 0xcf,
	0xb7, 0x52, 0xc2, 0xd6, 0x04, 0x8d, 0x21, 0xb8, 0xa6, 0xab, 0x0d, 0x2a, 0xae, 0x28, 0x4a, 0x60,
	0x68, 0x4b, 0x78, 0x95, 0x09, 0x89, 0xbe, 0x83, 0x43, 0x8b, 0x45, 0xe8, 0x8d, 0xfd, 0x49, 0x70,
	0xf6, 0x7e, 0x2b, 0xe2, 0x66, 0xc1, 0x71, 0xa3, 0xaf, 0x46, 0x62, 0x7e, 0xa9, 0x5c, 0x9b, 0x48,
	0x06, 0x45, 0xff, 0x78, 0xd0, 0xbf, 0xa1, 0x42, 0x64, 0x9c, 0xad, 0xd3, 0xf7, 0x9a, 0xf4, 0xd1,
	0x31, 0xf8, 0xf3, 0xcc, 0xd2, 0x53, 0x47, 0x55, 0x40, 0x55, 0x48, 0xa6, 0x3a, 0x69, 0xba, 0x63,
	0xb1, 0xba, 0x9b, 0x11, 0x49, 0xee, 0x88, 0xa0, 0x76, 0xc0, 0x2c, 0x46, 0x21, 0xf4, 0x9f, 0x2d,
	0x16, 0x15, 0x15, 0xc2, 0xcc, 0x98, 0x85, 0xaa, 0x14, 0xcf, 0xca, 0x32, 0xcf, 0x12, 0x22, 0x33,
	0xce, 0xc2, 0x5e, 0x5d, 0x0a, 0x47, 0x14, 0xfd, 0x00, 0x81, 0x21, 0xa9, 0x2b, 0xf1, 0x19, 0x0c,
	0x0c, 0xb4, 0x85, 0x78, 0xd4, 0x2a, 0x84, 0xb9, 0xc4, 0x6b, 0xad, 0xe8, 0x09, 0x1c, 0x9a, 0x73,
	0x3c, 0xb3, 0x39, 0x79, 0x4d, 0x4e, 0xdb, 0x26, 0xf8, 0x16, 0x86, 0x3f, 0x2f, 0x69, 0x75, 0x6f,
	0x1b, 0xe6, 0xe6, 0xe6, 0x6d, 0xe4, 0xb6, 0xc5, 0x1e, 0x3d, 0x82, 0x03, 0x6d, 0x6f, 0x8a, 0x54,
	0x83, 0xe8, 0x5f, 0x0f, 0x7a, 0x17, 0x3c, 0x5f, 0x16, 0x4c, 0xb5, 0xe4, 0x92, 0xdf, 0xde, 0x97,
	0xd6, 0x9d, 0x41, 0xf5, 0xeb, 0xd5, 0xf2, 0x8e, 0x7d, 0xbd, 0x5a, 0x6e, 0x9f, 0x8f, 0xdf, 0x7e,
	0xe9, 0x57, 0x94, 0xa5, 0xf2, 0x95, 0x2e, 0xb7, 0x8f, 0x0d, 0x42, 0x8f, 0xe1, 0x70, 0x5e, 0xd1,
	0x24, 0x53, 0x19, 0xeb, 0x72, 0xfb, 0xb8, 0x11, 0x28, 0x6a, 0x37, 0x09, 0xc9, 0xa9, 0x2e, 0xb5,
	0x8f, 0x6b, 0xa0, 0x12, 0xbc, 0x5e, 0xe6, 0x39, 0xb9, 0xcb, 0x69, 0xd8, 0x1f, 0x7b, 0x93, 0x01,
	0x5e, 0xe3, 0xe8, 0x09, 0xf8, 0x98, 0xaf, 0xd0, 0x27, 0xd0, 0x7b, 0x9e, 0xd1, 0x7c, 0x61, 0xcb,
	0x8e, 0x5a, 0x65, 0xd7, 0x57, 0xd8, 0x68, 0x44, 0x7f, 0x7b, 0x70, 0xa0, 0x8f, 0x8a, 0x64, 0x2c,
	0x94, 0x2b, 0x9d, 0xe8, 0x00, 0x1b, 0xa4, 0x68, 0x9c, 0xdf, 0x4b, 0x5a, 0x8f, 0xe4, 0x10, 0xd7,
	0x40, 0x4d, 0xc3, 0xf3, 0x9c, 0x13, 0x49, 0x5f, 0x92, 0x7c, 0x59, 0x67, 0xeb, 0x61, 0x57, 0x84,
	0x3e, 0x00, 0x88, 0x99, 0xfc, 0xea, 0x8b, 0x5a, 0xa1, 0x4e, 0xdc, 0x91, 0x28, 0x0f, 0x37, 0xb2,
	0xca, 0x58, 0x5a, 0x2b, 0xd4, 0xd3, 0xe6, 0x8a, 0xa2, 0x3b, 0x08, 0x4c, 0x6f, 0xc5, 0x32, 0x97,
	0xe8, 0x53, 0xe8, 0xd7, 0x3d, 0xb1, 0x79, 0xbd, 0xd3, 0x7e, 0xc9, 0xfa, 0x0e, 0x5b, 0x1d, 0xf4,
	0x11, 0x74, 0x31, 0x5f, 0x29, 0xda, 0x4a, 0xf7, 0xb8, 0xa5, 0x8b, 0xf9, 0x0a, 0xeb, 0xdb, 0xe8,
	0x2f, 0x0f, 0x06, 0x3a, 0xc8, 0x15, 0x4f, 0x1f, 0x6c, 0xed, 0x13, 0xe8, 0xa9, 0x47, 0x13, 0xcf,
	0x6c, 0x8f, 0x6b, 0xa4, 0xfa, 0x76, 0x9b, 0x15, 0x54, 0x48, 0x52, 0x94, 0x3a, 0xf5, 0xb7, 0x70,
	0x23, 0x68, 0x46, 0xaa, 0xeb, 0x8c, 0x54, 0x6b, 0x30, 0x0f, 0x76, 0x0c, 0x66, 0xaf, 0x19, 0xcc,
	0xb3, 0xff, 0x7c, 0x08, 0xe6, 0x86, 0xf2, 0x8b, 0xb4, 0x42, 0x2f, 0xe0, 0xe8, 0xa2, 0xa2, 0x44,
	0x52, 0xbb, 0x2d, 0xd0, 0xe3, 0x1d, 0x6b, 0x45, 0x3f, 0x84, 0xd1, 0xfe, 0xa5, 0x83, 0x7e, 0x85,
	0xa3, 0xf6, 0xea, 0x43, 0x6f, 0xb0, 0x17, 0x47, 0x1f, 0xee, 0xd5, 0x31, 0xae, 0xbf, 0x86, 0xe1,
	0x25, 0x95, 0xcd, 0x52, 0x1b, 0x4e, 0xcd, 0x5f, 0xe4, 0x4b, 0x9e, 0x2d, 0x46, 0xef, 0x6d, 0xe5,
	0xa5, 0x17, 0xc6, 0xf7, 0x70, 0x14, 0x17, 0x25, 0xaf, 0xd6, 0xb6, 0x68, 0x7f, 0x12, 0xa3, 0x96,
	0x67, 0xf4, 0x25, 0x04, 0x97, 0x54, 0xda, 0x65, 0xb2, 0x11, 0x36, 0xdc, 0xb6, 0x7a, 0x74, 0xd4,
	0xa7, 0xa6, 0x5d, 0xa8, 0xcd, 0xcc, 0xdd, 0x2a, 0x1b, 0xd6, 0xee, 0x50, 0x9e, 0x42, 0xf7, 0xc7,
	0xd7, 0x34, 0xd9, 0x67, 0xdc, 0x22, 0x72, 0x3e, 0x81, 0x8f, 0x19, 0x95, 0xee, 0x07, 0x85, 0xf9,
	0xc4, 0x50, 0xdf, 0x14, 0xae, 0x93, 0xbb, 0x9e, 0xfe, 0xa4, 0xf8, 0xfc, 0xff, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xdb, 0x51, 0x57, 0xee, 0xcb, 0x08, 0x00, 0x00,
}
