// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/rfsimulator/rfsimulator.proto
// DO NOT EDIT!

/*
Package rfsimulator is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/rfsimulator/rfsimulator.proto

It has these top-level messages:
	Packet
	Position
	Connection
	ListPositionsResponse
	ListConnectionsResponse
*/
package rfsimulator

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Packet struct {
	Payload string    `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
	Source  *Position `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
}

func (m *Packet) Reset()                    { *m = Packet{} }
func (m *Packet) String() string            { return proto.CompactTextString(m) }
func (*Packet) ProtoMessage()               {}
func (*Packet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Packet) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *Packet) GetSource() *Position {
	if m != nil {
		return m.Source
	}
	return nil
}

type Position struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Position) Reset()                    { *m = Position{} }
func (m *Position) String() string            { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()               {}
func (*Position) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Position) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Connection struct {
	Probability float64   `protobuf:"fixed64,1,opt,name=probability" json:"probability,omitempty"`
	Source      *Position `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	Destination *Position `protobuf:"bytes,3,opt,name=destination" json:"destination,omitempty"`
	PacketsSent uint32    `protobuf:"varint,4,opt,name=packets_sent,json=packetsSent" json:"packets_sent,omitempty"`
}

func (m *Connection) Reset()                    { *m = Connection{} }
func (m *Connection) String() string            { return proto.CompactTextString(m) }
func (*Connection) ProtoMessage()               {}
func (*Connection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Connection) GetProbability() float64 {
	if m != nil {
		return m.Probability
	}
	return 0
}

func (m *Connection) GetSource() *Position {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Connection) GetDestination() *Position {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *Connection) GetPacketsSent() uint32 {
	if m != nil {
		return m.PacketsSent
	}
	return 0
}

type ListPositionsResponse struct {
	Positions []*Position `protobuf:"bytes,1,rep,name=positions" json:"positions,omitempty"`
}

func (m *ListPositionsResponse) Reset()                    { *m = ListPositionsResponse{} }
func (m *ListPositionsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListPositionsResponse) ProtoMessage()               {}
func (*ListPositionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListPositionsResponse) GetPositions() []*Position {
	if m != nil {
		return m.Positions
	}
	return nil
}

type ListConnectionsResponse struct {
	Connections []*Connection `protobuf:"bytes,1,rep,name=connections" json:"connections,omitempty"`
}

func (m *ListConnectionsResponse) Reset()                    { *m = ListConnectionsResponse{} }
func (m *ListConnectionsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListConnectionsResponse) ProtoMessage()               {}
func (*ListConnectionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListConnectionsResponse) GetConnections() []*Connection {
	if m != nil {
		return m.Connections
	}
	return nil
}

func init() {
	proto.RegisterType((*Packet)(nil), "rfsimulator.Packet")
	proto.RegisterType((*Position)(nil), "rfsimulator.Position")
	proto.RegisterType((*Connection)(nil), "rfsimulator.Connection")
	proto.RegisterType((*ListPositionsResponse)(nil), "rfsimulator.ListPositionsResponse")
	proto.RegisterType((*ListConnectionsResponse)(nil), "rfsimulator.ListConnectionsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RFSimulator service

type RFSimulatorClient interface {
	UpdateConnectionProbability(ctx context.Context, in *Connection, opts ...grpc.CallOption) (*common.Void, error)
	RegisterConnection(ctx context.Context, in *Connection, opts ...grpc.CallOption) (*common.Void, error)
	RegisterPosition(ctx context.Context, in *Position, opts ...grpc.CallOption) (*common.Void, error)
	PopPacket(ctx context.Context, in *Position, opts ...grpc.CallOption) (*Packet, error)
	PushPacket(ctx context.Context, in *Packet, opts ...grpc.CallOption) (*common.Void, error)
	ListPositions(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*ListPositionsResponse, error)
	ListConnections(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*ListConnectionsResponse, error)
	DeregisterPosition(ctx context.Context, in *Position, opts ...grpc.CallOption) (*common.Void, error)
}

type rFSimulatorClient struct {
	cc *grpc.ClientConn
}

func NewRFSimulatorClient(cc *grpc.ClientConn) RFSimulatorClient {
	return &rFSimulatorClient{cc}
}

func (c *rFSimulatorClient) UpdateConnectionProbability(ctx context.Context, in *Connection, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/rfsimulator.RFSimulator/UpdateConnectionProbability", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rFSimulatorClient) RegisterConnection(ctx context.Context, in *Connection, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/rfsimulator.RFSimulator/RegisterConnection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rFSimulatorClient) RegisterPosition(ctx context.Context, in *Position, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/rfsimulator.RFSimulator/RegisterPosition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rFSimulatorClient) PopPacket(ctx context.Context, in *Position, opts ...grpc.CallOption) (*Packet, error) {
	out := new(Packet)
	err := grpc.Invoke(ctx, "/rfsimulator.RFSimulator/PopPacket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rFSimulatorClient) PushPacket(ctx context.Context, in *Packet, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/rfsimulator.RFSimulator/PushPacket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rFSimulatorClient) ListPositions(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*ListPositionsResponse, error) {
	out := new(ListPositionsResponse)
	err := grpc.Invoke(ctx, "/rfsimulator.RFSimulator/ListPositions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rFSimulatorClient) ListConnections(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*ListConnectionsResponse, error) {
	out := new(ListConnectionsResponse)
	err := grpc.Invoke(ctx, "/rfsimulator.RFSimulator/ListConnections", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rFSimulatorClient) DeregisterPosition(ctx context.Context, in *Position, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/rfsimulator.RFSimulator/DeregisterPosition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RFSimulator service

type RFSimulatorServer interface {
	UpdateConnectionProbability(context.Context, *Connection) (*common.Void, error)
	RegisterConnection(context.Context, *Connection) (*common.Void, error)
	RegisterPosition(context.Context, *Position) (*common.Void, error)
	PopPacket(context.Context, *Position) (*Packet, error)
	PushPacket(context.Context, *Packet) (*common.Void, error)
	ListPositions(context.Context, *common.Void) (*ListPositionsResponse, error)
	ListConnections(context.Context, *common.Void) (*ListConnectionsResponse, error)
	DeregisterPosition(context.Context, *Position) (*common.Void, error)
}

func RegisterRFSimulatorServer(s *grpc.Server, srv RFSimulatorServer) {
	s.RegisterService(&_RFSimulator_serviceDesc, srv)
}

func _RFSimulator_UpdateConnectionProbability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Connection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RFSimulatorServer).UpdateConnectionProbability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rfsimulator.RFSimulator/UpdateConnectionProbability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RFSimulatorServer).UpdateConnectionProbability(ctx, req.(*Connection))
	}
	return interceptor(ctx, in, info, handler)
}

func _RFSimulator_RegisterConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Connection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RFSimulatorServer).RegisterConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rfsimulator.RFSimulator/RegisterConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RFSimulatorServer).RegisterConnection(ctx, req.(*Connection))
	}
	return interceptor(ctx, in, info, handler)
}

func _RFSimulator_RegisterPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Position)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RFSimulatorServer).RegisterPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rfsimulator.RFSimulator/RegisterPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RFSimulatorServer).RegisterPosition(ctx, req.(*Position))
	}
	return interceptor(ctx, in, info, handler)
}

func _RFSimulator_PopPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Position)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RFSimulatorServer).PopPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rfsimulator.RFSimulator/PopPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RFSimulatorServer).PopPacket(ctx, req.(*Position))
	}
	return interceptor(ctx, in, info, handler)
}

func _RFSimulator_PushPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Packet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RFSimulatorServer).PushPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rfsimulator.RFSimulator/PushPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RFSimulatorServer).PushPacket(ctx, req.(*Packet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RFSimulator_ListPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RFSimulatorServer).ListPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rfsimulator.RFSimulator/ListPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RFSimulatorServer).ListPositions(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _RFSimulator_ListConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RFSimulatorServer).ListConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rfsimulator.RFSimulator/ListConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RFSimulatorServer).ListConnections(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _RFSimulator_DeregisterPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Position)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RFSimulatorServer).DeregisterPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rfsimulator.RFSimulator/DeregisterPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RFSimulatorServer).DeregisterPosition(ctx, req.(*Position))
	}
	return interceptor(ctx, in, info, handler)
}

var _RFSimulator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rfsimulator.RFSimulator",
	HandlerType: (*RFSimulatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateConnectionProbability",
			Handler:    _RFSimulator_UpdateConnectionProbability_Handler,
		},
		{
			MethodName: "RegisterConnection",
			Handler:    _RFSimulator_RegisterConnection_Handler,
		},
		{
			MethodName: "RegisterPosition",
			Handler:    _RFSimulator_RegisterPosition_Handler,
		},
		{
			MethodName: "PopPacket",
			Handler:    _RFSimulator_PopPacket_Handler,
		},
		{
			MethodName: "PushPacket",
			Handler:    _RFSimulator_PushPacket_Handler,
		},
		{
			MethodName: "ListPositions",
			Handler:    _RFSimulator_ListPositions_Handler,
		},
		{
			MethodName: "ListConnections",
			Handler:    _RFSimulator_ListConnections_Handler,
		},
		{
			MethodName: "DeregisterPosition",
			Handler:    _RFSimulator_DeregisterPosition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/rfsimulator/rfsimulator.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/rfsimulator/rfsimulator.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x94, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0x63, 0x1a, 0x05, 0x32, 0x6e, 0x05, 0x1a, 0x54, 0xd5, 0x0a, 0x12, 0x32, 0x2b, 0x84,
	0x72, 0xc1, 0x15, 0xed, 0x01, 0x2a, 0xc4, 0x85, 0xa2, 0x72, 0xe9, 0xc1, 0xb8, 0xc0, 0x15, 0x6d,
	0xec, 0x25, 0xac, 0x88, 0x77, 0x56, 0xbb, 0x1b, 0xa1, 0xbe, 0x01, 0xaf, 0xc4, 0xdb, 0xa1, 0x98,
	0x35, 0x5e, 0xb7, 0x4e, 0x05, 0x3d, 0x65, 0xf3, 0xeb, 0xff, 0xbf, 0xb1, 0x66, 0x46, 0x03, 0xaf,
	0x96, 0xb4, 0xe2, 0x6a, 0x99, 0x95, 0xa4, 0x0c, 0xaf, 0x7e, 0x10, 0x55, 0x99, 0x12, 0xee, 0x90,
	0x6b, 0x69, 0x0f, 0xcd, 0x57, 0x2b, 0xeb, 0xf5, 0x8a, 0x3b, 0x32, 0xe1, 0x3b, 0xd3, 0x86, 0x1c,
	0x61, 0x1c, 0x48, 0xb3, 0xec, 0x06, 0x4c, 0x49, 0x75, 0x4d, 0xca, 0xff, 0xfc, 0x09, 0xb3, 0x0f,
	0x30, 0xc9, 0x79, 0xf9, 0x5d, 0x38, 0x4c, 0xe0, 0xae, 0xe6, 0x97, 0x2b, 0xe2, 0x55, 0x12, 0xa5,
	0xd1, 0x7c, 0x5a, 0xb4, 0x7f, 0xf1, 0x39, 0x4c, 0x2c, 0xad, 0x4d, 0x29, 0x92, 0x3b, 0x69, 0x34,
	0x8f, 0x8f, 0xf6, 0xb3, 0xf0, 0x23, 0x72, 0xb2, 0xd2, 0x49, 0x52, 0x85, 0x37, 0xb1, 0xc7, 0x70,
	0xaf, 0xd5, 0x10, 0x61, 0xac, 0x78, 0x2d, 0x3c, 0xb1, 0x79, 0xb3, 0x5f, 0x11, 0xc0, 0x29, 0x29,
	0x25, 0xca, 0xc6, 0x92, 0x42, 0xac, 0x0d, 0x2d, 0xf8, 0x42, 0xae, 0xa4, 0xbb, 0x6c, 0x9c, 0x51,
	0x11, 0x4a, 0xff, 0x59, 0x1f, 0x5f, 0x42, 0x5c, 0x09, 0xeb, 0xa4, 0xe2, 0x1b, 0x39, 0xd9, 0xb9,
	0x29, 0x13, 0x3a, 0xf1, 0x09, 0xec, 0xea, 0xa6, 0x17, 0xf6, 0x8b, 0x15, 0xca, 0x25, 0xe3, 0x34,
	0x9a, 0xef, 0x15, 0xb1, 0xd7, 0x2e, 0x84, 0x72, 0xec, 0x1c, 0xf6, 0xcf, 0xa5, 0x75, 0x6d, 0xde,
	0x16, 0xc2, 0x6a, 0x52, 0x56, 0xe0, 0x31, 0x4c, 0x75, 0x2b, 0x26, 0x51, 0xba, 0xb3, 0xbd, 0x64,
	0xe7, 0x63, 0x1f, 0xe1, 0x60, 0x43, 0xeb, 0x9a, 0xd1, 0xf1, 0x4e, 0x20, 0x2e, 0x3b, 0xd9, 0x13,
	0x0f, 0x7a, 0xc4, 0x2e, 0x56, 0x84, 0xde, 0xa3, 0x9f, 0x63, 0x88, 0x8b, 0xb3, 0x8b, 0xd6, 0x87,
	0x67, 0xf0, 0xe8, 0x93, 0xae, 0xb8, 0x13, 0x5d, 0x20, 0x0f, 0xba, 0xbb, 0x0d, 0x3a, 0xdb, 0xcd,
	0xfc, 0xa6, 0x7c, 0x26, 0x59, 0xb1, 0x11, 0xbe, 0x01, 0x2c, 0xc4, 0x52, 0x5a, 0x27, 0x4c, 0x30,
	0xbe, 0x7f, 0x8e, 0x9f, 0xc0, 0x83, 0x36, 0xfe, 0x77, 0x3d, 0x86, 0x5b, 0x34, 0x10, 0x9d, 0xe6,
	0xa4, 0xfd, 0x9e, 0x6e, 0xc9, 0x3c, 0xec, 0xcb, 0x8d, 0x97, 0x8d, 0xf0, 0x05, 0x40, 0xbe, 0xb6,
	0xdf, 0x7c, 0x76, 0xc8, 0x74, 0xad, 0xda, 0x29, 0xec, 0xf5, 0x66, 0x8c, 0x3d, 0xc3, 0x8c, 0xf5,
	0x18, 0x83, 0xdb, 0xc0, 0x46, 0xf8, 0x1e, 0xee, 0x5f, 0x19, 0xed, 0x15, 0xcc, 0xd3, 0x6b, 0x98,
	0x81, 0x35, 0x60, 0x23, 0x7c, 0x0d, 0xf8, 0x4e, 0x98, 0xdb, 0x35, 0xee, 0xed, 0x1c, 0x9e, 0x29,
	0xe1, 0xc2, 0x63, 0xe0, 0xcf, 0xc3, 0xe6, 0x1e, 0x84, 0x88, 0xc5, 0xa4, 0x39, 0x07, 0xc7, 0xbf,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x5e, 0x29, 0xea, 0xa3, 0x87, 0x04, 0x00, 0x00,
}
