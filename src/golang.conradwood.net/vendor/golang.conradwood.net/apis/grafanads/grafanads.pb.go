// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/grafanads/grafanads.proto
// DO NOT EDIT!

/*
Package grafanads is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/grafanads/grafanads.proto

It has these top-level messages:
	PingRequest
	PingResponse
*/
package grafanads

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import h2gproxy "golang.conradwood.net/apis/h2gproxy"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// comment: message pingrequest
type PingRequest struct {
	// comment: payload
	Payload string `protobuf:"bytes,2,opt,name=Payload" json:"Payload,omitempty"`
	// comment: sequencenumber
	SequenceNumber uint32 `protobuf:"varint,1,opt,name=SequenceNumber" json:"SequenceNumber,omitempty"`
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PingRequest) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *PingRequest) GetSequenceNumber() uint32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

// comment: message pingresponse
type PingResponse struct {
	// comment: field pingresponse.response
	Response *PingRequest `protobuf:"bytes,1,opt,name=Response" json:"Response,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PingResponse) GetResponse() *PingRequest {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*PingRequest)(nil), "grafanads.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "grafanads.PingResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GrafanaDSService service

type GrafanaDSServiceClient interface {
	// comment: rpc ping
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// grafana endpoint
	StreamHTTP(ctx context.Context, in *h2gproxy.StreamRequest, opts ...grpc.CallOption) (GrafanaDSService_StreamHTTPClient, error)
}

type grafanaDSServiceClient struct {
	cc *grpc.ClientConn
}

func NewGrafanaDSServiceClient(cc *grpc.ClientConn) GrafanaDSServiceClient {
	return &grafanaDSServiceClient{cc}
}

func (c *grafanaDSServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/grafanads.GrafanaDSService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafanaDSServiceClient) StreamHTTP(ctx context.Context, in *h2gproxy.StreamRequest, opts ...grpc.CallOption) (GrafanaDSService_StreamHTTPClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GrafanaDSService_serviceDesc.Streams[0], c.cc, "/grafanads.GrafanaDSService/StreamHTTP", opts...)
	if err != nil {
		return nil, err
	}
	x := &grafanaDSServiceStreamHTTPClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GrafanaDSService_StreamHTTPClient interface {
	Recv() (*h2gproxy.StreamDataResponse, error)
	grpc.ClientStream
}

type grafanaDSServiceStreamHTTPClient struct {
	grpc.ClientStream
}

func (x *grafanaDSServiceStreamHTTPClient) Recv() (*h2gproxy.StreamDataResponse, error) {
	m := new(h2gproxy.StreamDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GrafanaDSService service

type GrafanaDSServiceServer interface {
	// comment: rpc ping
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// grafana endpoint
	StreamHTTP(*h2gproxy.StreamRequest, GrafanaDSService_StreamHTTPServer) error
}

func RegisterGrafanaDSServiceServer(s *grpc.Server, srv GrafanaDSServiceServer) {
	s.RegisterService(&_GrafanaDSService_serviceDesc, srv)
}

func _GrafanaDSService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafanaDSServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafanads.GrafanaDSService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafanaDSServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrafanaDSService_StreamHTTP_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(h2gproxy.StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrafanaDSServiceServer).StreamHTTP(m, &grafanaDSServiceStreamHTTPServer{stream})
}

type GrafanaDSService_StreamHTTPServer interface {
	Send(*h2gproxy.StreamDataResponse) error
	grpc.ServerStream
}

type grafanaDSServiceStreamHTTPServer struct {
	grpc.ServerStream
}

func (x *grafanaDSServiceStreamHTTPServer) Send(m *h2gproxy.StreamDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _GrafanaDSService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grafanads.GrafanaDSService",
	HandlerType: (*GrafanaDSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GrafanaDSService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamHTTP",
			Handler:       _GrafanaDSService_StreamHTTP_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "golang.conradwood.net/apis/grafanads/grafanads.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/grafanads/grafanads.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x90, 0x51, 0x4f, 0xc2, 0x30,
	0x14, 0x85, 0x53, 0x63, 0x54, 0x2e, 0x6a, 0x4c, 0x1f, 0x84, 0x10, 0x1f, 0x08, 0x31, 0x84, 0xa7,
	0x62, 0xaa, 0x89, 0xef, 0x04, 0xa3, 0x4f, 0xba, 0x6c, 0xfc, 0x81, 0xcb, 0x76, 0xad, 0x4b, 0xa0,
	0x77, 0x76, 0x45, 0xe5, 0x6f, 0xf8, 0x8b, 0xcd, 0x18, 0x1b, 0x0b, 0x46, 0xdf, 0x6e, 0x4f, 0xcf,
	0x39, 0xb7, 0xfd, 0xe0, 0xce, 0xf0, 0x02, 0xad, 0x51, 0x31, 0x5b, 0x87, 0xc9, 0x27, 0x73, 0xa2,
	0x2c, 0xf9, 0x31, 0x66, 0x69, 0x3e, 0x36, 0x0e, 0x5f, 0xd1, 0x62, 0xd2, 0x98, 0x54, 0xe6, 0xd8,
	0xb3, 0x6c, 0xd5, 0x42, 0x4f, 0xff, 0x53, 0xf0, 0xa6, 0x4d, 0xe6, 0xf8, 0x6b, 0x5d, 0x0f, 0x65,
	0x7c, 0xf0, 0x02, 0xed, 0x20, 0xb5, 0x26, 0xa4, 0xf7, 0x15, 0xe5, 0x5e, 0x76, 0xe1, 0x38, 0xc0,
	0xf5, 0x82, 0x31, 0xe9, 0x1e, 0xf4, 0xc5, 0xa8, 0x15, 0x56, 0x47, 0x39, 0x84, 0xf3, 0xa8, 0x30,
	0xd9, 0x98, 0x9e, 0x57, 0xcb, 0x39, 0xb9, 0xae, 0xe8, 0x8b, 0xd1, 0x59, 0xb8, 0xa7, 0x0e, 0x26,
	0x70, 0x5a, 0x16, 0xe6, 0x19, 0xdb, 0x9c, 0xa4, 0x86, 0x93, 0x6a, 0xde, 0x24, 0xda, 0xfa, 0x52,
	0xed, 0xfe, 0xd0, 0xd8, 0x1d, 0xd6, 0x3e, 0xfd, 0x2d, 0xe0, 0xe2, 0xb1, 0xf4, 0x4c, 0xa3, 0x88,
	0xdc, 0x47, 0x1a, 0x93, 0xbc, 0x87, 0xc3, 0xc2, 0x2d, 0xff, 0x88, 0xf7, 0x3a, 0xbf, 0xf4, 0xed,
	0x0b, 0x1e, 0x00, 0x22, 0xef, 0x08, 0x97, 0x4f, 0xb3, 0x59, 0x20, 0x3b, 0xaa, 0x26, 0x50, 0xaa,
	0x55, 0xfe, 0x6a, 0xff, 0x62, 0x8a, 0x1e, 0xab, 0x92, 0x1b, 0x31, 0x19, 0xc2, 0xb5, 0x25, 0xdf,
	0x84, 0xbb, 0xc5, 0x5d, 0xf0, 0xdd, 0xed, 0x9e, 0x1f, 0x6d, 0xc0, 0xde, 0xfe, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x12, 0xb0, 0x01, 0x3d, 0xcf, 0x01, 0x00, 0x00,
}
