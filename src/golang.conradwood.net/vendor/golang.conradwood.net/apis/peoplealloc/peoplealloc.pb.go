// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/peoplealloc/peoplealloc.proto
// DO NOT EDIT!

/*
Package peoplealloc is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/peoplealloc/peoplealloc.proto

It has these top-level messages:
	Person
	PersonGroup
	ProjectStatsRequest
	ProjectStats
	Project
	ProjectGroup
	GetAllocationRequest
	ProjectSlot
	SlotList
	AllocationList
	PersonAllocation
	PersonAllocationList
	AllocationString
	GetSlotRequest
	SubmitPersonAllocation
	SubmitPersonAllocationList
	ClaimRequest
*/
package peoplealloc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"
import auth "golang.conradwood.net/apis/auth"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Person struct {
	User *auth.User `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
}

func (m *Person) Reset()                    { *m = Person{} }
func (m *Person) String() string            { return proto.CompactTextString(m) }
func (*Person) ProtoMessage()               {}
func (*Person) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Person) GetUser() *auth.User {
	if m != nil {
		return m.User
	}
	return nil
}

type PersonGroup struct {
	Person []*Person `protobuf:"bytes,1,rep,name=Person" json:"Person,omitempty"`
}

func (m *PersonGroup) Reset()                    { *m = PersonGroup{} }
func (m *PersonGroup) String() string            { return proto.CompactTextString(m) }
func (*PersonGroup) ProtoMessage()               {}
func (*PersonGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PersonGroup) GetPerson() []*Person {
	if m != nil {
		return m.Person
	}
	return nil
}

type ProjectStatsRequest struct {
	ProjectID int32 `protobuf:"varint,1,opt,name=ProjectID" json:"ProjectID,omitempty"`
}

func (m *ProjectStatsRequest) Reset()                    { *m = ProjectStatsRequest{} }
func (m *ProjectStatsRequest) String() string            { return proto.CompactTextString(m) }
func (*ProjectStatsRequest) ProtoMessage()               {}
func (*ProjectStatsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ProjectStatsRequest) GetProjectID() int32 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

type ProjectStats struct {
	TotalDaysSpent int32 `protobuf:"varint,1,opt,name=TotalDaysSpent" json:"TotalDaysSpent,omitempty"`
}

func (m *ProjectStats) Reset()                    { *m = ProjectStats{} }
func (m *ProjectStats) String() string            { return proto.CompactTextString(m) }
func (*ProjectStats) ProtoMessage()               {}
func (*ProjectStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ProjectStats) GetTotalDaysSpent() int32 {
	if m != nil {
		return m.TotalDaysSpent
	}
	return 0
}

type Project struct {
	ID        int32  `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	TotalDays int32  `protobuf:"varint,3,opt,name=TotalDays" json:"TotalDays,omitempty"`
	MaxPeople int32  `protobuf:"varint,4,opt,name=MaxPeople" json:"MaxPeople,omitempty"`
	SponsorID string `protobuf:"bytes,5,opt,name=SponsorID" json:"SponsorID,omitempty"`
	PMID      string `protobuf:"bytes,6,opt,name=PMID" json:"PMID,omitempty"`
	Completed uint32 `protobuf:"varint,7,opt,name=Completed" json:"Completed,omitempty"`
}

func (m *Project) Reset()                    { *m = Project{} }
func (m *Project) String() string            { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()               {}
func (*Project) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Project) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Project) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Project) GetTotalDays() int32 {
	if m != nil {
		return m.TotalDays
	}
	return 0
}

func (m *Project) GetMaxPeople() int32 {
	if m != nil {
		return m.MaxPeople
	}
	return 0
}

func (m *Project) GetSponsorID() string {
	if m != nil {
		return m.SponsorID
	}
	return ""
}

func (m *Project) GetPMID() string {
	if m != nil {
		return m.PMID
	}
	return ""
}

func (m *Project) GetCompleted() uint32 {
	if m != nil {
		return m.Completed
	}
	return 0
}

type ProjectGroup struct {
	Project []*Project `protobuf:"bytes,1,rep,name=Project" json:"Project,omitempty"`
}

func (m *ProjectGroup) Reset()                    { *m = ProjectGroup{} }
func (m *ProjectGroup) String() string            { return proto.CompactTextString(m) }
func (*ProjectGroup) ProtoMessage()               {}
func (*ProjectGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ProjectGroup) GetProject() []*Project {
	if m != nil {
		return m.Project
	}
	return nil
}

type GetAllocationRequest struct {
	Year      int32 `protobuf:"varint,1,opt,name=Year" json:"Year,omitempty"`
	StartWeek int32 `protobuf:"varint,2,opt,name=StartWeek" json:"StartWeek,omitempty"`
	Count     int32 `protobuf:"varint,3,opt,name=Count" json:"Count,omitempty"`
}

func (m *GetAllocationRequest) Reset()                    { *m = GetAllocationRequest{} }
func (m *GetAllocationRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAllocationRequest) ProtoMessage()               {}
func (*GetAllocationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetAllocationRequest) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *GetAllocationRequest) GetStartWeek() int32 {
	if m != nil {
		return m.StartWeek
	}
	return 0
}

func (m *GetAllocationRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ProjectSlot struct {
	ProjectID int32 `protobuf:"varint,1,opt,name=ProjectID" json:"ProjectID,omitempty"`
	// how many people on this project?
	// 1 person over a week means 5 persondays
	// 1.5 persons over a week means 7.5 persondays
	// etc...
	Slots   float32 `protobuf:"fixed32,2,opt,name=Slots" json:"Slots,omitempty"`
	CalYear int32   `protobuf:"varint,3,opt,name=CalYear" json:"CalYear,omitempty"`
	CalWeek int32   `protobuf:"varint,4,opt,name=CalWeek" json:"CalWeek,omitempty"`
}

func (m *ProjectSlot) Reset()                    { *m = ProjectSlot{} }
func (m *ProjectSlot) String() string            { return proto.CompactTextString(m) }
func (*ProjectSlot) ProtoMessage()               {}
func (*ProjectSlot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ProjectSlot) GetProjectID() int32 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

func (m *ProjectSlot) GetSlots() float32 {
	if m != nil {
		return m.Slots
	}
	return 0
}

func (m *ProjectSlot) GetCalYear() int32 {
	if m != nil {
		return m.CalYear
	}
	return 0
}

func (m *ProjectSlot) GetCalWeek() int32 {
	if m != nil {
		return m.CalWeek
	}
	return 0
}

type SlotList struct {
	Slots []*ProjectSlot `protobuf:"bytes,1,rep,name=Slots" json:"Slots,omitempty"`
}

func (m *SlotList) Reset()                    { *m = SlotList{} }
func (m *SlotList) String() string            { return proto.CompactTextString(m) }
func (*SlotList) ProtoMessage()               {}
func (*SlotList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SlotList) GetSlots() []*ProjectSlot {
	if m != nil {
		return m.Slots
	}
	return nil
}

type AllocationList struct {
	Allocations []*PersonAllocation `protobuf:"bytes,1,rep,name=Allocations" json:"Allocations,omitempty"`
}

func (m *AllocationList) Reset()                    { *m = AllocationList{} }
func (m *AllocationList) String() string            { return proto.CompactTextString(m) }
func (*AllocationList) ProtoMessage()               {}
func (*AllocationList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *AllocationList) GetAllocations() []*PersonAllocation {
	if m != nil {
		return m.Allocations
	}
	return nil
}

type PersonAllocation struct {
	Calweek int32    `protobuf:"varint,1,opt,name=Calweek" json:"Calweek,omitempty"`
	Calyear int32    `protobuf:"varint,2,opt,name=Calyear" json:"Calyear,omitempty"`
	Person  *Person  `protobuf:"bytes,3,opt,name=Person" json:"Person,omitempty"`
	Project *Project `protobuf:"bytes,4,opt,name=Project" json:"Project,omitempty"`
	Percent int32    `protobuf:"varint,5,opt,name=Percent" json:"Percent,omitempty"`
}

func (m *PersonAllocation) Reset()                    { *m = PersonAllocation{} }
func (m *PersonAllocation) String() string            { return proto.CompactTextString(m) }
func (*PersonAllocation) ProtoMessage()               {}
func (*PersonAllocation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *PersonAllocation) GetCalweek() int32 {
	if m != nil {
		return m.Calweek
	}
	return 0
}

func (m *PersonAllocation) GetCalyear() int32 {
	if m != nil {
		return m.Calyear
	}
	return 0
}

func (m *PersonAllocation) GetPerson() *Person {
	if m != nil {
		return m.Person
	}
	return nil
}

func (m *PersonAllocation) GetProject() *Project {
	if m != nil {
		return m.Project
	}
	return nil
}

func (m *PersonAllocation) GetPercent() int32 {
	if m != nil {
		return m.Percent
	}
	return 0
}

type PersonAllocationList struct {
	Allocations []*PersonAllocation `protobuf:"bytes,1,rep,name=Allocations" json:"Allocations,omitempty"`
}

func (m *PersonAllocationList) Reset()                    { *m = PersonAllocationList{} }
func (m *PersonAllocationList) String() string            { return proto.CompactTextString(m) }
func (*PersonAllocationList) ProtoMessage()               {}
func (*PersonAllocationList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PersonAllocationList) GetAllocations() []*PersonAllocation {
	if m != nil {
		return m.Allocations
	}
	return nil
}

type AllocationString struct {
	// the string as the user submitted it
	Submission string `protobuf:"bytes,1,opt,name=Submission" json:"Submission,omitempty"`
	ProjectID  string `protobuf:"bytes,2,opt,name=ProjectID" json:"ProjectID,omitempty"`
	CalWeek    int32  `protobuf:"varint,3,opt,name=CalWeek" json:"CalWeek,omitempty"`
	CalYear    int32  `protobuf:"varint,4,opt,name=CalYear" json:"CalYear,omitempty"`
}

func (m *AllocationString) Reset()                    { *m = AllocationString{} }
func (m *AllocationString) String() string            { return proto.CompactTextString(m) }
func (*AllocationString) ProtoMessage()               {}
func (*AllocationString) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *AllocationString) GetSubmission() string {
	if m != nil {
		return m.Submission
	}
	return ""
}

func (m *AllocationString) GetProjectID() string {
	if m != nil {
		return m.ProjectID
	}
	return ""
}

func (m *AllocationString) GetCalWeek() int32 {
	if m != nil {
		return m.CalWeek
	}
	return 0
}

func (m *AllocationString) GetCalYear() int32 {
	if m != nil {
		return m.CalYear
	}
	return 0
}

type GetSlotRequest struct {
	CalWeek int32 `protobuf:"varint,1,opt,name=CalWeek" json:"CalWeek,omitempty"`
	CalYear int32 `protobuf:"varint,2,opt,name=CalYear" json:"CalYear,omitempty"`
}

func (m *GetSlotRequest) Reset()                    { *m = GetSlotRequest{} }
func (m *GetSlotRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSlotRequest) ProtoMessage()               {}
func (*GetSlotRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GetSlotRequest) GetCalWeek() int32 {
	if m != nil {
		return m.CalWeek
	}
	return 0
}

func (m *GetSlotRequest) GetCalYear() int32 {
	if m != nil {
		return m.CalYear
	}
	return 0
}

type SubmitPersonAllocation struct {
	Calweek   int32  `protobuf:"varint,1,opt,name=Calweek" json:"Calweek,omitempty"`
	Calyear   int32  `protobuf:"varint,2,opt,name=Calyear" json:"Calyear,omitempty"`
	PersonID  string `protobuf:"bytes,3,opt,name=PersonID" json:"PersonID,omitempty"`
	ProjectID int32  `protobuf:"varint,4,opt,name=ProjectID" json:"ProjectID,omitempty"`
	Percent   int32  `protobuf:"varint,5,opt,name=Percent" json:"Percent,omitempty"`
}

func (m *SubmitPersonAllocation) Reset()                    { *m = SubmitPersonAllocation{} }
func (m *SubmitPersonAllocation) String() string            { return proto.CompactTextString(m) }
func (*SubmitPersonAllocation) ProtoMessage()               {}
func (*SubmitPersonAllocation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *SubmitPersonAllocation) GetCalweek() int32 {
	if m != nil {
		return m.Calweek
	}
	return 0
}

func (m *SubmitPersonAllocation) GetCalyear() int32 {
	if m != nil {
		return m.Calyear
	}
	return 0
}

func (m *SubmitPersonAllocation) GetPersonID() string {
	if m != nil {
		return m.PersonID
	}
	return ""
}

func (m *SubmitPersonAllocation) GetProjectID() int32 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

func (m *SubmitPersonAllocation) GetPercent() int32 {
	if m != nil {
		return m.Percent
	}
	return 0
}

type SubmitPersonAllocationList struct {
	Allocations []*SubmitPersonAllocation `protobuf:"bytes,1,rep,name=Allocations" json:"Allocations,omitempty"`
}

func (m *SubmitPersonAllocationList) Reset()                    { *m = SubmitPersonAllocationList{} }
func (m *SubmitPersonAllocationList) String() string            { return proto.CompactTextString(m) }
func (*SubmitPersonAllocationList) ProtoMessage()               {}
func (*SubmitPersonAllocationList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *SubmitPersonAllocationList) GetAllocations() []*SubmitPersonAllocation {
	if m != nil {
		return m.Allocations
	}
	return nil
}

type ClaimRequest struct {
	ProjectID int32 `protobuf:"varint,1,opt,name=ProjectID" json:"ProjectID,omitempty"`
	Calweek   int32 `protobuf:"varint,2,opt,name=Calweek" json:"Calweek,omitempty"`
	Calyear   int32 `protobuf:"varint,3,opt,name=Calyear" json:"Calyear,omitempty"`
}

func (m *ClaimRequest) Reset()                    { *m = ClaimRequest{} }
func (m *ClaimRequest) String() string            { return proto.CompactTextString(m) }
func (*ClaimRequest) ProtoMessage()               {}
func (*ClaimRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ClaimRequest) GetProjectID() int32 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

func (m *ClaimRequest) GetCalweek() int32 {
	if m != nil {
		return m.Calweek
	}
	return 0
}

func (m *ClaimRequest) GetCalyear() int32 {
	if m != nil {
		return m.Calyear
	}
	return 0
}

func init() {
	proto.RegisterType((*Person)(nil), "peoplealloc.Person")
	proto.RegisterType((*PersonGroup)(nil), "peoplealloc.PersonGroup")
	proto.RegisterType((*ProjectStatsRequest)(nil), "peoplealloc.ProjectStatsRequest")
	proto.RegisterType((*ProjectStats)(nil), "peoplealloc.ProjectStats")
	proto.RegisterType((*Project)(nil), "peoplealloc.Project")
	proto.RegisterType((*ProjectGroup)(nil), "peoplealloc.ProjectGroup")
	proto.RegisterType((*GetAllocationRequest)(nil), "peoplealloc.GetAllocationRequest")
	proto.RegisterType((*ProjectSlot)(nil), "peoplealloc.ProjectSlot")
	proto.RegisterType((*SlotList)(nil), "peoplealloc.SlotList")
	proto.RegisterType((*AllocationList)(nil), "peoplealloc.AllocationList")
	proto.RegisterType((*PersonAllocation)(nil), "peoplealloc.PersonAllocation")
	proto.RegisterType((*PersonAllocationList)(nil), "peoplealloc.PersonAllocationList")
	proto.RegisterType((*AllocationString)(nil), "peoplealloc.AllocationString")
	proto.RegisterType((*GetSlotRequest)(nil), "peoplealloc.GetSlotRequest")
	proto.RegisterType((*SubmitPersonAllocation)(nil), "peoplealloc.SubmitPersonAllocation")
	proto.RegisterType((*SubmitPersonAllocationList)(nil), "peoplealloc.SubmitPersonAllocationList")
	proto.RegisterType((*ClaimRequest)(nil), "peoplealloc.ClaimRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PeopleAllocate service

type PeopleAllocateClient interface {
	GetPersons(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PersonGroup, error)
	GetProjects(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*ProjectGroup, error)
	GetWeekAllocations(ctx context.Context, in *GetAllocationRequest, opts ...grpc.CallOption) (*AllocationList, error)
	CreateProject(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Project, error)
	GetSlots(ctx context.Context, in *GetSlotRequest, opts ...grpc.CallOption) (*SlotList, error)
	// updated number of people on a project in a week??
	SaveSlot(ctx context.Context, in *ProjectSlot, opts ...grpc.CallOption) (*common.Void, error)
	// given a string from a UI it will parse it, update the allocations and
	// return a list of changed person allocations
	// string might be something like "arm(50%),cnw(10%),sjh(100%)" to indicate
	// percentage allocations for a given project, person week...
	SubmitAllocationStringWeek(ctx context.Context, in *AllocationString, opts ...grpc.CallOption) (*PersonAllocationList, error)
	// updated who's allocated to a project in a week
	SubmitAllocation(ctx context.Context, in *SubmitPersonAllocationList, opts ...grpc.CallOption) (*PersonAllocationList, error)
	// pre-fill dev-on-duty allocations
	PrefillDevOnDuty(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PersonAllocationList, error)
	// *I* want to be dev-on-duty
	ClaimDevOnDuty(ctx context.Context, in *ClaimRequest, opts ...grpc.CallOption) (*common.Void, error)
	WhoIsDevOnDuty(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*Person, error)
	// get statistics of projects
	GetStats(ctx context.Context, in *ProjectStatsRequest, opts ...grpc.CallOption) (*ProjectStats, error)
	// panics
	Panic(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	// eats all your memory really fast
	EatMem(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	// eats all your memory a bit slower than EatMem
	LeakMem(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
}

type peopleAllocateClient struct {
	cc *grpc.ClientConn
}

func NewPeopleAllocateClient(cc *grpc.ClientConn) PeopleAllocateClient {
	return &peopleAllocateClient{cc}
}

func (c *peopleAllocateClient) GetPersons(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PersonGroup, error) {
	out := new(PersonGroup)
	err := grpc.Invoke(ctx, "/peoplealloc.PeopleAllocate/GetPersons", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peopleAllocateClient) GetProjects(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*ProjectGroup, error) {
	out := new(ProjectGroup)
	err := grpc.Invoke(ctx, "/peoplealloc.PeopleAllocate/GetProjects", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peopleAllocateClient) GetWeekAllocations(ctx context.Context, in *GetAllocationRequest, opts ...grpc.CallOption) (*AllocationList, error) {
	out := new(AllocationList)
	err := grpc.Invoke(ctx, "/peoplealloc.PeopleAllocate/GetWeekAllocations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peopleAllocateClient) CreateProject(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := grpc.Invoke(ctx, "/peoplealloc.PeopleAllocate/CreateProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peopleAllocateClient) GetSlots(ctx context.Context, in *GetSlotRequest, opts ...grpc.CallOption) (*SlotList, error) {
	out := new(SlotList)
	err := grpc.Invoke(ctx, "/peoplealloc.PeopleAllocate/GetSlots", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peopleAllocateClient) SaveSlot(ctx context.Context, in *ProjectSlot, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/peoplealloc.PeopleAllocate/SaveSlot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peopleAllocateClient) SubmitAllocationStringWeek(ctx context.Context, in *AllocationString, opts ...grpc.CallOption) (*PersonAllocationList, error) {
	out := new(PersonAllocationList)
	err := grpc.Invoke(ctx, "/peoplealloc.PeopleAllocate/SubmitAllocationStringWeek", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peopleAllocateClient) SubmitAllocation(ctx context.Context, in *SubmitPersonAllocationList, opts ...grpc.CallOption) (*PersonAllocationList, error) {
	out := new(PersonAllocationList)
	err := grpc.Invoke(ctx, "/peoplealloc.PeopleAllocate/SubmitAllocation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peopleAllocateClient) PrefillDevOnDuty(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PersonAllocationList, error) {
	out := new(PersonAllocationList)
	err := grpc.Invoke(ctx, "/peoplealloc.PeopleAllocate/PrefillDevOnDuty", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peopleAllocateClient) ClaimDevOnDuty(ctx context.Context, in *ClaimRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/peoplealloc.PeopleAllocate/ClaimDevOnDuty", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peopleAllocateClient) WhoIsDevOnDuty(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*Person, error) {
	out := new(Person)
	err := grpc.Invoke(ctx, "/peoplealloc.PeopleAllocate/WhoIsDevOnDuty", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peopleAllocateClient) GetStats(ctx context.Context, in *ProjectStatsRequest, opts ...grpc.CallOption) (*ProjectStats, error) {
	out := new(ProjectStats)
	err := grpc.Invoke(ctx, "/peoplealloc.PeopleAllocate/GetStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peopleAllocateClient) Panic(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/peoplealloc.PeopleAllocate/Panic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peopleAllocateClient) EatMem(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/peoplealloc.PeopleAllocate/EatMem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peopleAllocateClient) LeakMem(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/peoplealloc.PeopleAllocate/LeakMem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PeopleAllocate service

type PeopleAllocateServer interface {
	GetPersons(context.Context, *common.Void) (*PersonGroup, error)
	GetProjects(context.Context, *common.Void) (*ProjectGroup, error)
	GetWeekAllocations(context.Context, *GetAllocationRequest) (*AllocationList, error)
	CreateProject(context.Context, *Project) (*Project, error)
	GetSlots(context.Context, *GetSlotRequest) (*SlotList, error)
	// updated number of people on a project in a week??
	SaveSlot(context.Context, *ProjectSlot) (*common.Void, error)
	// given a string from a UI it will parse it, update the allocations and
	// return a list of changed person allocations
	// string might be something like "arm(50%),cnw(10%),sjh(100%)" to indicate
	// percentage allocations for a given project, person week...
	SubmitAllocationStringWeek(context.Context, *AllocationString) (*PersonAllocationList, error)
	// updated who's allocated to a project in a week
	SubmitAllocation(context.Context, *SubmitPersonAllocationList) (*PersonAllocationList, error)
	// pre-fill dev-on-duty allocations
	PrefillDevOnDuty(context.Context, *common.Void) (*PersonAllocationList, error)
	// *I* want to be dev-on-duty
	ClaimDevOnDuty(context.Context, *ClaimRequest) (*common.Void, error)
	WhoIsDevOnDuty(context.Context, *common.Void) (*Person, error)
	// get statistics of projects
	GetStats(context.Context, *ProjectStatsRequest) (*ProjectStats, error)
	// panics
	Panic(context.Context, *common.Void) (*common.Void, error)
	// eats all your memory really fast
	EatMem(context.Context, *common.Void) (*common.Void, error)
	// eats all your memory a bit slower than EatMem
	LeakMem(context.Context, *common.Void) (*common.Void, error)
}

func RegisterPeopleAllocateServer(s *grpc.Server, srv PeopleAllocateServer) {
	s.RegisterService(&_PeopleAllocate_serviceDesc, srv)
}

func _PeopleAllocate_GetPersons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeopleAllocateServer).GetPersons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peoplealloc.PeopleAllocate/GetPersons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeopleAllocateServer).GetPersons(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeopleAllocate_GetProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeopleAllocateServer).GetProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peoplealloc.PeopleAllocate/GetProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeopleAllocateServer).GetProjects(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeopleAllocate_GetWeekAllocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeopleAllocateServer).GetWeekAllocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peoplealloc.PeopleAllocate/GetWeekAllocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeopleAllocateServer).GetWeekAllocations(ctx, req.(*GetAllocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeopleAllocate_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeopleAllocateServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peoplealloc.PeopleAllocate/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeopleAllocateServer).CreateProject(ctx, req.(*Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeopleAllocate_GetSlots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeopleAllocateServer).GetSlots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peoplealloc.PeopleAllocate/GetSlots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeopleAllocateServer).GetSlots(ctx, req.(*GetSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeopleAllocate_SaveSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectSlot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeopleAllocateServer).SaveSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peoplealloc.PeopleAllocate/SaveSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeopleAllocateServer).SaveSlot(ctx, req.(*ProjectSlot))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeopleAllocate_SubmitAllocationStringWeek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocationString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeopleAllocateServer).SubmitAllocationStringWeek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peoplealloc.PeopleAllocate/SubmitAllocationStringWeek",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeopleAllocateServer).SubmitAllocationStringWeek(ctx, req.(*AllocationString))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeopleAllocate_SubmitAllocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitPersonAllocationList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeopleAllocateServer).SubmitAllocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peoplealloc.PeopleAllocate/SubmitAllocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeopleAllocateServer).SubmitAllocation(ctx, req.(*SubmitPersonAllocationList))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeopleAllocate_PrefillDevOnDuty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeopleAllocateServer).PrefillDevOnDuty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peoplealloc.PeopleAllocate/PrefillDevOnDuty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeopleAllocateServer).PrefillDevOnDuty(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeopleAllocate_ClaimDevOnDuty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeopleAllocateServer).ClaimDevOnDuty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peoplealloc.PeopleAllocate/ClaimDevOnDuty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeopleAllocateServer).ClaimDevOnDuty(ctx, req.(*ClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeopleAllocate_WhoIsDevOnDuty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeopleAllocateServer).WhoIsDevOnDuty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peoplealloc.PeopleAllocate/WhoIsDevOnDuty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeopleAllocateServer).WhoIsDevOnDuty(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeopleAllocate_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeopleAllocateServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peoplealloc.PeopleAllocate/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeopleAllocateServer).GetStats(ctx, req.(*ProjectStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeopleAllocate_Panic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeopleAllocateServer).Panic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peoplealloc.PeopleAllocate/Panic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeopleAllocateServer).Panic(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeopleAllocate_EatMem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeopleAllocateServer).EatMem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peoplealloc.PeopleAllocate/EatMem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeopleAllocateServer).EatMem(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeopleAllocate_LeakMem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeopleAllocateServer).LeakMem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peoplealloc.PeopleAllocate/LeakMem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeopleAllocateServer).LeakMem(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _PeopleAllocate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "peoplealloc.PeopleAllocate",
	HandlerType: (*PeopleAllocateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPersons",
			Handler:    _PeopleAllocate_GetPersons_Handler,
		},
		{
			MethodName: "GetProjects",
			Handler:    _PeopleAllocate_GetProjects_Handler,
		},
		{
			MethodName: "GetWeekAllocations",
			Handler:    _PeopleAllocate_GetWeekAllocations_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _PeopleAllocate_CreateProject_Handler,
		},
		{
			MethodName: "GetSlots",
			Handler:    _PeopleAllocate_GetSlots_Handler,
		},
		{
			MethodName: "SaveSlot",
			Handler:    _PeopleAllocate_SaveSlot_Handler,
		},
		{
			MethodName: "SubmitAllocationStringWeek",
			Handler:    _PeopleAllocate_SubmitAllocationStringWeek_Handler,
		},
		{
			MethodName: "SubmitAllocation",
			Handler:    _PeopleAllocate_SubmitAllocation_Handler,
		},
		{
			MethodName: "PrefillDevOnDuty",
			Handler:    _PeopleAllocate_PrefillDevOnDuty_Handler,
		},
		{
			MethodName: "ClaimDevOnDuty",
			Handler:    _PeopleAllocate_ClaimDevOnDuty_Handler,
		},
		{
			MethodName: "WhoIsDevOnDuty",
			Handler:    _PeopleAllocate_WhoIsDevOnDuty_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _PeopleAllocate_GetStats_Handler,
		},
		{
			MethodName: "Panic",
			Handler:    _PeopleAllocate_Panic_Handler,
		},
		{
			MethodName: "EatMem",
			Handler:    _PeopleAllocate_EatMem_Handler,
		},
		{
			MethodName: "LeakMem",
			Handler:    _PeopleAllocate_LeakMem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/peoplealloc/peoplealloc.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/peoplealloc/peoplealloc.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 929 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x56, 0xdd, 0x8e, 0xdb, 0x44,
	0x14, 0x96, 0x13, 0xe7, 0x67, 0x4f, 0xb6, 0x51, 0x34, 0x0d, 0xc8, 0xb8, 0xb4, 0x4a, 0x5d, 0x28,
	0x11, 0x95, 0x5c, 0x29, 0x8b, 0x2a, 0x28, 0x52, 0x11, 0xc4, 0x55, 0x14, 0xa9, 0x0b, 0xc1, 0x29,
	0xac, 0xb8, 0x59, 0x31, 0x4d, 0x86, 0xad, 0xa9, 0xe3, 0x31, 0xf6, 0x64, 0x97, 0xbd, 0xe7, 0x82,
	0xc7, 0xe0, 0x25, 0xb8, 0xe0, 0x82, 0x77, 0xab, 0xe6, 0xc7, 0xf6, 0xd8, 0x72, 0xb2, 0xb9, 0xd8,
	0x9b, 0x5d, 0xcf, 0xf9, 0x9f, 0xef, 0x7c, 0xe7, 0x64, 0xe0, 0xcb, 0x0b, 0x1a, 0xe2, 0xe8, 0xc2,
	0x5d, 0xd1, 0x28, 0xc1, 0xeb, 0x2b, 0x4a, 0xd7, 0x6e, 0x44, 0xd8, 0x53, 0x1c, 0x07, 0xe9, 0xd3,
	0x98, 0xd0, 0x38, 0x24, 0x38, 0x0c, 0xe9, 0x4a, 0xff, 0x76, 0xe3, 0x84, 0x32, 0x8a, 0x7a, 0x9a,
	0xc8, 0x76, 0xf7, 0x84, 0x59, 0xd1, 0xcd, 0x86, 0x46, 0xea, 0x9f, 0x74, 0xb6, 0x3f, 0xdf, 0x63,
	0x8f, 0xb7, 0xec, 0xad, 0xf8, 0x23, 0x6d, 0x9d, 0x31, 0xb4, 0x17, 0x24, 0x49, 0x69, 0x84, 0x1e,
	0x80, 0xf9, 0x53, 0x4a, 0x12, 0xcb, 0x18, 0x19, 0xe3, 0xde, 0x04, 0x5c, 0x61, 0xc4, 0x25, 0xbe,
	0x90, 0x3b, 0xcf, 0xa1, 0x27, 0x2d, 0x67, 0x09, 0xdd, 0xc6, 0xe8, 0x49, 0xe6, 0x68, 0x19, 0xa3,
	0xe6, 0xb8, 0x37, 0xb9, 0xeb, 0xea, 0xb7, 0x90, 0x2a, 0x5f, 0x99, 0x38, 0x27, 0x70, 0x77, 0x91,
	0xd0, 0xdf, 0xc9, 0x8a, 0x2d, 0x19, 0x66, 0xa9, 0x4f, 0xfe, 0xd8, 0x92, 0x94, 0xa1, 0x8f, 0xe1,
	0x48, 0x89, 0xe7, 0x9e, 0xc8, 0xdb, 0xf2, 0x0b, 0x81, 0xf3, 0x0c, 0x8e, 0x75, 0x27, 0xf4, 0x18,
	0xfa, 0xaf, 0x29, 0xc3, 0xa1, 0x87, 0xaf, 0xd3, 0x65, 0x4c, 0x22, 0xa6, 0x5c, 0x2a, 0x52, 0xe7,
	0x3f, 0x03, 0x3a, 0xca, 0x11, 0xf5, 0xa1, 0x91, 0x87, 0x6e, 0xcc, 0x3d, 0x84, 0xc0, 0xfc, 0x1e,
	0x6f, 0x88, 0xd5, 0x18, 0x19, 0xe3, 0x23, 0x5f, 0x7c, 0xf3, 0x2a, 0xf2, 0x08, 0x56, 0x53, 0x56,
	0x91, 0x0b, 0xb8, 0xf6, 0x14, 0xff, 0xb9, 0x10, 0x77, 0xb3, 0x4c, 0xa9, 0xcd, 0x05, 0x5c, 0xbb,
	0x8c, 0x69, 0x94, 0xd2, 0x64, 0xee, 0x59, 0x2d, 0x11, 0xb4, 0x10, 0xf0, 0x6c, 0x8b, 0xd3, 0xb9,
	0x67, 0xb5, 0x65, 0x36, 0xfe, 0xcd, 0x3d, 0xa6, 0x74, 0x13, 0x87, 0x84, 0x91, 0xb5, 0xd5, 0x19,
	0x19, 0xe3, 0x3b, 0x7e, 0x21, 0x70, 0x5e, 0xe4, 0x77, 0x96, 0x28, 0xbb, 0xf9, 0x55, 0x14, 0xcc,
	0xc3, 0x32, 0xcc, 0x52, 0xe7, 0x67, 0x46, 0xce, 0x39, 0x0c, 0x67, 0x84, 0x7d, 0xcb, 0x95, 0x98,
	0x05, 0x34, 0xca, 0x90, 0x46, 0x60, 0xfe, 0x42, 0x70, 0xa2, 0x90, 0x10, 0xdf, 0xa2, 0x76, 0x86,
	0x13, 0x76, 0x46, 0xc8, 0x3b, 0x01, 0x48, 0xcb, 0x2f, 0x04, 0x68, 0x08, 0xad, 0x29, 0xdd, 0x46,
	0x4c, 0x21, 0x22, 0x0f, 0xce, 0x16, 0x7a, 0x59, 0x4f, 0x42, 0x7a, 0x43, 0x03, 0x79, 0x08, 0x6e,
	0x95, 0x8a, 0xe0, 0x0d, 0x5f, 0x1e, 0x90, 0x05, 0x9d, 0x29, 0x0e, 0x45, 0x35, 0x32, 0x74, 0x76,
	0x54, 0x1a, 0x51, 0x8e, 0x99, 0x6b, 0xf8, 0xd1, 0x79, 0x0e, 0x5d, 0xee, 0xfc, 0x2a, 0x48, 0x19,
	0x72, 0xb3, 0xa8, 0x12, 0x10, 0xab, 0x0e, 0x10, 0x6e, 0xa0, 0xf2, 0x39, 0x3f, 0x42, 0xbf, 0xc0,
	0x43, 0x44, 0xf8, 0x06, 0x7a, 0x85, 0x24, 0x8b, 0x73, 0xbf, 0x86, 0xbf, 0x1a, 0x8e, 0xba, 0x87,
	0xf3, 0xbf, 0x01, 0x83, 0xaa, 0x85, 0xaa, 0xfe, 0x8a, 0x57, 0x6f, 0xe4, 0xd5, 0xf3, 0xa3, 0xd2,
	0x5c, 0xf3, 0x1b, 0x37, 0x72, 0x0d, 0x3f, 0x6a, 0x43, 0xd4, 0x14, 0x53, 0xb7, 0x6f, 0x88, 0x74,
	0x2e, 0x98, 0xc2, 0x7a, 0x3f, 0x17, 0x78, 0xda, 0x05, 0x49, 0x56, 0x7c, 0x50, 0x5a, 0x32, 0xad,
	0x3a, 0x3a, 0x67, 0x30, 0xac, 0x96, 0x7f, 0x3b, 0xc0, 0xfc, 0x65, 0xc0, 0xa0, 0x38, 0x2f, 0x59,
	0x12, 0x44, 0x17, 0xe8, 0x01, 0xc0, 0x72, 0xfb, 0x66, 0x13, 0xa4, 0x69, 0x20, 0xb6, 0x05, 0x9f,
	0x05, 0x4d, 0x52, 0x26, 0x91, 0x1c, 0x4c, 0x8d, 0x44, 0x1a, 0x29, 0x9a, 0x25, 0x52, 0xe8, 0x44,
	0x32, 0x4b, 0x44, 0x72, 0x3c, 0xe8, 0xcf, 0x88, 0x24, 0x81, 0xe2, 0xbf, 0x16, 0xc5, 0xd8, 0x19,
	0xa5, 0x51, 0x8e, 0xf2, 0x8f, 0x01, 0x1f, 0x8a, 0x32, 0xd9, 0xad, 0xf4, 0xda, 0x86, 0xae, 0x8c,
	0x33, 0xf7, 0xc4, 0x4d, 0x8e, 0xfc, 0xfc, 0x5c, 0x86, 0xc0, 0xac, 0xce, 0xd1, 0xee, 0x46, 0xae,
	0xc0, 0xae, 0xaf, 0x50, 0xb4, 0xf3, 0x65, 0x5d, 0x3b, 0x1f, 0x95, 0xda, 0x59, 0xef, 0x5d, 0x6e,
	0xea, 0xaf, 0x70, 0x3c, 0x0d, 0x71, 0xb0, 0x39, 0x68, 0x6b, 0xeb, 0xd0, 0x34, 0x76, 0x42, 0xd3,
	0x2c, 0x41, 0x33, 0xf9, 0xb7, 0x03, 0x7d, 0xb9, 0x50, 0x55, 0x5e, 0x82, 0xbe, 0x00, 0x98, 0x11,
	0x55, 0x58, 0x8a, 0x8e, 0x5d, 0xf5, 0x03, 0xf7, 0x33, 0x0d, 0xd6, 0xb6, 0x55, 0xc3, 0x48, 0xb9,
	0x2e, 0x9f, 0x41, 0x8f, 0x7b, 0xc9, 0x62, 0xaa, 0x6e, 0x1f, 0xd5, 0x8d, 0x8b, 0xf4, 0x7b, 0x0d,
	0x68, 0x46, 0xc4, 0xde, 0xd3, 0x2e, 0x8e, 0x1e, 0x96, 0x1c, 0xea, 0xf6, 0xaa, 0x7d, 0xaf, 0x64,
	0x52, 0xc1, 0xff, 0x6b, 0xb8, 0x33, 0x4d, 0x08, 0x66, 0x24, 0x9b, 0xc8, 0xda, 0x81, 0xb5, 0x6b,
	0xa5, 0xe8, 0x05, 0x74, 0x15, 0x87, 0x53, 0x74, 0xaf, 0x5a, 0x88, 0x46, 0x6d, 0xfb, 0x83, 0x72,
	0x43, 0xb3, 0x35, 0x39, 0x81, 0xee, 0x12, 0x5f, 0x12, 0xb1, 0xa6, 0x77, 0xee, 0x48, 0xbb, 0x84,
	0x10, 0x3a, 0xcf, 0xe8, 0x54, 0x9d, 0x61, 0x31, 0x29, 0xf7, 0x77, 0xdc, 0x55, 0x9a, 0xd8, 0x0f,
	0xf7, 0xee, 0x09, 0x51, 0xd3, 0x39, 0x0c, 0xaa, 0xf1, 0xd1, 0x67, 0x07, 0xf0, 0x91, 0x3b, 0x1f,
	0x12, 0x7f, 0x0a, 0x83, 0x45, 0x42, 0x7e, 0x0b, 0xc2, 0xd0, 0x23, 0x97, 0x3f, 0x44, 0xde, 0x96,
	0x5d, 0x57, 0x38, 0x70, 0x40, 0x90, 0xaf, 0xa0, 0x2f, 0xe8, 0x5e, 0x84, 0x28, 0x13, 0x47, 0x9f,
	0x85, 0x0a, 0x7e, 0x27, 0xd0, 0x3f, 0x7b, 0x4b, 0xe7, 0xe9, 0xae, 0xec, 0x75, 0xeb, 0x1d, 0xcd,
	0x64, 0xa3, 0xc5, 0x13, 0x67, 0x54, 0xdb, 0x28, 0xed, 0xc9, 0x54, 0x4f, 0x62, 0xe9, 0xfc, 0x08,
	0x5a, 0x0b, 0x1c, 0x05, 0xab, 0x4a, 0xd2, 0x72, 0x89, 0x9f, 0x40, 0xfb, 0x25, 0x66, 0xa7, 0x64,
	0xb3, 0xd7, 0xea, 0x53, 0xe8, 0xbc, 0x22, 0xf8, 0xdd, 0x0d, 0x66, 0xdf, 0x3d, 0x81, 0xc7, 0x11,
	0x61, 0xfa, 0x3b, 0x53, 0xbd, 0x3c, 0xf9, 0x53, 0x53, 0x2f, 0xf4, 0x6f, 0xc3, 0x78, 0xd3, 0x16,
	0x0f, 0xce, 0x93, 0xf7, 0x01, 0x00, 0x00, 0xff, 0xff, 0x44, 0x44, 0x3f, 0x92, 0x15, 0x0b, 0x00,
	0x00,
}
