// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/mathutils/mathutils.proto
// DO NOT EDIT!

/*
Package mathutils is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/mathutils/mathutils.proto

It has these top-level messages:
	DoubleTensor
	IntTensor
	MultivariateNormal
*/
package mathutils

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DoubleTensor struct {
	// Order matters,
	// as it represents layout. Ordering is outermost -> innermost
	Shape []uint64 `protobuf:"varint,1,rep,packed,name=Shape" json:"Shape,omitempty"`
	// double values which comprise the tensor (limited to 2k values)
	Values []float64 `protobuf:"fixed64,2,rep,packed,name=Values" json:"Values,omitempty"`
}

func (m *DoubleTensor) Reset()                    { *m = DoubleTensor{} }
func (m *DoubleTensor) String() string            { return proto.CompactTextString(m) }
func (*DoubleTensor) ProtoMessage()               {}
func (*DoubleTensor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DoubleTensor) GetShape() []uint64 {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *DoubleTensor) GetValues() []float64 {
	if m != nil {
		return m.Values
	}
	return nil
}

type IntTensor struct {
	// Order matters,
	// as it represents layout. Ordering is outermost -> innermost
	Shape []uint64 `protobuf:"varint,1,rep,packed,name=Shape" json:"Shape,omitempty"`
	// double values which comprise the tensor (limited to 2k values)
	Values []int64 `protobuf:"varint,2,rep,packed,name=Values" json:"Values,omitempty"`
}

func (m *IntTensor) Reset()                    { *m = IntTensor{} }
func (m *IntTensor) String() string            { return proto.CompactTextString(m) }
func (*IntTensor) ProtoMessage()               {}
func (*IntTensor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IntTensor) GetShape() []uint64 {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *IntTensor) GetValues() []int64 {
	if m != nil {
		return m.Values
	}
	return nil
}

type MultivariateNormal struct {
	// Dimension k of the MVN. Should be >= 1
	Dim uint32 `protobuf:"varint,1,opt,name=Dim" json:"Dim,omitempty"`
	// Mean vector μ for MVN, must be of length k (see field “Dim”)
	Mean []float32 `protobuf:"fixed32,2,rep,packed,name=Mean" json:"Mean,omitempty"`
	// Covariance matrix Σ. Depending on the structure specified, this may be either
	// a (1 x 1) vector for ISOTROPIC covariance, (k x 1) vector for DIAGONAL covariance,
	// and (k x k) tensor for FULL covariance
	// ISOTROPIC: covariance is σI, where I is the k-dimensional identity, and σ is scalar
	// DIAGONAL: covariance is a diagonal matrix with values equal to k-dim vector
	// FULL: covariance is a (k x k) PSD matrix with nonzero off-diagonal values
	CovarianceMatrixIsotropic *DoubleTensor `protobuf:"bytes,3,opt,name=CovarianceMatrixIsotropic" json:"CovarianceMatrixIsotropic,omitempty"`
	CovarianceMatrixDiagonal  *DoubleTensor `protobuf:"bytes,4,opt,name=CovarianceMatrixDiagonal" json:"CovarianceMatrixDiagonal,omitempty"`
	CovarianceMatrixFull      *DoubleTensor `protobuf:"bytes,5,opt,name=CovarianceMatrixFull" json:"CovarianceMatrixFull,omitempty"`
}

func (m *MultivariateNormal) Reset()                    { *m = MultivariateNormal{} }
func (m *MultivariateNormal) String() string            { return proto.CompactTextString(m) }
func (*MultivariateNormal) ProtoMessage()               {}
func (*MultivariateNormal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MultivariateNormal) GetDim() uint32 {
	if m != nil {
		return m.Dim
	}
	return 0
}

func (m *MultivariateNormal) GetMean() []float32 {
	if m != nil {
		return m.Mean
	}
	return nil
}

func (m *MultivariateNormal) GetCovarianceMatrixIsotropic() *DoubleTensor {
	if m != nil {
		return m.CovarianceMatrixIsotropic
	}
	return nil
}

func (m *MultivariateNormal) GetCovarianceMatrixDiagonal() *DoubleTensor {
	if m != nil {
		return m.CovarianceMatrixDiagonal
	}
	return nil
}

func (m *MultivariateNormal) GetCovarianceMatrixFull() *DoubleTensor {
	if m != nil {
		return m.CovarianceMatrixFull
	}
	return nil
}

func init() {
	proto.RegisterType((*DoubleTensor)(nil), "mathutils.DoubleTensor")
	proto.RegisterType((*IntTensor)(nil), "mathutils.IntTensor")
	proto.RegisterType((*MultivariateNormal)(nil), "mathutils.MultivariateNormal")
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/mathutils/mathutils.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x92, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x49, 0x93, 0x16, 0x3a, 0x2a, 0xc8, 0x52, 0x74, 0xbd, 0x85, 0x22, 0x92, 0x53, 0x0a,
	0xea, 0x45, 0xf0, 0xa4, 0x41, 0x28, 0x12, 0x0f, 0xa9, 0x7a, 0x9f, 0xa6, 0x4b, 0xba, 0xb0, 0xd9,
	0x09, 0x9b, 0x89, 0xfa, 0xbf, 0xfc, 0x83, 0xd2, 0x58, 0xda, 0x50, 0x6c, 0xc1, 0xdb, 0x9b, 0x7d,
	0x7c, 0x0f, 0x1e, 0x6f, 0xe1, 0xb6, 0x20, 0x83, 0xb6, 0x88, 0x73, 0xb2, 0x0e, 0x17, 0x9f, 0x44,
	0x8b, 0xd8, 0x2a, 0x9e, 0x60, 0xa5, 0xeb, 0x49, 0x89, 0xbc, 0x6c, 0x58, 0x9b, 0x8e, 0x8a, 0x2b,
	0x47, 0x4c, 0x62, 0xb8, 0x79, 0x18, 0xdf, 0xc3, 0x71, 0x42, 0xcd, 0xdc, 0xa8, 0x57, 0x65, 0x6b,
	0x72, 0x62, 0x04, 0xfd, 0xd9, 0x12, 0x2b, 0x25, 0xbd, 0xd0, 0x8f, 0x82, 0xec, 0xf7, 0x10, 0x67,
	0x30, 0x78, 0x47, 0xd3, 0xa8, 0x5a, 0xf6, 0x42, 0x3f, 0xf2, 0xb2, 0xf5, 0x35, 0xbe, 0x83, 0xe1,
	0xd4, 0xf2, 0x3f, 0x50, 0x7f, 0x83, 0x7e, 0xf7, 0x40, 0xa4, 0x8d, 0x61, 0xfd, 0x81, 0x4e, 0x23,
	0xab, 0x17, 0x72, 0x25, 0x1a, 0x71, 0x0a, 0x7e, 0xa2, 0x4b, 0xe9, 0x85, 0x5e, 0x74, 0x92, 0xad,
	0xa4, 0x10, 0x10, 0xa4, 0x0a, 0x6d, 0x8b, 0xf7, 0xb2, 0x56, 0x8b, 0x37, 0xb8, 0x78, 0xa4, 0x16,
	0xb4, 0xb9, 0x4a, 0x91, 0x9d, 0xfe, 0x9a, 0xd6, 0xc4, 0x8e, 0x2a, 0x9d, 0x4b, 0x3f, 0xf4, 0xa2,
	0xa3, 0xeb, 0xf3, 0x78, 0xdb, 0xba, 0xdb, 0x30, 0xdb, 0x4f, 0x8a, 0x19, 0xc8, 0x5d, 0x33, 0xd1,
	0x58, 0x90, 0x45, 0x23, 0x83, 0xc3, 0xa9, 0x7b, 0x41, 0xf1, 0x0c, 0xa3, 0x5d, 0xef, 0xa9, 0x31,
	0x46, 0xf6, 0x0f, 0x07, 0xfe, 0x09, 0x3d, 0x5c, 0xc1, 0xa5, 0x55, 0xdc, 0x9d, 0x7b, 0xfd, 0x01,
	0x56, 0x8b, 0x6f, 0xa3, 0xe6, 0x83, 0x76, 0xe8, 0x9b, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd9,
	0x89, 0x88, 0x18, 0x20, 0x02, 0x00, 0x00,
}
