// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/promconfig/promconfig.proto
// DO NOT EDIT!

/*
Package promconfig is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/promconfig/promconfig.proto

It has these top-level messages:
	Target
	Reporter
	TargetList
*/
package promconfig

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Target struct {
	Name      string    `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Addresses []string  `protobuf:"bytes,2,rep,name=Addresses" json:"Addresses,omitempty"`
	Reporter  *Reporter `protobuf:"bytes,3,opt,name=Reporter" json:"Reporter,omitempty"`
}

func (m *Target) Reset()                    { *m = Target{} }
func (m *Target) String() string            { return proto.CompactTextString(m) }
func (*Target) ProtoMessage()               {}
func (*Target) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Target) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Target) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *Target) GetReporter() *Reporter {
	if m != nil {
		return m.Reporter
	}
	return nil
}

type Reporter struct {
	Reporter string `protobuf:"bytes,1,opt,name=Reporter" json:"Reporter,omitempty"`
}

func (m *Reporter) Reset()                    { *m = Reporter{} }
func (m *Reporter) String() string            { return proto.CompactTextString(m) }
func (*Reporter) ProtoMessage()               {}
func (*Reporter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Reporter) GetReporter() string {
	if m != nil {
		return m.Reporter
	}
	return ""
}

type TargetList struct {
	Reporter *Reporter `protobuf:"bytes,1,opt,name=Reporter" json:"Reporter,omitempty"`
	Targets  []*Target `protobuf:"bytes,2,rep,name=Targets" json:"Targets,omitempty"`
}

func (m *TargetList) Reset()                    { *m = TargetList{} }
func (m *TargetList) String() string            { return proto.CompactTextString(m) }
func (*TargetList) ProtoMessage()               {}
func (*TargetList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TargetList) GetReporter() *Reporter {
	if m != nil {
		return m.Reporter
	}
	return nil
}

func (m *TargetList) GetTargets() []*Target {
	if m != nil {
		return m.Targets
	}
	return nil
}

func init() {
	proto.RegisterType((*Target)(nil), "promconfig.Target")
	proto.RegisterType((*Reporter)(nil), "promconfig.Reporter")
	proto.RegisterType((*TargetList)(nil), "promconfig.TargetList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PromConfigService service

type PromConfigServiceClient interface {
	// call this when we want to replace a bunch of new targets
	NewTargets(ctx context.Context, in *TargetList, opts ...grpc.CallOption) (*common.Void, error)
}

type promConfigServiceClient struct {
	cc *grpc.ClientConn
}

func NewPromConfigServiceClient(cc *grpc.ClientConn) PromConfigServiceClient {
	return &promConfigServiceClient{cc}
}

func (c *promConfigServiceClient) NewTargets(ctx context.Context, in *TargetList, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/promconfig.PromConfigService/NewTargets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PromConfigService service

type PromConfigServiceServer interface {
	// call this when we want to replace a bunch of new targets
	NewTargets(context.Context, *TargetList) (*common.Void, error)
}

func RegisterPromConfigServiceServer(s *grpc.Server, srv PromConfigServiceServer) {
	s.RegisterService(&_PromConfigService_serviceDesc, srv)
}

func _PromConfigService_NewTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TargetList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromConfigServiceServer).NewTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/promconfig.PromConfigService/NewTargets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromConfigServiceServer).NewTargets(ctx, req.(*TargetList))
	}
	return interceptor(ctx, in, info, handler)
}

var _PromConfigService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "promconfig.PromConfigService",
	HandlerType: (*PromConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewTargets",
			Handler:    _PromConfigService_NewTargets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/promconfig/promconfig.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/promconfig/promconfig.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x91, 0x41, 0x4b, 0xc4, 0x30,
	0x10, 0x85, 0xa9, 0x2b, 0xab, 0x9d, 0xf5, 0xe2, 0x20, 0x52, 0x8a, 0x87, 0xb2, 0xa0, 0xf6, 0x20,
	0x59, 0xa9, 0xe0, 0x5d, 0x3d, 0x78, 0x91, 0x45, 0xaa, 0x78, 0xaf, 0xed, 0x58, 0x02, 0x4d, 0xa6,
	0x24, 0xc1, 0xfd, 0xfb, 0xb2, 0x4d, 0xd7, 0x46, 0x04, 0xf1, 0x94, 0x61, 0xe6, 0x7d, 0x33, 0x8f,
	0x17, 0xb8, 0x6d, 0xb9, 0xab, 0x74, 0x2b, 0x6a, 0xd6, 0xa6, 0x6a, 0x36, 0xcc, 0x8d, 0xd0, 0xe4,
	0x56, 0x55, 0x2f, 0xed, 0xaa, 0x37, 0xac, 0x6a, 0xd6, 0x1f, 0xb2, 0x0d, 0x4a, 0xd1, 0x1b, 0x76,
	0x8c, 0x30, 0x75, 0x52, 0xf1, 0xc7, 0x8e, 0x9a, 0x95, 0x62, 0x3d, 0x3e, 0x9e, 0x5d, 0x76, 0x30,
	0x7f, 0xad, 0x4c, 0x4b, 0x0e, 0x11, 0xf6, 0xd7, 0x95, 0xa2, 0x24, 0xca, 0xa2, 0x3c, 0x2e, 0x87,
	0x1a, 0xcf, 0x20, 0xbe, 0x6b, 0x1a, 0x43, 0xd6, 0x92, 0x4d, 0xf6, 0xb2, 0x59, 0x1e, 0x97, 0x53,
	0x03, 0xaf, 0xe1, 0xb0, 0xa4, 0x9e, 0x8d, 0x23, 0x93, 0xcc, 0xb2, 0x28, 0x5f, 0x14, 0x27, 0x22,
	0x30, 0xb7, 0x9b, 0x95, 0xdf, 0xaa, 0xe5, 0xc5, 0x44, 0x60, 0x1a, 0xd0, 0xfe, 0xe6, 0xa4, 0xeb,
	0x00, 0xbc, 0xab, 0x27, 0x69, 0xdd, 0x8f, 0x3b, 0xd1, 0x7f, 0xee, 0xe0, 0x15, 0x1c, 0x78, 0xde,
	0xbb, 0x5e, 0x14, 0x18, 0x02, 0x7e, 0x54, 0xee, 0x24, 0xc5, 0x23, 0x1c, 0x3f, 0x1b, 0x56, 0x0f,
	0xc3, 0xf4, 0x85, 0xcc, 0xa7, 0xac, 0x09, 0x0b, 0x80, 0x35, 0x6d, 0x46, 0x09, 0x9e, 0xfe, 0xe6,
	0xb7, 0xd6, 0xd2, 0x23, 0x31, 0xa6, 0xf9, 0xc6, 0xb2, 0xb9, 0xbf, 0x84, 0x73, 0x4d, 0x2e, 0xcc,
	0x7e, 0xfc, 0x8d, 0x6d, 0xfc, 0xc1, 0x86, 0xf7, 0xf9, 0x10, 0xfe, 0xcd, 0x57, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x12, 0x83, 0x0a, 0x21, 0xf2, 0x01, 0x00, 0x00,
}
