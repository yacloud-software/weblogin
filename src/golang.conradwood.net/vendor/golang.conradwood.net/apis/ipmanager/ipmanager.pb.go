// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/ipmanager/ipmanager.proto
// DO NOT EDIT!

/*
Package ipmanager is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/ipmanager/ipmanager.proto

It has these top-level messages:
	BindZone
	BindConfig
	BindZones
	DHCPRequest
	DHCPConfig
	LookupRequest
	IPList
	HostAccessRequest
	AccessResponse
	AddDomainRequest
	DomainList
	Domain
	HostList
	Host
	AddHostRequest
	VPNHostList
	VPNHost
	WireguardConfig
	ConfigFile
*/
package ipmanager

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"
import objectauth "golang.conradwood.net/apis/objectauth"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BindZone struct {
	ZoneName string `protobuf:"bytes,1,opt,name=ZoneName" json:"ZoneName,omitempty"`
	Filename string `protobuf:"bytes,2,opt,name=Filename" json:"Filename,omitempty"`
	Content  []byte `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (m *BindZone) Reset()                    { *m = BindZone{} }
func (m *BindZone) String() string            { return proto.CompactTextString(m) }
func (*BindZone) ProtoMessage()               {}
func (*BindZone) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BindZone) GetZoneName() string {
	if m != nil {
		return m.ZoneName
	}
	return ""
}

func (m *BindZone) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *BindZone) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type BindConfig struct {
	Content []byte `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (m *BindConfig) Reset()                    { *m = BindConfig{} }
func (m *BindConfig) String() string            { return proto.CompactTextString(m) }
func (*BindConfig) ProtoMessage()               {}
func (*BindConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BindConfig) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type BindZones struct {
	Zones []*BindZone `protobuf:"bytes,1,rep,name=Zones" json:"Zones,omitempty"`
}

func (m *BindZones) Reset()                    { *m = BindZones{} }
func (m *BindZones) String() string            { return proto.CompactTextString(m) }
func (*BindZones) ProtoMessage()               {}
func (*BindZones) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BindZones) GetZones() []*BindZone {
	if m != nil {
		return m.Zones
	}
	return nil
}

type DHCPRequest struct {
	Cluster string `protobuf:"bytes,1,opt,name=Cluster" json:"Cluster,omitempty"`
}

func (m *DHCPRequest) Reset()                    { *m = DHCPRequest{} }
func (m *DHCPRequest) String() string            { return proto.CompactTextString(m) }
func (*DHCPRequest) ProtoMessage()               {}
func (*DHCPRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DHCPRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

type DHCPConfig struct {
	DHCP4Config []byte `protobuf:"bytes,1,opt,name=DHCP4Config,proto3" json:"DHCP4Config,omitempty"`
	DHCP6Config []byte `protobuf:"bytes,2,opt,name=DHCP6Config,proto3" json:"DHCP6Config,omitempty"`
}

func (m *DHCPConfig) Reset()                    { *m = DHCPConfig{} }
func (m *DHCPConfig) String() string            { return proto.CompactTextString(m) }
func (*DHCPConfig) ProtoMessage()               {}
func (*DHCPConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DHCPConfig) GetDHCP4Config() []byte {
	if m != nil {
		return m.DHCP4Config
	}
	return nil
}

func (m *DHCPConfig) GetDHCP6Config() []byte {
	if m != nil {
		return m.DHCP6Config
	}
	return nil
}

type LookupRequest struct {
	Hostname string `protobuf:"bytes,1,opt,name=Hostname" json:"Hostname,omitempty"`
}

func (m *LookupRequest) Reset()                    { *m = LookupRequest{} }
func (m *LookupRequest) String() string            { return proto.CompactTextString(m) }
func (*LookupRequest) ProtoMessage()               {}
func (*LookupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *LookupRequest) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

type IPList struct {
	IPAddress []string `protobuf:"bytes,1,rep,name=IPAddress" json:"IPAddress,omitempty"`
}

func (m *IPList) Reset()                    { *m = IPList{} }
func (m *IPList) String() string            { return proto.CompactTextString(m) }
func (*IPList) ProtoMessage()               {}
func (*IPList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *IPList) GetIPAddress() []string {
	if m != nil {
		return m.IPAddress
	}
	return nil
}

type HostAccessRequest struct {
	Host string `protobuf:"bytes,1,opt,name=Host" json:"Host,omitempty"`
}

func (m *HostAccessRequest) Reset()                    { *m = HostAccessRequest{} }
func (m *HostAccessRequest) String() string            { return proto.CompactTextString(m) }
func (*HostAccessRequest) ProtoMessage()               {}
func (*HostAccessRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *HostAccessRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type AccessResponse struct {
	Domain   *Domain                  `protobuf:"bytes,1,opt,name=Domain" json:"Domain,omitempty"`
	Response *objectauth.AuthResponse `protobuf:"bytes,2,opt,name=Response" json:"Response,omitempty"`
}

func (m *AccessResponse) Reset()                    { *m = AccessResponse{} }
func (m *AccessResponse) String() string            { return proto.CompactTextString(m) }
func (*AccessResponse) ProtoMessage()               {}
func (*AccessResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *AccessResponse) GetDomain() *Domain {
	if m != nil {
		return m.Domain
	}
	return nil
}

func (m *AccessResponse) GetResponse() *objectauth.AuthResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type AddDomainRequest struct {
	DomainName string `protobuf:"bytes,1,opt,name=DomainName" json:"DomainName,omitempty"`
}

func (m *AddDomainRequest) Reset()                    { *m = AddDomainRequest{} }
func (m *AddDomainRequest) String() string            { return proto.CompactTextString(m) }
func (*AddDomainRequest) ProtoMessage()               {}
func (*AddDomainRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *AddDomainRequest) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

type DomainList struct {
	Domains []*Domain `protobuf:"bytes,1,rep,name=Domains" json:"Domains,omitempty"`
}

func (m *DomainList) Reset()                    { *m = DomainList{} }
func (m *DomainList) String() string            { return proto.CompactTextString(m) }
func (*DomainList) ProtoMessage()               {}
func (*DomainList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DomainList) GetDomains() []*Domain {
	if m != nil {
		return m.Domains
	}
	return nil
}

type Domain struct {
	ID   uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
}

func (m *Domain) Reset()                    { *m = Domain{} }
func (m *Domain) String() string            { return proto.CompactTextString(m) }
func (*Domain) ProtoMessage()               {}
func (*Domain) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Domain) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Domain) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type HostList struct {
	Hosts []*Host `protobuf:"bytes,1,rep,name=Hosts" json:"Hosts,omitempty"`
}

func (m *HostList) Reset()                    { *m = HostList{} }
func (m *HostList) String() string            { return proto.CompactTextString(m) }
func (*HostList) ProtoMessage()               {}
func (*HostList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *HostList) GetHosts() []*Host {
	if m != nil {
		return m.Hosts
	}
	return nil
}

type Host struct {
	ID     uint64  `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Domain *Domain `protobuf:"bytes,2,opt,name=Domain" json:"Domain,omitempty"`
	Name   string  `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	// if served by yacloud
	ActivelyServing bool `protobuf:"varint,4,opt,name=ActivelyServing" json:"ActivelyServing,omitempty"`
}

func (m *Host) Reset()                    { *m = Host{} }
func (m *Host) String() string            { return proto.CompactTextString(m) }
func (*Host) ProtoMessage()               {}
func (*Host) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Host) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Host) GetDomain() *Domain {
	if m != nil {
		return m.Domain
	}
	return nil
}

func (m *Host) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Host) GetActivelyServing() bool {
	if m != nil {
		return m.ActivelyServing
	}
	return false
}

type AddHostRequest struct {
	Hostname   string `protobuf:"bytes,1,opt,name=Hostname" json:"Hostname,omitempty"`
	DomainName string `protobuf:"bytes,2,opt,name=DomainName" json:"DomainName,omitempty"`
}

func (m *AddHostRequest) Reset()                    { *m = AddHostRequest{} }
func (m *AddHostRequest) String() string            { return proto.CompactTextString(m) }
func (*AddHostRequest) ProtoMessage()               {}
func (*AddHostRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *AddHostRequest) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *AddHostRequest) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

type VPNHostList struct {
	VPNHosts []*VPNHost `protobuf:"bytes,1,rep,name=VPNHosts" json:"VPNHosts,omitempty"`
}

func (m *VPNHostList) Reset()                    { *m = VPNHostList{} }
func (m *VPNHostList) String() string            { return proto.CompactTextString(m) }
func (*VPNHostList) ProtoMessage()               {}
func (*VPNHostList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *VPNHostList) GetVPNHosts() []*VPNHost {
	if m != nil {
		return m.VPNHosts
	}
	return nil
}

type VPNHost struct {
	// name of host
	Hostname string `protobuf:"bytes,1,opt,name=Hostname" json:"Hostname,omitempty"`
	// do we have a wireguard config?
	Wireguard bool `protobuf:"varint,2,opt,name=Wireguard" json:"Wireguard,omitempty"`
	// do we have an ipsec config?
	IPSec bool `protobuf:"varint,3,opt,name=IPSec" json:"IPSec,omitempty"`
	// do we have an openvpn config?
	OpenVPN bool `protobuf:"varint,4,opt,name=OpenVPN" json:"OpenVPN,omitempty"`
}

func (m *VPNHost) Reset()                    { *m = VPNHost{} }
func (m *VPNHost) String() string            { return proto.CompactTextString(m) }
func (*VPNHost) ProtoMessage()               {}
func (*VPNHost) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *VPNHost) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *VPNHost) GetWireguard() bool {
	if m != nil {
		return m.Wireguard
	}
	return false
}

func (m *VPNHost) GetIPSec() bool {
	if m != nil {
		return m.IPSec
	}
	return false
}

func (m *VPNHost) GetOpenVPN() bool {
	if m != nil {
		return m.OpenVPN
	}
	return false
}

type WireguardConfig struct {
	Hostname   string `protobuf:"bytes,1,opt,name=Hostname" json:"Hostname,omitempty"`
	Peername   string `protobuf:"bytes,2,opt,name=Peername" json:"Peername,omitempty"`
	PrivateKey string `protobuf:"bytes,3,opt,name=PrivateKey" json:"PrivateKey,omitempty"`
	PublicKey  string `protobuf:"bytes,4,opt,name=PublicKey" json:"PublicKey,omitempty"`
	// IP addresses this host can route to
	IPs         []string      `protobuf:"bytes,5,rep,name=IPs" json:"IPs,omitempty"`
	ConfigFiles []*ConfigFile `protobuf:"bytes,6,rep,name=ConfigFiles" json:"ConfigFiles,omitempty"`
	HasPublicIP bool          `protobuf:"varint,7,opt,name=HasPublicIP" json:"HasPublicIP,omitempty"`
	PublicIP    string        `protobuf:"bytes,8,opt,name=PublicIP" json:"PublicIP,omitempty"`
}

func (m *WireguardConfig) Reset()                    { *m = WireguardConfig{} }
func (m *WireguardConfig) String() string            { return proto.CompactTextString(m) }
func (*WireguardConfig) ProtoMessage()               {}
func (*WireguardConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *WireguardConfig) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *WireguardConfig) GetPeername() string {
	if m != nil {
		return m.Peername
	}
	return ""
}

func (m *WireguardConfig) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

func (m *WireguardConfig) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *WireguardConfig) GetIPs() []string {
	if m != nil {
		return m.IPs
	}
	return nil
}

func (m *WireguardConfig) GetConfigFiles() []*ConfigFile {
	if m != nil {
		return m.ConfigFiles
	}
	return nil
}

func (m *WireguardConfig) GetHasPublicIP() bool {
	if m != nil {
		return m.HasPublicIP
	}
	return false
}

func (m *WireguardConfig) GetPublicIP() string {
	if m != nil {
		return m.PublicIP
	}
	return ""
}

type ConfigFile struct {
	Filename string `protobuf:"bytes,1,opt,name=Filename" json:"Filename,omitempty"`
	Content  []byte `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (m *ConfigFile) Reset()                    { *m = ConfigFile{} }
func (m *ConfigFile) String() string            { return proto.CompactTextString(m) }
func (*ConfigFile) ProtoMessage()               {}
func (*ConfigFile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ConfigFile) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *ConfigFile) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto.RegisterType((*BindZone)(nil), "ipmanager.BindZone")
	proto.RegisterType((*BindConfig)(nil), "ipmanager.BindConfig")
	proto.RegisterType((*BindZones)(nil), "ipmanager.BindZones")
	proto.RegisterType((*DHCPRequest)(nil), "ipmanager.DHCPRequest")
	proto.RegisterType((*DHCPConfig)(nil), "ipmanager.DHCPConfig")
	proto.RegisterType((*LookupRequest)(nil), "ipmanager.LookupRequest")
	proto.RegisterType((*IPList)(nil), "ipmanager.IPList")
	proto.RegisterType((*HostAccessRequest)(nil), "ipmanager.HostAccessRequest")
	proto.RegisterType((*AccessResponse)(nil), "ipmanager.AccessResponse")
	proto.RegisterType((*AddDomainRequest)(nil), "ipmanager.AddDomainRequest")
	proto.RegisterType((*DomainList)(nil), "ipmanager.DomainList")
	proto.RegisterType((*Domain)(nil), "ipmanager.Domain")
	proto.RegisterType((*HostList)(nil), "ipmanager.HostList")
	proto.RegisterType((*Host)(nil), "ipmanager.Host")
	proto.RegisterType((*AddHostRequest)(nil), "ipmanager.AddHostRequest")
	proto.RegisterType((*VPNHostList)(nil), "ipmanager.VPNHostList")
	proto.RegisterType((*VPNHost)(nil), "ipmanager.VPNHost")
	proto.RegisterType((*WireguardConfig)(nil), "ipmanager.WireguardConfig")
	proto.RegisterType((*ConfigFile)(nil), "ipmanager.ConfigFile")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IPManagerService service

type IPManagerServiceClient interface {
	// get the zonefiles for bind
	GetBindZones(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*BindZones, error)
	// get the named.conf.local snippet
	GetBindConfig(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*BindConfig, error)
	// get a dhcp server file for a cluster
	GetDHCPConfig(ctx context.Context, in *DHCPRequest, opts ...grpc.CallOption) (*DHCPConfig, error)
	// do a dns->ip lookup (using the local DNS list. useful if you fucked up your /etc/hosts file or do not have dns available
	LookupIP(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*IPList, error)
	// get list of hosts for which we have a VPN configuration
	GetVPNHosts(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*VPNHostList, error)
	// get a wireguard vpn config for a host
	GetWireguardVPNConfig(ctx context.Context, in *VPNHost, opts ...grpc.CallOption) (*WireguardConfig, error)
	// get all domains I have access to
	GetMyDomains(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*DomainList, error)
	// get all hosts hosted and served by the yacloud
	GetHostedHosts(ctx context.Context, in *Domain, opts ...grpc.CallOption) (*HostList, error)
	// add a a host
	AddHostedHost(ctx context.Context, in *AddHostRequest, opts ...grpc.CallOption) (*common.Void, error)
	// add a domain
	AddDomain(ctx context.Context, in *AddDomainRequest, opts ...grpc.CallOption) (*Domain, error)
	// check Host Access (not only domain)
	GetHostAccess(ctx context.Context, in *HostAccessRequest, opts ...grpc.CallOption) (*AccessResponse, error)
}

type iPManagerServiceClient struct {
	cc *grpc.ClientConn
}

func NewIPManagerServiceClient(cc *grpc.ClientConn) IPManagerServiceClient {
	return &iPManagerServiceClient{cc}
}

func (c *iPManagerServiceClient) GetBindZones(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*BindZones, error) {
	out := new(BindZones)
	err := grpc.Invoke(ctx, "/ipmanager.IPManagerService/GetBindZones", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPManagerServiceClient) GetBindConfig(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*BindConfig, error) {
	out := new(BindConfig)
	err := grpc.Invoke(ctx, "/ipmanager.IPManagerService/GetBindConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPManagerServiceClient) GetDHCPConfig(ctx context.Context, in *DHCPRequest, opts ...grpc.CallOption) (*DHCPConfig, error) {
	out := new(DHCPConfig)
	err := grpc.Invoke(ctx, "/ipmanager.IPManagerService/GetDHCPConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPManagerServiceClient) LookupIP(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*IPList, error) {
	out := new(IPList)
	err := grpc.Invoke(ctx, "/ipmanager.IPManagerService/LookupIP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPManagerServiceClient) GetVPNHosts(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*VPNHostList, error) {
	out := new(VPNHostList)
	err := grpc.Invoke(ctx, "/ipmanager.IPManagerService/GetVPNHosts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPManagerServiceClient) GetWireguardVPNConfig(ctx context.Context, in *VPNHost, opts ...grpc.CallOption) (*WireguardConfig, error) {
	out := new(WireguardConfig)
	err := grpc.Invoke(ctx, "/ipmanager.IPManagerService/GetWireguardVPNConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPManagerServiceClient) GetMyDomains(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*DomainList, error) {
	out := new(DomainList)
	err := grpc.Invoke(ctx, "/ipmanager.IPManagerService/GetMyDomains", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPManagerServiceClient) GetHostedHosts(ctx context.Context, in *Domain, opts ...grpc.CallOption) (*HostList, error) {
	out := new(HostList)
	err := grpc.Invoke(ctx, "/ipmanager.IPManagerService/GetHostedHosts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPManagerServiceClient) AddHostedHost(ctx context.Context, in *AddHostRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/ipmanager.IPManagerService/AddHostedHost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPManagerServiceClient) AddDomain(ctx context.Context, in *AddDomainRequest, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := grpc.Invoke(ctx, "/ipmanager.IPManagerService/AddDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPManagerServiceClient) GetHostAccess(ctx context.Context, in *HostAccessRequest, opts ...grpc.CallOption) (*AccessResponse, error) {
	out := new(AccessResponse)
	err := grpc.Invoke(ctx, "/ipmanager.IPManagerService/GetHostAccess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IPManagerService service

type IPManagerServiceServer interface {
	// get the zonefiles for bind
	GetBindZones(context.Context, *common.Void) (*BindZones, error)
	// get the named.conf.local snippet
	GetBindConfig(context.Context, *common.Void) (*BindConfig, error)
	// get a dhcp server file for a cluster
	GetDHCPConfig(context.Context, *DHCPRequest) (*DHCPConfig, error)
	// do a dns->ip lookup (using the local DNS list. useful if you fucked up your /etc/hosts file or do not have dns available
	LookupIP(context.Context, *LookupRequest) (*IPList, error)
	// get list of hosts for which we have a VPN configuration
	GetVPNHosts(context.Context, *common.Void) (*VPNHostList, error)
	// get a wireguard vpn config for a host
	GetWireguardVPNConfig(context.Context, *VPNHost) (*WireguardConfig, error)
	// get all domains I have access to
	GetMyDomains(context.Context, *common.Void) (*DomainList, error)
	// get all hosts hosted and served by the yacloud
	GetHostedHosts(context.Context, *Domain) (*HostList, error)
	// add a a host
	AddHostedHost(context.Context, *AddHostRequest) (*common.Void, error)
	// add a domain
	AddDomain(context.Context, *AddDomainRequest) (*Domain, error)
	// check Host Access (not only domain)
	GetHostAccess(context.Context, *HostAccessRequest) (*AccessResponse, error)
}

func RegisterIPManagerServiceServer(s *grpc.Server, srv IPManagerServiceServer) {
	s.RegisterService(&_IPManagerService_serviceDesc, srv)
}

func _IPManagerService_GetBindZones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPManagerServiceServer).GetBindZones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipmanager.IPManagerService/GetBindZones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPManagerServiceServer).GetBindZones(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPManagerService_GetBindConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPManagerServiceServer).GetBindConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipmanager.IPManagerService/GetBindConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPManagerServiceServer).GetBindConfig(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPManagerService_GetDHCPConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHCPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPManagerServiceServer).GetDHCPConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipmanager.IPManagerService/GetDHCPConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPManagerServiceServer).GetDHCPConfig(ctx, req.(*DHCPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPManagerService_LookupIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPManagerServiceServer).LookupIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipmanager.IPManagerService/LookupIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPManagerServiceServer).LookupIP(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPManagerService_GetVPNHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPManagerServiceServer).GetVPNHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipmanager.IPManagerService/GetVPNHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPManagerServiceServer).GetVPNHosts(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPManagerService_GetWireguardVPNConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VPNHost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPManagerServiceServer).GetWireguardVPNConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipmanager.IPManagerService/GetWireguardVPNConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPManagerServiceServer).GetWireguardVPNConfig(ctx, req.(*VPNHost))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPManagerService_GetMyDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPManagerServiceServer).GetMyDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipmanager.IPManagerService/GetMyDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPManagerServiceServer).GetMyDomains(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPManagerService_GetHostedHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Domain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPManagerServiceServer).GetHostedHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipmanager.IPManagerService/GetHostedHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPManagerServiceServer).GetHostedHosts(ctx, req.(*Domain))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPManagerService_AddHostedHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPManagerServiceServer).AddHostedHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipmanager.IPManagerService/AddHostedHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPManagerServiceServer).AddHostedHost(ctx, req.(*AddHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPManagerService_AddDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPManagerServiceServer).AddDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipmanager.IPManagerService/AddDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPManagerServiceServer).AddDomain(ctx, req.(*AddDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPManagerService_GetHostAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPManagerServiceServer).GetHostAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipmanager.IPManagerService/GetHostAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPManagerServiceServer).GetHostAccess(ctx, req.(*HostAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IPManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ipmanager.IPManagerService",
	HandlerType: (*IPManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBindZones",
			Handler:    _IPManagerService_GetBindZones_Handler,
		},
		{
			MethodName: "GetBindConfig",
			Handler:    _IPManagerService_GetBindConfig_Handler,
		},
		{
			MethodName: "GetDHCPConfig",
			Handler:    _IPManagerService_GetDHCPConfig_Handler,
		},
		{
			MethodName: "LookupIP",
			Handler:    _IPManagerService_LookupIP_Handler,
		},
		{
			MethodName: "GetVPNHosts",
			Handler:    _IPManagerService_GetVPNHosts_Handler,
		},
		{
			MethodName: "GetWireguardVPNConfig",
			Handler:    _IPManagerService_GetWireguardVPNConfig_Handler,
		},
		{
			MethodName: "GetMyDomains",
			Handler:    _IPManagerService_GetMyDomains_Handler,
		},
		{
			MethodName: "GetHostedHosts",
			Handler:    _IPManagerService_GetHostedHosts_Handler,
		},
		{
			MethodName: "AddHostedHost",
			Handler:    _IPManagerService_AddHostedHost_Handler,
		},
		{
			MethodName: "AddDomain",
			Handler:    _IPManagerService_AddDomain_Handler,
		},
		{
			MethodName: "GetHostAccess",
			Handler:    _IPManagerService_GetHostAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/ipmanager/ipmanager.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/ipmanager/ipmanager.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 951 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x56, 0x5d, 0x6f, 0xdb, 0x36,
	0x17, 0x86, 0x1d, 0xdb, 0x91, 0x8f, 0xf3, 0x55, 0xb6, 0xe9, 0xab, 0xe8, 0x0d, 0x06, 0x43, 0xd8,
	0x52, 0x17, 0x05, 0x5c, 0xcc, 0x31, 0xdc, 0x0d, 0xc3, 0x06, 0xd8, 0x09, 0xe6, 0x08, 0x4b, 0x3d,
	0x41, 0x05, 0x32, 0x60, 0xd8, 0x8d, 0x22, 0x71, 0xae, 0x36, 0x9b, 0x74, 0x25, 0x2a, 0x43, 0x6e,
	0xf3, 0x0b, 0x76, 0x39, 0xec, 0x72, 0xbb, 0xdb, 0xaf, 0x1c, 0xf8, 0x25, 0x51, 0x76, 0xea, 0x5d,
	0x89, 0xe7, 0x9c, 0xe7, 0x90, 0x0f, 0x0f, 0x0f, 0x1f, 0x0a, 0x86, 0x73, 0xba, 0x08, 0xc9, 0xbc,
	0x1f, 0x51, 0x92, 0x86, 0xf1, 0x6f, 0x94, 0xc6, 0x7d, 0x82, 0xd9, 0xeb, 0x70, 0x95, 0x64, 0xaf,
	0x93, 0xd5, 0x32, 0x24, 0xe1, 0x1c, 0xa7, 0xe5, 0xa8, 0xbf, 0x4a, 0x29, 0xa3, 0xa8, 0x5d, 0x38,
	0x9c, 0xfe, 0x96, 0x09, 0x22, 0xba, 0x5c, 0x52, 0xa2, 0x3e, 0x32, 0xd5, 0x19, 0x6d, 0xc1, 0xd3,
	0xdb, 0x5f, 0x70, 0xc4, 0xc2, 0x9c, 0xbd, 0x37, 0x86, 0x32, 0xcf, 0xfd, 0x09, 0xac, 0x49, 0x42,
	0xe2, 0x1f, 0x29, 0xc1, 0xc8, 0x01, 0x8b, 0x7f, 0x67, 0xe1, 0x12, 0xdb, 0xb5, 0x6e, 0xad, 0xd7,
	0x0e, 0x0a, 0x9b, 0xc7, 0xbe, 0x4d, 0x16, 0x98, 0xf0, 0x58, 0x5d, 0xc6, 0xb4, 0x8d, 0x6c, 0xd8,
	0xbd, 0xa0, 0x84, 0x61, 0xc2, 0xec, 0x9d, 0x6e, 0xad, 0xb7, 0x17, 0x68, 0xd3, 0x3d, 0x03, 0xe0,
	0xb3, 0x5f, 0x50, 0xf2, 0x73, 0x32, 0x37, 0x71, 0xb5, 0x2a, 0x6e, 0x04, 0x6d, 0xcd, 0x22, 0x43,
	0x2f, 0xa1, 0x29, 0x06, 0x76, 0xad, 0xbb, 0xd3, 0xeb, 0x0c, 0x9e, 0xf6, 0xcb, 0x32, 0x69, 0x50,
	0x20, 0x11, 0xee, 0x0b, 0xe8, 0x5c, 0x5e, 0x5d, 0xf8, 0x01, 0xfe, 0x90, 0xe3, 0x8c, 0x89, 0x05,
	0x16, 0x79, 0xc6, 0x70, 0xaa, 0xf8, 0x6b, 0xd3, 0xf5, 0x01, 0x38, 0x50, 0x11, 0xe9, 0xca, 0xb4,
	0xa1, 0x34, 0x15, 0x19, 0xd3, 0xa5, 0x11, 0x23, 0x85, 0xa8, 0x97, 0x08, 0xe5, 0x72, 0x5f, 0xc1,
	0xfe, 0x35, 0xa5, 0xbf, 0xe6, 0x2b, 0xbd, 0xb8, 0x03, 0xd6, 0x15, 0xcd, 0x18, 0x31, 0xaa, 0xa7,
	0x6d, 0xf7, 0x0c, 0x5a, 0x9e, 0x7f, 0x9d, 0x64, 0x0c, 0x9d, 0x42, 0xdb, 0xf3, 0xc7, 0x71, 0x9c,
	0xe2, 0x4c, 0x6e, 0xb0, 0x1d, 0x94, 0x0e, 0xf7, 0x05, 0x3c, 0xe1, 0x39, 0xe3, 0x28, 0xc2, 0x59,
	0xa6, 0x27, 0x46, 0xd0, 0xe0, 0x4e, 0x35, 0xa9, 0x18, 0xbb, 0x1f, 0xe0, 0x40, 0x83, 0xb2, 0x15,
	0x25, 0x19, 0x46, 0x2f, 0xa1, 0x75, 0x49, 0x97, 0x61, 0x42, 0x04, 0xae, 0x33, 0x78, 0x62, 0x94,
	0x4d, 0x06, 0x02, 0x05, 0x40, 0x43, 0xb0, 0x74, 0x9a, 0xd8, 0x59, 0x67, 0x60, 0xf7, 0x8d, 0xc6,
	0x18, 0xe7, 0xec, 0xbd, 0x8e, 0x07, 0x05, 0xd2, 0x1d, 0xc0, 0xd1, 0x38, 0x8e, 0xd5, 0x54, 0x8a,
	0xda, 0x27, 0x00, 0xd2, 0x61, 0xf4, 0x8c, 0xe1, 0x71, 0xbf, 0xd4, 0x71, 0xb1, 0xf7, 0x57, 0xb0,
	0x2b, 0x2d, 0x7d, 0xb4, 0x8f, 0x70, 0xd4, 0x08, 0x77, 0xa4, 0xf7, 0x83, 0x0e, 0xa0, 0xee, 0x5d,
	0x8a, 0xc9, 0x1b, 0x41, 0xdd, 0xbb, 0x44, 0xa7, 0xd0, 0x98, 0x15, 0x6d, 0x38, 0xb1, 0xfe, 0x79,
	0x38, 0x69, 0xb0, 0x34, 0xc7, 0x81, 0xf0, 0xba, 0x9f, 0xcb, 0x63, 0x10, 0x0b, 0x7e, 0x06, 0x4d,
	0x3e, 0xd6, 0xcb, 0x1d, 0x1a, 0xcb, 0x71, 0x7f, 0x20, 0xa3, 0xee, 0x1f, 0x35, 0x59, 0xe1, 0x8d,
	0x95, 0x26, 0x45, 0x4d, 0xeb, 0x1f, 0xa9, 0xe9, 0xe4, 0x7f, 0x7f, 0x3e, 0x9c, 0xb4, 0xf2, 0x84,
	0xb0, 0xd1, 0xf0, 0xaf, 0x87, 0x93, 0x76, 0x2c, 0xbc, 0xfd, 0x24, 0x2e, 0x8a, 0x8d, 0x14, 0xdb,
	0x1d, 0x79, 0x7a, 0xe2, 0x32, 0xf5, 0xe0, 0x70, 0x1c, 0xb1, 0xe4, 0x0e, 0x2f, 0xee, 0xdf, 0xe1,
	0xf4, 0x2e, 0x21, 0x73, 0xbb, 0xd1, 0xad, 0xf5, 0xac, 0x60, 0xdd, 0xed, 0x5e, 0xc3, 0xc1, 0x38,
	0x8e, 0x05, 0xd9, 0xff, 0x6e, 0xb3, 0xb5, 0xe3, 0xa8, 0x6f, 0x1c, 0xc7, 0xd7, 0xd0, 0xb9, 0xf1,
	0x67, 0x45, 0x79, 0xfa, 0x60, 0x29, 0x53, 0x57, 0x08, 0x19, 0x1b, 0x54, 0xa1, 0xa0, 0xc0, 0xb8,
	0x19, 0xec, 0xaa, 0xf1, 0x56, 0x16, 0xa7, 0xd0, 0xfe, 0x21, 0x49, 0xf1, 0x3c, 0x0f, 0xd3, 0x58,
	0x90, 0xb0, 0x82, 0xd2, 0x81, 0x9e, 0x41, 0xd3, 0xf3, 0xdf, 0xe1, 0x48, 0x14, 0xc4, 0x0a, 0xa4,
	0xc1, 0x6f, 0xee, 0xf7, 0x2b, 0x4c, 0x6e, 0xfc, 0x99, 0xaa, 0x84, 0x36, 0xdd, 0xdf, 0xeb, 0x70,
	0x58, 0x64, 0xab, 0xdb, 0xb9, 0x6d, 0x75, 0x07, 0x2c, 0x1f, 0xe3, 0xd4, 0x14, 0x2a, 0x6d, 0xf3,
	0xfa, 0xf8, 0x69, 0x72, 0x17, 0x32, 0xfc, 0x1d, 0xbe, 0x57, 0x27, 0x62, 0x78, 0x38, 0x73, 0x3f,
	0xbf, 0x5d, 0x24, 0x11, 0x0f, 0x37, 0x44, 0xb8, 0x74, 0xa0, 0x23, 0xd8, 0xf1, 0xfc, 0xcc, 0x6e,
	0x8a, 0x4b, 0xcb, 0x87, 0xe8, 0x0d, 0x74, 0x24, 0x23, 0x2e, 0x85, 0x99, 0xdd, 0x12, 0x35, 0x3c,
	0x36, 0x6a, 0x58, 0x46, 0x03, 0x13, 0xc9, 0xe5, 0xe5, 0x2a, 0xcc, 0xe4, 0xd4, 0x9e, 0x6f, 0xef,
	0x8a, 0x2d, 0x9b, 0x2e, 0xb1, 0x0d, 0x1d, 0xb6, 0xd4, 0x36, 0x94, 0xed, 0x4e, 0x00, 0xca, 0xc9,
	0x2a, 0xca, 0x5c, 0xfb, 0xb8, 0x32, 0xd7, 0x2b, 0x8a, 0x3b, 0xf8, 0xbb, 0x09, 0x47, 0x9e, 0xff,
	0x56, 0xf2, 0x14, 0xdd, 0x16, 0x61, 0x34, 0x80, 0xbd, 0x29, 0x66, 0xa5, 0x12, 0xef, 0xf5, 0xd5,
	0x1b, 0x73, 0x43, 0x93, 0xd8, 0x79, 0xf6, 0x88, 0x10, 0x67, 0x68, 0x08, 0xfb, 0x2a, 0x47, 0x1d,
	0x4e, 0x35, 0xe9, 0x78, 0x2d, 0x49, 0x81, 0xbe, 0x11, 0x59, 0x86, 0x24, 0x3f, 0x37, 0xaf, 0x56,
	0x29, 0xe9, 0x95, 0x7c, 0x03, 0xfe, 0x06, 0x2c, 0xa9, 0xbe, 0x9e, 0x8f, 0x6c, 0x03, 0x52, 0x91,
	0x64, 0xc7, 0xbc, 0xaf, 0x4a, 0x7f, 0xcf, 0xa1, 0x33, 0xc5, 0x4c, 0xb7, 0xf4, 0x1a, 0xd9, 0xe7,
	0x9b, 0xed, 0x2f, 0x92, 0xa6, 0x70, 0x3c, 0xc5, 0xac, 0xe8, 0xc2, 0x1b, 0x7f, 0xa6, 0x68, 0x3c,
	0x72, 0x5f, 0x1c, 0xc7, 0xf0, 0xad, 0x37, 0xee, 0xb9, 0x28, 0xf0, 0xdb, 0x7b, 0x25, 0x72, 0x5b,
	0x6a, 0x65, 0xc8, 0xe6, 0x17, 0x70, 0x30, 0xc5, 0x8c, 0xcf, 0x8d, 0x63, 0xc9, 0x7a, 0x53, 0x87,
	0x9c, 0xa7, 0x6b, 0xda, 0xa6, 0x32, 0xf7, 0x95, 0x7a, 0xc8, 0x4c, 0x74, 0x62, 0xa0, 0xaa, 0xba,
	0xe2, 0x54, 0xa8, 0xa0, 0xaf, 0xa0, 0x5d, 0x88, 0x3d, 0xfa, 0x7f, 0x35, 0xab, 0xf2, 0x04, 0x38,
	0x9b, 0x5c, 0xd0, 0x95, 0x38, 0xdc, 0xf2, 0x21, 0x43, 0xa7, 0x6b, 0xe4, 0x2a, 0xef, 0x9b, 0x53,
	0x21, 0x55, 0x79, 0xd4, 0x26, 0x67, 0xf0, 0x29, 0xc1, 0xcc, 0xfc, 0xa9, 0x51, 0xbf, 0x39, 0xfc,
	0xbf, 0xa6, 0x4c, 0xbb, 0x6d, 0x89, 0x9f, 0x99, 0xf3, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x69,
	0xdf, 0xda, 0xef, 0x77, 0x09, 0x00, 0x00,
}
