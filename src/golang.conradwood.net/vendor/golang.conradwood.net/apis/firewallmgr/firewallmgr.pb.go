// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/firewallmgr/firewallmgr.proto
// DO NOT EDIT!

/*
Package firewallmgr is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/firewallmgr/firewallmgr.proto

It has these top-level messages:
	IP
	IPList
*/
package firewallmgr

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IP struct {
	IP string `protobuf:"bytes,1,opt,name=IP" json:"IP,omitempty"`
}

func (m *IP) Reset()                    { *m = IP{} }
func (m *IP) String() string            { return proto.CompactTextString(m) }
func (*IP) ProtoMessage()               {}
func (*IP) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IP) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

type IPList struct {
	IPs []*IP `protobuf:"bytes,1,rep,name=IPs" json:"IPs,omitempty"`
}

func (m *IPList) Reset()                    { *m = IPList{} }
func (m *IPList) String() string            { return proto.CompactTextString(m) }
func (*IPList) ProtoMessage()               {}
func (*IPList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IPList) GetIPs() []*IP {
	if m != nil {
		return m.IPs
	}
	return nil
}

func init() {
	proto.RegisterType((*IP)(nil), "firewallmgr.IP")
	proto.RegisterType((*IPList)(nil), "firewallmgr.IPList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FirewallMgr service

type FirewallMgrClient interface {
	// block an ip address
	Block(ctx context.Context, in *IP, opts ...grpc.CallOption) (*common.Void, error)
	// block an ip address
	BlockMultiple(ctx context.Context, in *IPList, opts ...grpc.CallOption) (*common.Void, error)
	// unblock an ip address
	Unblock(ctx context.Context, in *IP, opts ...grpc.CallOption) (*common.Void, error)
	// unblock multiple ip addresses
	UnblockMultiple(ctx context.Context, in *IPList, opts ...grpc.CallOption) (*common.Void, error)
	// get currently blocked from firewall
	GetBlocked(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*IPList, error)
}

type firewallMgrClient struct {
	cc *grpc.ClientConn
}

func NewFirewallMgrClient(cc *grpc.ClientConn) FirewallMgrClient {
	return &firewallMgrClient{cc}
}

func (c *firewallMgrClient) Block(ctx context.Context, in *IP, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/firewallmgr.FirewallMgr/Block", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firewallMgrClient) BlockMultiple(ctx context.Context, in *IPList, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/firewallmgr.FirewallMgr/BlockMultiple", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firewallMgrClient) Unblock(ctx context.Context, in *IP, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/firewallmgr.FirewallMgr/Unblock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firewallMgrClient) UnblockMultiple(ctx context.Context, in *IPList, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/firewallmgr.FirewallMgr/UnblockMultiple", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firewallMgrClient) GetBlocked(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*IPList, error) {
	out := new(IPList)
	err := grpc.Invoke(ctx, "/firewallmgr.FirewallMgr/GetBlocked", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FirewallMgr service

type FirewallMgrServer interface {
	// block an ip address
	Block(context.Context, *IP) (*common.Void, error)
	// block an ip address
	BlockMultiple(context.Context, *IPList) (*common.Void, error)
	// unblock an ip address
	Unblock(context.Context, *IP) (*common.Void, error)
	// unblock multiple ip addresses
	UnblockMultiple(context.Context, *IPList) (*common.Void, error)
	// get currently blocked from firewall
	GetBlocked(context.Context, *common.Void) (*IPList, error)
}

func RegisterFirewallMgrServer(s *grpc.Server, srv FirewallMgrServer) {
	s.RegisterService(&_FirewallMgr_serviceDesc, srv)
}

func _FirewallMgr_Block_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallMgrServer).Block(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firewallmgr.FirewallMgr/Block",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallMgrServer).Block(ctx, req.(*IP))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirewallMgr_BlockMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallMgrServer).BlockMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firewallmgr.FirewallMgr/BlockMultiple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallMgrServer).BlockMultiple(ctx, req.(*IPList))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirewallMgr_Unblock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallMgrServer).Unblock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firewallmgr.FirewallMgr/Unblock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallMgrServer).Unblock(ctx, req.(*IP))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirewallMgr_UnblockMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallMgrServer).UnblockMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firewallmgr.FirewallMgr/UnblockMultiple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallMgrServer).UnblockMultiple(ctx, req.(*IPList))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirewallMgr_GetBlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallMgrServer).GetBlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firewallmgr.FirewallMgr/GetBlocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallMgrServer).GetBlocked(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _FirewallMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "firewallmgr.FirewallMgr",
	HandlerType: (*FirewallMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Block",
			Handler:    _FirewallMgr_Block_Handler,
		},
		{
			MethodName: "BlockMultiple",
			Handler:    _FirewallMgr_BlockMultiple_Handler,
		},
		{
			MethodName: "Unblock",
			Handler:    _FirewallMgr_Unblock_Handler,
		},
		{
			MethodName: "UnblockMultiple",
			Handler:    _FirewallMgr_UnblockMultiple_Handler,
		},
		{
			MethodName: "GetBlocked",
			Handler:    _FirewallMgr_GetBlocked_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/firewallmgr/firewallmgr.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/firewallmgr/firewallmgr.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xb2, 0x48, 0xcf, 0xcf, 0x49,
	0xcc, 0x4b, 0xd7, 0x4b, 0xce, 0xcf, 0x2b, 0x4a, 0x4c, 0x29, 0xcf, 0xcf, 0x4f, 0xd1, 0xcb, 0x4b,
	0x2d, 0xd1, 0x4f, 0x2c, 0xc8, 0x2c, 0xd6, 0x4f, 0xcb, 0x2c, 0x4a, 0x2d, 0x4f, 0xcc, 0xc9, 0xc9,
	0x4d, 0x2f, 0x42, 0x66, 0xeb, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x71, 0x23, 0x09, 0x49, 0xe9,
	0xe1, 0x31, 0x26, 0x39, 0x3f, 0x37, 0x37, 0x3f, 0x0f, 0x4a, 0x41, 0x34, 0x2b, 0x89, 0x70, 0x31,
	0x79, 0x06, 0x08, 0xf1, 0x81, 0x48, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x26, 0xcf, 0x00,
	0x25, 0x6d, 0x2e, 0x36, 0xcf, 0x00, 0x9f, 0xcc, 0xe2, 0x12, 0x21, 0x45, 0x2e, 0x66, 0xcf, 0x80,
	0x62, 0x09, 0x46, 0x05, 0x66, 0x0d, 0x6e, 0x23, 0x7e, 0x3d, 0x64, 0xdb, 0x3d, 0x03, 0x82, 0x40,
	0x72, 0x46, 0xbf, 0x18, 0xb9, 0xb8, 0xdd, 0xa0, 0xe2, 0xbe, 0xe9, 0x45, 0x42, 0x6a, 0x5c, 0xac,
	0x4e, 0x39, 0xf9, 0xc9, 0xd9, 0x42, 0xe8, 0xca, 0xa5, 0x78, 0xf4, 0xa0, 0x76, 0x87, 0xe5, 0x67,
	0xa6, 0x08, 0x19, 0x71, 0xf1, 0x82, 0xd5, 0xf9, 0x96, 0xe6, 0x94, 0x64, 0x16, 0xe4, 0xa4, 0x0a,
	0x09, 0xa3, 0xa9, 0x07, 0x39, 0x00, 0x4d, 0x8f, 0x06, 0x17, 0x7b, 0x68, 0x5e, 0x12, 0x31, 0xa6,
	0x9b, 0x70, 0xf1, 0x43, 0x55, 0x92, 0x62, 0xbe, 0x3e, 0x17, 0x97, 0x7b, 0x6a, 0x09, 0xd8, 0x59,
	0xa9, 0x29, 0x42, 0x28, 0x72, 0x52, 0xd8, 0xb4, 0x3b, 0x29, 0x72, 0xc9, 0xe7, 0xa5, 0x96, 0x20,
	0x07, 0x37, 0x28, 0xa8, 0x91, 0x55, 0x26, 0xb1, 0x81, 0x43, 0xda, 0x18, 0x10, 0x00, 0x00, 0xff,
	0xff, 0xcb, 0x2b, 0x56, 0x46, 0xe2, 0x01, 0x00, 0x00,
}
