// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/alertstore/alertstore.proto
// DO NOT EDIT!

/*
Package alertstore is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/alertstore/alertstore.proto

It has these top-level messages:
	AlertConfigRequest
	AlertUpdateRequest
	AlertConfig
	AlertList
	AlertDeleteRequest
	AlertBatchConfigRequest
*/
package alertstore

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"
import auth "golang.conradwood.net/apis/auth"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Group int32

const (
	Group_UNCLASSIFIED Group = 0
	Group_PROBERS      Group = 1
	Group_HUBCOMMS     Group = 2
	Group_MODULES      Group = 3
	Group_VPNS         Group = 4
	// e.g. "diskspace"
	Group_INFRASTRUCTURE Group = 5
)

var Group_name = map[int32]string{
	0: "UNCLASSIFIED",
	1: "PROBERS",
	2: "HUBCOMMS",
	3: "MODULES",
	4: "VPNS",
	5: "INFRASTRUCTURE",
}
var Group_value = map[string]int32{
	"UNCLASSIFIED":   0,
	"PROBERS":        1,
	"HUBCOMMS":       2,
	"MODULES":        3,
	"VPNS":           4,
	"INFRASTRUCTURE": 5,
}

func (x Group) String() string {
	return proto.EnumName(Group_name, int32(x))
}
func (Group) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AlertConfigRequest struct {
	// a "meaningful" and unique alert name
	AlertName string `protobuf:"bytes,1,opt,name=AlertName" json:"AlertName,omitempty"`
	// if true will be routed across to everyone.
	// special permissions required to update.
	// Default (false) indicates it's in testing and
	// alerts will go to the person creating the alert only (via slack)
	// (special permissions required to release an alert)
	Released bool `protobuf:"varint,2,opt,name=Released" json:"Released,omitempty"`
	// the URL of a playbook
	PlaybookURL string `protobuf:"bytes,3,opt,name=PlaybookURL" json:"PlaybookURL,omitempty"`
	// trigger duration (seconds) (expression must be true for this period of time to trigger)
	TriggerSecs uint32 `protobuf:"varint,4,opt,name=TriggerSecs" json:"TriggerSecs,omitempty"`
	// prometheus expression
	PromQL string `protobuf:"bytes,5,opt,name=PromQL" json:"PromQL,omitempty"`
	// short one-line summary (will be sent as part of the alert notification)
	Summary string `protobuf:"bytes,6,opt,name=Summary" json:"Summary,omitempty"`
	// group this alert belongs to
	Group Group `protobuf:"varint,7,opt,name=Group,enum=alertstore.Group" json:"Group,omitempty"`
}

func (m *AlertConfigRequest) Reset()                    { *m = AlertConfigRequest{} }
func (m *AlertConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*AlertConfigRequest) ProtoMessage()               {}
func (*AlertConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AlertConfigRequest) GetAlertName() string {
	if m != nil {
		return m.AlertName
	}
	return ""
}

func (m *AlertConfigRequest) GetReleased() bool {
	if m != nil {
		return m.Released
	}
	return false
}

func (m *AlertConfigRequest) GetPlaybookURL() string {
	if m != nil {
		return m.PlaybookURL
	}
	return ""
}

func (m *AlertConfigRequest) GetTriggerSecs() uint32 {
	if m != nil {
		return m.TriggerSecs
	}
	return 0
}

func (m *AlertConfigRequest) GetPromQL() string {
	if m != nil {
		return m.PromQL
	}
	return ""
}

func (m *AlertConfigRequest) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *AlertConfigRequest) GetGroup() Group {
	if m != nil {
		return m.Group
	}
	return Group_UNCLASSIFIED
}

// update an alert
type AlertUpdateRequest struct {
	ID    uint64              `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Alert *AlertConfigRequest `protobuf:"bytes,2,opt,name=Alert" json:"Alert,omitempty"`
}

func (m *AlertUpdateRequest) Reset()                    { *m = AlertUpdateRequest{} }
func (m *AlertUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*AlertUpdateRequest) ProtoMessage()               {}
func (*AlertUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AlertUpdateRequest) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *AlertUpdateRequest) GetAlert() *AlertConfigRequest {
	if m != nil {
		return m.Alert
	}
	return nil
}

type AlertConfig struct {
	ID      uint64              `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Creator *auth.User          `protobuf:"bytes,2,opt,name=Creator" json:"Creator,omitempty"`
	Config  *AlertConfigRequest `protobuf:"bytes,3,opt,name=Config" json:"Config,omitempty"`
}

func (m *AlertConfig) Reset()                    { *m = AlertConfig{} }
func (m *AlertConfig) String() string            { return proto.CompactTextString(m) }
func (*AlertConfig) ProtoMessage()               {}
func (*AlertConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AlertConfig) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *AlertConfig) GetCreator() *auth.User {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *AlertConfig) GetConfig() *AlertConfigRequest {
	if m != nil {
		return m.Config
	}
	return nil
}

type AlertList struct {
	Alerts []*AlertConfig `protobuf:"bytes,1,rep,name=Alerts" json:"Alerts,omitempty"`
}

func (m *AlertList) Reset()                    { *m = AlertList{} }
func (m *AlertList) String() string            { return proto.CompactTextString(m) }
func (*AlertList) ProtoMessage()               {}
func (*AlertList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AlertList) GetAlerts() []*AlertConfig {
	if m != nil {
		return m.Alerts
	}
	return nil
}

type AlertDeleteRequest struct {
	// alert ids to delete
	AlertIDs []uint64 `protobuf:"varint,1,rep,packed,name=AlertIDs" json:"AlertIDs,omitempty"`
}

func (m *AlertDeleteRequest) Reset()                    { *m = AlertDeleteRequest{} }
func (m *AlertDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*AlertDeleteRequest) ProtoMessage()               {}
func (*AlertDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AlertDeleteRequest) GetAlertIDs() []uint64 {
	if m != nil {
		return m.AlertIDs
	}
	return nil
}

type AlertBatchConfigRequest struct {
	Alerts []*AlertConfigRequest `protobuf:"bytes,1,rep,name=Alerts" json:"Alerts,omitempty"`
}

func (m *AlertBatchConfigRequest) Reset()                    { *m = AlertBatchConfigRequest{} }
func (m *AlertBatchConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*AlertBatchConfigRequest) ProtoMessage()               {}
func (*AlertBatchConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AlertBatchConfigRequest) GetAlerts() []*AlertConfigRequest {
	if m != nil {
		return m.Alerts
	}
	return nil
}

func init() {
	proto.RegisterType((*AlertConfigRequest)(nil), "alertstore.AlertConfigRequest")
	proto.RegisterType((*AlertUpdateRequest)(nil), "alertstore.AlertUpdateRequest")
	proto.RegisterType((*AlertConfig)(nil), "alertstore.AlertConfig")
	proto.RegisterType((*AlertList)(nil), "alertstore.AlertList")
	proto.RegisterType((*AlertDeleteRequest)(nil), "alertstore.AlertDeleteRequest")
	proto.RegisterType((*AlertBatchConfigRequest)(nil), "alertstore.AlertBatchConfigRequest")
	proto.RegisterEnum("alertstore.Group", Group_name, Group_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AlertStoreService service

type AlertStoreServiceClient interface {
	// get all alerts
	ListAlerts(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*AlertList, error)
	// create an alert
	SetAlert(ctx context.Context, in *AlertConfigRequest, opts ...grpc.CallOption) (*AlertConfig, error)
	// update an existing alert
	UpdateAlert(ctx context.Context, in *AlertUpdateRequest, opts ...grpc.CallOption) (*AlertConfig, error)
	// delete an alert (by id) - users can only delete "own"
	DeleteAlerts(ctx context.Context, in *AlertDeleteRequest, opts ...grpc.CallOption) (*common.Void, error)
	// create multiple alerts in on go (to avoid prometheus being updated needlessly often)
	CreateBatch(ctx context.Context, in *AlertBatchConfigRequest, opts ...grpc.CallOption) (*common.Void, error)
}

type alertStoreServiceClient struct {
	cc *grpc.ClientConn
}

func NewAlertStoreServiceClient(cc *grpc.ClientConn) AlertStoreServiceClient {
	return &alertStoreServiceClient{cc}
}

func (c *alertStoreServiceClient) ListAlerts(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*AlertList, error) {
	out := new(AlertList)
	err := grpc.Invoke(ctx, "/alertstore.AlertStoreService/ListAlerts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertStoreServiceClient) SetAlert(ctx context.Context, in *AlertConfigRequest, opts ...grpc.CallOption) (*AlertConfig, error) {
	out := new(AlertConfig)
	err := grpc.Invoke(ctx, "/alertstore.AlertStoreService/SetAlert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertStoreServiceClient) UpdateAlert(ctx context.Context, in *AlertUpdateRequest, opts ...grpc.CallOption) (*AlertConfig, error) {
	out := new(AlertConfig)
	err := grpc.Invoke(ctx, "/alertstore.AlertStoreService/UpdateAlert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertStoreServiceClient) DeleteAlerts(ctx context.Context, in *AlertDeleteRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/alertstore.AlertStoreService/DeleteAlerts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertStoreServiceClient) CreateBatch(ctx context.Context, in *AlertBatchConfigRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/alertstore.AlertStoreService/CreateBatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AlertStoreService service

type AlertStoreServiceServer interface {
	// get all alerts
	ListAlerts(context.Context, *common.Void) (*AlertList, error)
	// create an alert
	SetAlert(context.Context, *AlertConfigRequest) (*AlertConfig, error)
	// update an existing alert
	UpdateAlert(context.Context, *AlertUpdateRequest) (*AlertConfig, error)
	// delete an alert (by id) - users can only delete "own"
	DeleteAlerts(context.Context, *AlertDeleteRequest) (*common.Void, error)
	// create multiple alerts in on go (to avoid prometheus being updated needlessly often)
	CreateBatch(context.Context, *AlertBatchConfigRequest) (*common.Void, error)
}

func RegisterAlertStoreServiceServer(s *grpc.Server, srv AlertStoreServiceServer) {
	s.RegisterService(&_AlertStoreService_serviceDesc, srv)
}

func _AlertStoreService_ListAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertStoreServiceServer).ListAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alertstore.AlertStoreService/ListAlerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertStoreServiceServer).ListAlerts(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertStoreService_SetAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertStoreServiceServer).SetAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alertstore.AlertStoreService/SetAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertStoreServiceServer).SetAlert(ctx, req.(*AlertConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertStoreService_UpdateAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertStoreServiceServer).UpdateAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alertstore.AlertStoreService/UpdateAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertStoreServiceServer).UpdateAlert(ctx, req.(*AlertUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertStoreService_DeleteAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertStoreServiceServer).DeleteAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alertstore.AlertStoreService/DeleteAlerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertStoreServiceServer).DeleteAlerts(ctx, req.(*AlertDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertStoreService_CreateBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertBatchConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertStoreServiceServer).CreateBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alertstore.AlertStoreService/CreateBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertStoreServiceServer).CreateBatch(ctx, req.(*AlertBatchConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AlertStoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "alertstore.AlertStoreService",
	HandlerType: (*AlertStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAlerts",
			Handler:    _AlertStoreService_ListAlerts_Handler,
		},
		{
			MethodName: "SetAlert",
			Handler:    _AlertStoreService_SetAlert_Handler,
		},
		{
			MethodName: "UpdateAlert",
			Handler:    _AlertStoreService_UpdateAlert_Handler,
		},
		{
			MethodName: "DeleteAlerts",
			Handler:    _AlertStoreService_DeleteAlerts_Handler,
		},
		{
			MethodName: "CreateBatch",
			Handler:    _AlertStoreService_CreateBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/alertstore/alertstore.proto",
}

// Client API for AlertStoreMgrService service

type AlertStoreMgrServiceClient interface {
	// reconfigure prometheus alerting rules
	ConfigPromAlerts(ctx context.Context, in *AlertList, opts ...grpc.CallOption) (*common.Void, error)
}

type alertStoreMgrServiceClient struct {
	cc *grpc.ClientConn
}

func NewAlertStoreMgrServiceClient(cc *grpc.ClientConn) AlertStoreMgrServiceClient {
	return &alertStoreMgrServiceClient{cc}
}

func (c *alertStoreMgrServiceClient) ConfigPromAlerts(ctx context.Context, in *AlertList, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/alertstore.AlertStoreMgrService/ConfigPromAlerts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AlertStoreMgrService service

type AlertStoreMgrServiceServer interface {
	// reconfigure prometheus alerting rules
	ConfigPromAlerts(context.Context, *AlertList) (*common.Void, error)
}

func RegisterAlertStoreMgrServiceServer(s *grpc.Server, srv AlertStoreMgrServiceServer) {
	s.RegisterService(&_AlertStoreMgrService_serviceDesc, srv)
}

func _AlertStoreMgrService_ConfigPromAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertStoreMgrServiceServer).ConfigPromAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alertstore.AlertStoreMgrService/ConfigPromAlerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertStoreMgrServiceServer).ConfigPromAlerts(ctx, req.(*AlertList))
	}
	return interceptor(ctx, in, info, handler)
}

var _AlertStoreMgrService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "alertstore.AlertStoreMgrService",
	HandlerType: (*AlertStoreMgrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigPromAlerts",
			Handler:    _AlertStoreMgrService_ConfigPromAlerts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/alertstore/alertstore.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/alertstore/alertstore.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 615 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x54, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0xfe, 0x9d, 0xe6, 0xd6, 0xe3, 0xfc, 0x95, 0x3b, 0x02, 0x6a, 0x59, 0x08, 0x45, 0x01, 0xd4,
	0xa8, 0x0b, 0x17, 0x02, 0x2a, 0x9b, 0x2e, 0x68, 0x2e, 0x05, 0x4b, 0xb9, 0x75, 0xa6, 0xee, 0x82,
	0x0d, 0x72, 0x93, 0xc1, 0xb5, 0x88, 0x3d, 0x61, 0xec, 0x80, 0x2a, 0x1e, 0x93, 0xe7, 0xe0, 0x1d,
	0x90, 0x67, 0x26, 0x8d, 0x8d, 0x49, 0xbb, 0x49, 0x7c, 0x6e, 0xdf, 0x99, 0xef, 0x3b, 0x33, 0x07,
	0x4e, 0x7c, 0xb6, 0xf0, 0x22, 0xdf, 0x9e, 0xb1, 0x88, 0x7b, 0xf3, 0x1f, 0x8c, 0xcd, 0xed, 0x88,
	0x26, 0xc7, 0xde, 0x32, 0x88, 0x8f, 0xbd, 0x05, 0xe5, 0x49, 0x9c, 0x30, 0x4e, 0x33, 0x9f, 0xf6,
	0x92, 0xb3, 0x84, 0x21, 0xd8, 0x78, 0x2c, 0xfb, 0x1e, 0x8c, 0x19, 0x0b, 0x43, 0x16, 0xa9, 0x3f,
	0x59, 0x6b, 0x1d, 0xdd, 0xd7, 0x73, 0x95, 0xdc, 0x88, 0x1f, 0x99, 0xdb, 0xfa, 0xad, 0x01, 0x3a,
	0x4b, 0x5b, 0xf5, 0x58, 0xf4, 0x25, 0xf0, 0x31, 0xfd, 0xb6, 0xa2, 0x71, 0x82, 0x9e, 0xc2, 0xae,
	0xf0, 0x8e, 0xbd, 0x90, 0x9a, 0x5a, 0x53, 0x6b, 0xef, 0xe2, 0x8d, 0x03, 0x59, 0x50, 0xc7, 0x74,
	0x41, 0xbd, 0x98, 0xce, 0xcd, 0x52, 0x53, 0x6b, 0xd7, 0xf1, 0x9d, 0x8d, 0x9a, 0xa0, 0x4f, 0x17,
	0xde, 0xed, 0x35, 0x63, 0x5f, 0x5d, 0x3c, 0x34, 0x77, 0x44, 0x6d, 0xd6, 0x95, 0x66, 0x5c, 0xf2,
	0xc0, 0xf7, 0x29, 0x27, 0x74, 0x16, 0x9b, 0xe5, 0xa6, 0xd6, 0xfe, 0x1f, 0x67, 0x5d, 0xe8, 0x09,
	0x54, 0xa7, 0x9c, 0x85, 0x17, 0x43, 0xb3, 0x22, 0xca, 0x95, 0x85, 0x4c, 0xa8, 0x91, 0x55, 0x18,
	0x7a, 0xfc, 0xd6, 0xac, 0x8a, 0xc0, 0xda, 0x44, 0x87, 0x50, 0xf9, 0xc0, 0xd9, 0x6a, 0x69, 0xd6,
	0x9a, 0x5a, 0x7b, 0xaf, 0xb3, 0x6f, 0x67, 0x04, 0x15, 0x01, 0x2c, 0xe3, 0xad, 0x4f, 0x8a, 0xae,
	0xbb, 0x9c, 0x7b, 0x09, 0x5d, 0xd3, 0xdd, 0x83, 0x92, 0xd3, 0x17, 0x3c, 0xcb, 0xb8, 0xe4, 0xf4,
	0xd1, 0x5b, 0xa8, 0x88, 0x2c, 0xc1, 0x4e, 0xef, 0x3c, 0xcb, 0xc2, 0x15, 0xd5, 0xc2, 0x32, 0xb9,
	0xf5, 0x13, 0xf4, 0x4c, 0xb0, 0x00, 0xfa, 0x02, 0x6a, 0x3d, 0x4e, 0xbd, 0x84, 0x71, 0x05, 0x0b,
	0xb6, 0x18, 0x84, 0x1b, 0x53, 0x8e, 0xd7, 0x21, 0x74, 0x02, 0x55, 0x59, 0x2f, 0xa4, 0x7b, 0xb8,
	0xb7, 0xca, 0x6e, 0x9d, 0xaa, 0x89, 0x0d, 0x83, 0x38, 0x41, 0xc7, 0x50, 0x15, 0x46, 0x6c, 0x6a,
	0xcd, 0x9d, 0xb6, 0xde, 0x39, 0xd8, 0x06, 0xa2, 0xd2, 0x5a, 0xaf, 0x94, 0x2c, 0x7d, 0xba, 0xa0,
	0x1b, 0x59, 0x2c, 0xa8, 0x0b, 0xaf, 0xd3, 0x97, 0x40, 0x65, 0x7c, 0x67, 0xb7, 0x2e, 0xe0, 0x40,
	0x7c, 0x77, 0xbd, 0x64, 0x76, 0x93, 0xbf, 0x3c, 0x27, 0x7f, 0x75, 0x7f, 0x90, 0x82, 0xcc, 0x3e,
	0xfa, 0xac, 0x86, 0x88, 0x0c, 0x68, 0xb8, 0xe3, 0xde, 0xf0, 0x8c, 0x10, 0xe7, 0xdc, 0x19, 0xf4,
	0x8d, 0xff, 0x90, 0x0e, 0xb5, 0x29, 0x9e, 0x74, 0x07, 0x98, 0x18, 0x1a, 0x6a, 0x40, 0xfd, 0xa3,
	0xdb, 0xed, 0x4d, 0x46, 0x23, 0x62, 0x94, 0xd2, 0xd0, 0x68, 0xd2, 0x77, 0x87, 0x03, 0x62, 0xec,
	0xa0, 0x3a, 0x94, 0xaf, 0xa6, 0x63, 0x62, 0x94, 0x11, 0x82, 0x3d, 0x67, 0x7c, 0x8e, 0xcf, 0xc8,
	0x25, 0x76, 0x7b, 0x97, 0x2e, 0x1e, 0x18, 0x95, 0xce, 0xaf, 0x12, 0xec, 0x8b, 0x5e, 0x24, 0x3d,
	0x0a, 0xa1, 0xfc, 0x7b, 0x30, 0xa3, 0xe8, 0x35, 0x40, 0x2a, 0x9a, 0x3c, 0x04, 0x6a, 0xd8, 0xea,
	0x2d, 0x5d, 0xb1, 0x60, 0x6e, 0x3d, 0x2e, 0x1c, 0x5d, 0xe8, 0xdb, 0x83, 0x3a, 0xa1, 0xb2, 0x02,
	0x3d, 0xc0, 0xce, 0xda, 0xa6, 0x3d, 0x3a, 0x07, 0x5d, 0xde, 0xc2, 0x6d, 0x38, 0xb9, 0x3b, 0xba,
	0x1d, 0xe7, 0x14, 0x1a, 0x72, 0x6c, 0x8a, 0x41, 0x11, 0x28, 0x37, 0x55, 0x2b, 0xc7, 0x10, 0xbd,
	0x07, 0x5d, 0x5c, 0x3d, 0x2a, 0x06, 0x89, 0x9e, 0x17, 0x8a, 0x8b, 0x03, 0xce, 0x23, 0x74, 0x26,
	0xf0, 0x68, 0x23, 0xea, 0xc8, 0xe7, 0x6b, 0x5d, 0xdf, 0x81, 0x21, 0xcb, 0xd2, 0xd7, 0xab, 0xce,
	0xf6, 0x6f, 0x3d, 0xf3, 0x80, 0xdd, 0x43, 0x78, 0x19, 0xd1, 0x24, 0xbb, 0xbe, 0xd4, 0x42, 0x4b,
	0x37, 0x58, 0x06, 0xe0, 0xba, 0x2a, 0x76, 0xd8, 0x9b, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x3c,
	0x30, 0x75, 0xd4, 0x65, 0x05, 0x00, 0x00,
}
