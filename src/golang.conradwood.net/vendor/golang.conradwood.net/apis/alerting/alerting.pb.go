// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/alerting/alerting.proto
// DO NOT EDIT!

/*
Package alerting is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/alerting/alerting.proto

It has these top-level messages:
	ModuleRef
	AlertResult
	Config
	LinkedModules
*/
package alerting

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ModuleRef struct {
	ModuleID uint64 `protobuf:"varint,1,opt,name=ModuleID" json:"ModuleID,omitempty"`
}

func (m *ModuleRef) Reset()                    { *m = ModuleRef{} }
func (m *ModuleRef) String() string            { return proto.CompactTextString(m) }
func (*ModuleRef) ProtoMessage()               {}
func (*ModuleRef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ModuleRef) GetModuleID() uint64 {
	if m != nil {
		return m.ModuleID
	}
	return 0
}

type AlertResult struct {
	ActiveAlerts uint32 `protobuf:"varint,1,opt,name=ActiveAlerts" json:"ActiveAlerts,omitempty"`
	Description  string `protobuf:"bytes,2,opt,name=Description" json:"Description,omitempty"`
}

func (m *AlertResult) Reset()                    { *m = AlertResult{} }
func (m *AlertResult) String() string            { return proto.CompactTextString(m) }
func (*AlertResult) ProtoMessage()               {}
func (*AlertResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AlertResult) GetActiveAlerts() uint32 {
	if m != nil {
		return m.ActiveAlerts
	}
	return 0
}

func (m *AlertResult) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Config struct {
	ID             uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	ModuleID       uint64 `protobuf:"varint,2,opt,name=ModuleID" json:"ModuleID,omitempty"`
	BrightnessOK   uint32 `protobuf:"varint,3,opt,name=BrightnessOK" json:"BrightnessOK,omitempty"`
	BrightnessFail uint32 `protobuf:"varint,4,opt,name=BrightnessFail" json:"BrightnessFail,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Config) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Config) GetModuleID() uint64 {
	if m != nil {
		return m.ModuleID
	}
	return 0
}

func (m *Config) GetBrightnessOK() uint32 {
	if m != nil {
		return m.BrightnessOK
	}
	return 0
}

func (m *Config) GetBrightnessFail() uint32 {
	if m != nil {
		return m.BrightnessFail
	}
	return 0
}

type LinkedModules struct {
	ID       uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	ModuleID uint64 `protobuf:"varint,2,opt,name=ModuleID" json:"ModuleID,omitempty"`
}

func (m *LinkedModules) Reset()                    { *m = LinkedModules{} }
func (m *LinkedModules) String() string            { return proto.CompactTextString(m) }
func (*LinkedModules) ProtoMessage()               {}
func (*LinkedModules) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LinkedModules) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *LinkedModules) GetModuleID() uint64 {
	if m != nil {
		return m.ModuleID
	}
	return 0
}

func init() {
	proto.RegisterType((*ModuleRef)(nil), "alerting.ModuleRef")
	proto.RegisterType((*AlertResult)(nil), "alerting.AlertResult")
	proto.RegisterType((*Config)(nil), "alerting.Config")
	proto.RegisterType((*LinkedModules)(nil), "alerting.LinkedModules")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AlertingService service

type AlertingServiceClient interface {
	// link a module to display alert status
	LinkModule(ctx context.Context, in *ModuleRef, opts ...grpc.CallOption) (*common.Void, error)
	// unlink a module to display alert status
	UnlinkModule(ctx context.Context, in *ModuleRef, opts ...grpc.CallOption) (*common.Void, error)
	// get alerts
	GetAlerts(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*AlertResult, error)
	// set the config for a module
	SetConfig(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Config, error)
}

type alertingServiceClient struct {
	cc *grpc.ClientConn
}

func NewAlertingServiceClient(cc *grpc.ClientConn) AlertingServiceClient {
	return &alertingServiceClient{cc}
}

func (c *alertingServiceClient) LinkModule(ctx context.Context, in *ModuleRef, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/alerting.AlertingService/LinkModule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertingServiceClient) UnlinkModule(ctx context.Context, in *ModuleRef, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/alerting.AlertingService/UnlinkModule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertingServiceClient) GetAlerts(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*AlertResult, error) {
	out := new(AlertResult)
	err := grpc.Invoke(ctx, "/alerting.AlertingService/GetAlerts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertingServiceClient) SetConfig(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := grpc.Invoke(ctx, "/alerting.AlertingService/SetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AlertingService service

type AlertingServiceServer interface {
	// link a module to display alert status
	LinkModule(context.Context, *ModuleRef) (*common.Void, error)
	// unlink a module to display alert status
	UnlinkModule(context.Context, *ModuleRef) (*common.Void, error)
	// get alerts
	GetAlerts(context.Context, *common.Void) (*AlertResult, error)
	// set the config for a module
	SetConfig(context.Context, *Config) (*Config, error)
}

func RegisterAlertingServiceServer(s *grpc.Server, srv AlertingServiceServer) {
	s.RegisterService(&_AlertingService_serviceDesc, srv)
}

func _AlertingService_LinkModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModuleRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingServiceServer).LinkModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.AlertingService/LinkModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingServiceServer).LinkModule(ctx, req.(*ModuleRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertingService_UnlinkModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModuleRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingServiceServer).UnlinkModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.AlertingService/UnlinkModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingServiceServer).UnlinkModule(ctx, req.(*ModuleRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertingService_GetAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingServiceServer).GetAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.AlertingService/GetAlerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingServiceServer).GetAlerts(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertingService_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingServiceServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.AlertingService/SetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingServiceServer).SetConfig(ctx, req.(*Config))
	}
	return interceptor(ctx, in, info, handler)
}

var _AlertingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "alerting.AlertingService",
	HandlerType: (*AlertingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LinkModule",
			Handler:    _AlertingService_LinkModule_Handler,
		},
		{
			MethodName: "UnlinkModule",
			Handler:    _AlertingService_UnlinkModule_Handler,
		},
		{
			MethodName: "GetAlerts",
			Handler:    _AlertingService_GetAlerts_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _AlertingService_SetConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/alerting/alerting.proto",
}

func init() { proto.RegisterFile("golang.conradwood.net/apis/alerting/alerting.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 354 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x52, 0xcd, 0x4a, 0xf3, 0x40,
	0x14, 0x25, 0xfd, 0x42, 0x69, 0x6e, 0x7f, 0x3e, 0x19, 0x11, 0x62, 0x56, 0x25, 0xfe, 0x75, 0x95,
	0x68, 0x7d, 0x82, 0xd6, 0xaa, 0x14, 0x15, 0x21, 0x45, 0xf7, 0x31, 0xb9, 0x8d, 0x83, 0xe9, 0x4c,
	0x99, 0x99, 0xd6, 0xbd, 0x4b, 0x1f, 0xc5, 0x27, 0xf2, 0x71, 0x24, 0x3f, 0x4e, 0x52, 0x05, 0x41,
	0x57, 0xc9, 0x3d, 0x73, 0xce, 0xcc, 0xe1, 0x9e, 0x03, 0xc3, 0x84, 0xa7, 0x21, 0x4b, 0xbc, 0x88,
	0x33, 0x11, 0xc6, 0xcf, 0x9c, 0xc7, 0x1e, 0x43, 0xe5, 0x87, 0x4b, 0x2a, 0xfd, 0x30, 0x45, 0xa1,
	0x28, 0x4b, 0xf4, 0x8f, 0xb7, 0x14, 0x5c, 0x71, 0xd2, 0xfa, 0x9c, 0x1d, 0xef, 0x07, 0x75, 0xc4,
	0x17, 0x0b, 0xce, 0xca, 0x4f, 0xa1, 0x74, 0x8f, 0xc0, 0xba, 0xe1, 0xf1, 0x2a, 0xc5, 0x00, 0xe7,
	0xc4, 0x81, 0x56, 0x31, 0x4c, 0x27, 0xb6, 0xd1, 0x37, 0x06, 0x66, 0xa0, 0x67, 0x77, 0x06, 0xed,
	0x51, 0xf6, 0x48, 0x80, 0x72, 0x95, 0x2a, 0xe2, 0x42, 0x67, 0x14, 0x29, 0xba, 0xc6, 0x1c, 0x94,
	0x39, 0xbd, 0x1b, 0x6c, 0x60, 0xa4, 0x0f, 0xed, 0x09, 0xca, 0x48, 0xd0, 0xa5, 0xa2, 0x9c, 0xd9,
	0x8d, 0xbe, 0x31, 0xb0, 0x82, 0x3a, 0xe4, 0xbe, 0x1a, 0xd0, 0x3c, 0xe3, 0x6c, 0x4e, 0x13, 0xd2,
	0x83, 0x86, 0x7e, 0xb5, 0x31, 0x9d, 0x90, 0xfd, 0x9a, 0x97, 0x4c, 0x69, 0x8e, 0x5b, 0x6f, 0x2f,
	0xbb, 0xa6, 0x12, 0x2b, 0xac, 0x5c, 0x65, 0x36, 0xc6, 0x82, 0x26, 0x8f, 0x8a, 0xa1, 0x94, 0xb7,
	0x57, 0xf6, 0xbf, 0xc2, 0x46, 0x1d, 0x23, 0x87, 0xd0, 0xab, 0xe6, 0x8b, 0x90, 0xa6, 0xb6, 0x99,
	0xb3, 0xbe, 0xa0, 0xee, 0x39, 0x74, 0xaf, 0x29, 0x7b, 0xc2, 0xb8, 0xb8, 0x5d, 0xfe, 0xcd, 0xd2,
	0xf0, 0xdd, 0x80, 0xff, 0xa3, 0x32, 0x8e, 0x19, 0x8a, 0x35, 0x8d, 0x90, 0xf8, 0x00, 0xd9, 0xd5,
	0x05, 0x87, 0x6c, 0x7b, 0x3a, 0x3e, 0xbd, 0x7b, 0xa7, 0xe3, 0x95, 0xb9, 0xdc, 0x73, 0x1a, 0x93,
	0x13, 0xe8, 0xdc, 0xb1, 0xf4, 0x57, 0x92, 0x63, 0xb0, 0x2e, 0x51, 0x95, 0xab, 0xdf, 0x38, 0x72,
	0x76, 0x2a, 0x75, 0x3d, 0x43, 0x1f, 0xac, 0x19, 0xaa, 0x72, 0xff, 0x5b, 0x15, 0xa7, 0x40, 0x9c,
	0x6f, 0xc8, 0xf8, 0x00, 0xf6, 0x18, 0xaa, 0x7a, 0xb7, 0xca, 0xb6, 0x65, 0xf5, 0xd2, 0xec, 0x87,
	0x66, 0x5e, 0xad, 0xd3, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x38, 0x63, 0x5e, 0x82, 0xca, 0x02,
	0x00, 0x00,
}
