// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/timeseries/timeseries.proto
// DO NOT EDIT!

/*
Package timeseries is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/timeseries/timeseries.proto

It has these top-level messages:
	LabelFilter
	SeriesRequest
	DataPoint
	Timeseries
*/
package timeseries

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// defines a filter for labels
type LabelFilter struct {
	Name  string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value" json:"Value,omitempty"`
	Regex bool   `protobuf:"varint,3,opt,name=Regex" json:"Regex,omitempty"`
}

func (m *LabelFilter) Reset()                    { *m = LabelFilter{} }
func (m *LabelFilter) String() string            { return proto.CompactTextString(m) }
func (*LabelFilter) ProtoMessage()               {}
func (*LabelFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LabelFilter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LabelFilter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *LabelFilter) GetRegex() bool {
	if m != nil {
		return m.Regex
	}
	return false
}

type SeriesRequest struct {
	MetricName string         `protobuf:"bytes,1,opt,name=MetricName" json:"MetricName,omitempty"`
	Labels     []*LabelFilter `protobuf:"bytes,2,rep,name=Labels" json:"Labels,omitempty"`
	Start      uint32         `protobuf:"varint,3,opt,name=Start" json:"Start,omitempty"`
	End        uint32         `protobuf:"varint,4,opt,name=End" json:"End,omitempty"`
}

func (m *SeriesRequest) Reset()                    { *m = SeriesRequest{} }
func (m *SeriesRequest) String() string            { return proto.CompactTextString(m) }
func (*SeriesRequest) ProtoMessage()               {}
func (*SeriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SeriesRequest) GetMetricName() string {
	if m != nil {
		return m.MetricName
	}
	return ""
}

func (m *SeriesRequest) GetLabels() []*LabelFilter {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *SeriesRequest) GetStart() uint32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *SeriesRequest) GetEnd() uint32 {
	if m != nil {
		return m.End
	}
	return 0
}

// an actual datapoint
type DataPoint struct {
	Timestamp uint32  `protobuf:"varint,1,opt,name=Timestamp" json:"Timestamp,omitempty"`
	Value     float64 `protobuf:"fixed64,2,opt,name=Value" json:"Value,omitempty"`
}

func (m *DataPoint) Reset()                    { *m = DataPoint{} }
func (m *DataPoint) String() string            { return proto.CompactTextString(m) }
func (*DataPoint) ProtoMessage()               {}
func (*DataPoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DataPoint) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *DataPoint) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Timeseries struct {
	Name   string            `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Labels map[string]string `protobuf:"bytes,2,rep,name=Labels" json:"Labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Data   []*DataPoint      `protobuf:"bytes,3,rep,name=Data" json:"Data,omitempty"`
}

func (m *Timeseries) Reset()                    { *m = Timeseries{} }
func (m *Timeseries) String() string            { return proto.CompactTextString(m) }
func (*Timeseries) ProtoMessage()               {}
func (*Timeseries) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Timeseries) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Timeseries) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Timeseries) GetData() []*DataPoint {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*LabelFilter)(nil), "timeseries.LabelFilter")
	proto.RegisterType((*SeriesRequest)(nil), "timeseries.SeriesRequest")
	proto.RegisterType((*DataPoint)(nil), "timeseries.DataPoint")
	proto.RegisterType((*Timeseries)(nil), "timeseries.Timeseries")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TimeseriesService service

type TimeseriesServiceClient interface {
	// just a 'test' sample series
	GetSeries(ctx context.Context, in *SeriesRequest, opts ...grpc.CallOption) (TimeseriesService_GetSeriesClient, error)
}

type timeseriesServiceClient struct {
	cc *grpc.ClientConn
}

func NewTimeseriesServiceClient(cc *grpc.ClientConn) TimeseriesServiceClient {
	return &timeseriesServiceClient{cc}
}

func (c *timeseriesServiceClient) GetSeries(ctx context.Context, in *SeriesRequest, opts ...grpc.CallOption) (TimeseriesService_GetSeriesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TimeseriesService_serviceDesc.Streams[0], c.cc, "/timeseries.TimeseriesService/GetSeries", opts...)
	if err != nil {
		return nil, err
	}
	x := &timeseriesServiceGetSeriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TimeseriesService_GetSeriesClient interface {
	Recv() (*Timeseries, error)
	grpc.ClientStream
}

type timeseriesServiceGetSeriesClient struct {
	grpc.ClientStream
}

func (x *timeseriesServiceGetSeriesClient) Recv() (*Timeseries, error) {
	m := new(Timeseries)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TimeseriesService service

type TimeseriesServiceServer interface {
	// just a 'test' sample series
	GetSeries(*SeriesRequest, TimeseriesService_GetSeriesServer) error
}

func RegisterTimeseriesServiceServer(s *grpc.Server, srv TimeseriesServiceServer) {
	s.RegisterService(&_TimeseriesService_serviceDesc, srv)
}

func _TimeseriesService_GetSeries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SeriesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TimeseriesServiceServer).GetSeries(m, &timeseriesServiceGetSeriesServer{stream})
}

type TimeseriesService_GetSeriesServer interface {
	Send(*Timeseries) error
	grpc.ServerStream
}

type timeseriesServiceGetSeriesServer struct {
	grpc.ServerStream
}

func (x *timeseriesServiceGetSeriesServer) Send(m *Timeseries) error {
	return x.ServerStream.SendMsg(m)
}

var _TimeseriesService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "timeseries.TimeseriesService",
	HandlerType: (*TimeseriesServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSeries",
			Handler:       _TimeseriesService_GetSeries_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "golang.conradwood.net/apis/timeseries/timeseries.proto",
}

// Client API for TimeseriesBackend service

type TimeseriesBackendClient interface {
	// this generates the series
	GetSeries(ctx context.Context, in *SeriesRequest, opts ...grpc.CallOption) (TimeseriesBackend_GetSeriesClient, error)
}

type timeseriesBackendClient struct {
	cc *grpc.ClientConn
}

func NewTimeseriesBackendClient(cc *grpc.ClientConn) TimeseriesBackendClient {
	return &timeseriesBackendClient{cc}
}

func (c *timeseriesBackendClient) GetSeries(ctx context.Context, in *SeriesRequest, opts ...grpc.CallOption) (TimeseriesBackend_GetSeriesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TimeseriesBackend_serviceDesc.Streams[0], c.cc, "/timeseries.TimeseriesBackend/GetSeries", opts...)
	if err != nil {
		return nil, err
	}
	x := &timeseriesBackendGetSeriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TimeseriesBackend_GetSeriesClient interface {
	Recv() (*Timeseries, error)
	grpc.ClientStream
}

type timeseriesBackendGetSeriesClient struct {
	grpc.ClientStream
}

func (x *timeseriesBackendGetSeriesClient) Recv() (*Timeseries, error) {
	m := new(Timeseries)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TimeseriesBackend service

type TimeseriesBackendServer interface {
	// this generates the series
	GetSeries(*SeriesRequest, TimeseriesBackend_GetSeriesServer) error
}

func RegisterTimeseriesBackendServer(s *grpc.Server, srv TimeseriesBackendServer) {
	s.RegisterService(&_TimeseriesBackend_serviceDesc, srv)
}

func _TimeseriesBackend_GetSeries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SeriesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TimeseriesBackendServer).GetSeries(m, &timeseriesBackendGetSeriesServer{stream})
}

type TimeseriesBackend_GetSeriesServer interface {
	Send(*Timeseries) error
	grpc.ServerStream
}

type timeseriesBackendGetSeriesServer struct {
	grpc.ServerStream
}

func (x *timeseriesBackendGetSeriesServer) Send(m *Timeseries) error {
	return x.ServerStream.SendMsg(m)
}

var _TimeseriesBackend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "timeseries.TimeseriesBackend",
	HandlerType: (*TimeseriesBackendServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSeries",
			Handler:       _TimeseriesBackend_GetSeries_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "golang.conradwood.net/apis/timeseries/timeseries.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/timeseries/timeseries.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x92, 0xdf, 0x4e, 0xea, 0x40,
	0x10, 0xc6, 0x53, 0xca, 0x21, 0xa7, 0x43, 0x48, 0xce, 0xd9, 0xf8, 0xa7, 0x12, 0x63, 0x48, 0x13,
	0x23, 0xde, 0x14, 0x83, 0x89, 0x51, 0x6e, 0x34, 0x44, 0xf4, 0x46, 0x8c, 0x59, 0xd0, 0xfb, 0xa5,
	0x9d, 0x90, 0x86, 0xb2, 0x8b, 0xdb, 0x05, 0xe5, 0x0d, 0x7c, 0x2e, 0x9f, 0xcc, 0xec, 0xb6, 0x81,
	0x85, 0x70, 0xe7, 0xdd, 0xcc, 0x97, 0xee, 0x37, 0xbf, 0xaf, 0x33, 0x70, 0x35, 0x16, 0x29, 0xe3,
	0xe3, 0x30, 0x12, 0x5c, 0xb2, 0xf8, 0x43, 0x88, 0x38, 0xe4, 0xa8, 0x5a, 0x6c, 0x96, 0x64, 0x2d,
	0x95, 0x4c, 0x31, 0x43, 0x99, 0xa0, 0x5d, 0x86, 0x33, 0x29, 0x94, 0x20, 0xb0, 0x56, 0x82, 0x3e,
	0x54, 0x9f, 0xd8, 0x08, 0xd3, 0x87, 0x24, 0x55, 0x28, 0x09, 0x81, 0xf2, 0x33, 0x9b, 0xa2, 0xef,
	0x34, 0x9c, 0xa6, 0x47, 0x4d, 0x4d, 0xf6, 0xe0, 0xcf, 0x1b, 0x4b, 0xe7, 0xe8, 0x97, 0x8c, 0x98,
	0x37, 0x5a, 0xa5, 0x38, 0xc6, 0x4f, 0xdf, 0x6d, 0x38, 0xcd, 0xbf, 0x34, 0x6f, 0x82, 0x2f, 0x07,
	0x6a, 0x03, 0xe3, 0x4c, 0xf1, 0x7d, 0x8e, 0x99, 0x22, 0x27, 0x00, 0x7d, 0x54, 0x32, 0x89, 0x2c,
	0x5f, 0x4b, 0x21, 0x2d, 0xa8, 0x18, 0x80, 0xcc, 0x2f, 0x35, 0xdc, 0x66, 0xb5, 0x7d, 0x18, 0x5a,
	0xbc, 0x16, 0x1a, 0x2d, 0x3e, 0xd3, 0x83, 0x07, 0x8a, 0x49, 0x65, 0x06, 0xd7, 0x68, 0xde, 0x90,
	0x7f, 0xe0, 0xf6, 0x78, 0xec, 0x97, 0x8d, 0xa6, 0xcb, 0xe0, 0x16, 0xbc, 0x7b, 0xa6, 0xd8, 0x8b,
	0x48, 0xb8, 0x22, 0xc7, 0xe0, 0x0d, 0xb5, 0xad, 0x62, 0xd3, 0x99, 0x81, 0xa8, 0xd1, 0xb5, 0xb0,
	0x99, 0xd0, 0x29, 0x12, 0x06, 0xdf, 0x0e, 0xc0, 0x70, 0xc5, 0xb2, 0xf3, 0xd7, 0x74, 0xb6, 0xe0,
	0x03, 0x1b, 0x7e, 0xb8, 0x95, 0x23, 0xeb, 0x71, 0x25, 0x97, 0xab, 0x1c, 0xe7, 0x50, 0xd6, 0x7c,
	0xbe, 0x6b, 0x5e, 0xee, 0xdb, 0x2f, 0x57, 0xdc, 0xd4, 0x7c, 0x52, 0xbf, 0x29, 0x96, 0x94, 0x3b,
	0xe8, 0xac, 0x13, 0x5c, 0x16, 0x20, 0xba, 0xd4, 0x01, 0x16, 0xf6, 0x8a, 0x4c, 0xd3, 0x29, 0x5d,
	0x3b, 0xed, 0x57, 0xf8, 0xbf, 0xe6, 0x18, 0xa0, 0x5c, 0x24, 0x11, 0x92, 0x3b, 0xf0, 0x1e, 0x51,
	0xe5, 0x7b, 0x22, 0x47, 0xf6, 0xe4, 0x8d, 0xdd, 0xd5, 0x0f, 0x76, 0xc7, 0xb9, 0xd8, 0xb2, 0xed,
	0xb2, 0x68, 0x82, 0x3c, 0xfe, 0xbd, 0x6d, 0xf7, 0x0c, 0x4e, 0x39, 0x2a, 0xfb, 0xa0, 0x8b, 0x13,
	0xd7, 0x37, 0x6d, 0xbd, 0x1a, 0x55, 0xcc, 0x25, 0x5f, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x5f,
	0x26, 0xc2, 0x9f, 0x03, 0x03, 0x00, 0x00,
}
