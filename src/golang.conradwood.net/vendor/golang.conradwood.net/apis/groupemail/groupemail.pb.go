// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/groupemail/groupemail.proto
// DO NOT EDIT!

/*
Package groupemail is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/groupemail/groupemail.proto

It has these top-level messages:
	InboundConfig
	RecipientConfig
	EmailThread
	ThreadRecipients
	NewListRequest
*/
package groupemail

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"
import email "golang.conradwood.net/apis/email"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// configuration of an inbound email address
type InboundConfig struct {
	ID           uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	InboundEmail string `protobuf:"bytes,2,opt,name=InboundEmail" json:"InboundEmail,omitempty"`
}

func (m *InboundConfig) Reset()                    { *m = InboundConfig{} }
func (m *InboundConfig) String() string            { return proto.CompactTextString(m) }
func (*InboundConfig) ProtoMessage()               {}
func (*InboundConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *InboundConfig) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *InboundConfig) GetInboundEmail() string {
	if m != nil {
		return m.InboundEmail
	}
	return ""
}

// "default" email addresses for this config
type RecipientConfig struct {
	ID            uint64         `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	InboundConfig *InboundConfig `protobuf:"bytes,2,opt,name=InboundConfig" json:"InboundConfig,omitempty"`
	Email         string         `protobuf:"bytes,3,opt,name=Email" json:"Email,omitempty"`
}

func (m *RecipientConfig) Reset()                    { *m = RecipientConfig{} }
func (m *RecipientConfig) String() string            { return proto.CompactTextString(m) }
func (*RecipientConfig) ProtoMessage()               {}
func (*RecipientConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RecipientConfig) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *RecipientConfig) GetInboundConfig() *InboundConfig {
	if m != nil {
		return m.InboundConfig
	}
	return nil
}

func (m *RecipientConfig) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

// an email thread
type EmailThread struct {
	ID                    uint64         `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	TriggerSenderEmail    string         `protobuf:"bytes,2,opt,name=TriggerSenderEmail" json:"TriggerSenderEmail,omitempty"`
	TriggerRecipientEmail string         `protobuf:"bytes,3,opt,name=TriggerRecipientEmail" json:"TriggerRecipientEmail,omitempty"`
	Created               uint32         `protobuf:"varint,4,opt,name=Created" json:"Created,omitempty"`
	InboundConfig         *InboundConfig `protobuf:"bytes,5,opt,name=InboundConfig" json:"InboundConfig,omitempty"`
}

func (m *EmailThread) Reset()                    { *m = EmailThread{} }
func (m *EmailThread) String() string            { return proto.CompactTextString(m) }
func (*EmailThread) ProtoMessage()               {}
func (*EmailThread) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *EmailThread) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *EmailThread) GetTriggerSenderEmail() string {
	if m != nil {
		return m.TriggerSenderEmail
	}
	return ""
}

func (m *EmailThread) GetTriggerRecipientEmail() string {
	if m != nil {
		return m.TriggerRecipientEmail
	}
	return ""
}

func (m *EmailThread) GetCreated() uint32 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *EmailThread) GetInboundConfig() *InboundConfig {
	if m != nil {
		return m.InboundConfig
	}
	return nil
}

// recipients of a thread
type ThreadRecipients struct {
	ID           uint64       `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	EmailThread  *EmailThread `protobuf:"bytes,2,opt,name=EmailThread" json:"EmailThread,omitempty"`
	EmailAddress string       `protobuf:"bytes,3,opt,name=EmailAddress" json:"EmailAddress,omitempty"`
}

func (m *ThreadRecipients) Reset()                    { *m = ThreadRecipients{} }
func (m *ThreadRecipients) String() string            { return proto.CompactTextString(m) }
func (*ThreadRecipients) ProtoMessage()               {}
func (*ThreadRecipients) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ThreadRecipients) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ThreadRecipients) GetEmailThread() *EmailThread {
	if m != nil {
		return m.EmailThread
	}
	return nil
}

func (m *ThreadRecipients) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

type NewListRequest struct {
	InboundEmail string   `protobuf:"bytes,1,opt,name=InboundEmail" json:"InboundEmail,omitempty"`
	Recipients   []string `protobuf:"bytes,2,rep,name=Recipients" json:"Recipients,omitempty"`
}

func (m *NewListRequest) Reset()                    { *m = NewListRequest{} }
func (m *NewListRequest) String() string            { return proto.CompactTextString(m) }
func (*NewListRequest) ProtoMessage()               {}
func (*NewListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *NewListRequest) GetInboundEmail() string {
	if m != nil {
		return m.InboundEmail
	}
	return ""
}

func (m *NewListRequest) GetRecipients() []string {
	if m != nil {
		return m.Recipients
	}
	return nil
}

func init() {
	proto.RegisterType((*InboundConfig)(nil), "groupemail.InboundConfig")
	proto.RegisterType((*RecipientConfig)(nil), "groupemail.RecipientConfig")
	proto.RegisterType((*EmailThread)(nil), "groupemail.EmailThread")
	proto.RegisterType((*ThreadRecipients)(nil), "groupemail.ThreadRecipients")
	proto.RegisterType((*NewListRequest)(nil), "groupemail.NewListRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GroupEmail service

type GroupEmailClient interface {
	// create a new list
	NewList(ctx context.Context, in *NewListRequest, opts ...grpc.CallOption) (*InboundConfig, error)
	// get most recent email
	GetMostRecentMessage(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*email.RawImapMessage, error)
}

type groupEmailClient struct {
	cc *grpc.ClientConn
}

func NewGroupEmailClient(cc *grpc.ClientConn) GroupEmailClient {
	return &groupEmailClient{cc}
}

func (c *groupEmailClient) NewList(ctx context.Context, in *NewListRequest, opts ...grpc.CallOption) (*InboundConfig, error) {
	out := new(InboundConfig)
	err := grpc.Invoke(ctx, "/groupemail.GroupEmail/NewList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupEmailClient) GetMostRecentMessage(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*email.RawImapMessage, error) {
	out := new(email.RawImapMessage)
	err := grpc.Invoke(ctx, "/groupemail.GroupEmail/GetMostRecentMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GroupEmail service

type GroupEmailServer interface {
	// create a new list
	NewList(context.Context, *NewListRequest) (*InboundConfig, error)
	// get most recent email
	GetMostRecentMessage(context.Context, *common.Void) (*email.RawImapMessage, error)
}

func RegisterGroupEmailServer(s *grpc.Server, srv GroupEmailServer) {
	s.RegisterService(&_GroupEmail_serviceDesc, srv)
}

func _GroupEmail_NewList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupEmailServer).NewList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupemail.GroupEmail/NewList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupEmailServer).NewList(ctx, req.(*NewListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupEmail_GetMostRecentMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupEmailServer).GetMostRecentMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupemail.GroupEmail/GetMostRecentMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupEmailServer).GetMostRecentMessage(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _GroupEmail_serviceDesc = grpc.ServiceDesc{
	ServiceName: "groupemail.GroupEmail",
	HandlerType: (*GroupEmailServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewList",
			Handler:    _GroupEmail_NewList_Handler,
		},
		{
			MethodName: "GetMostRecentMessage",
			Handler:    _GroupEmail_GetMostRecentMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/groupemail/groupemail.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/groupemail/groupemail.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 453 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x53, 0x4f, 0x6b, 0xdb, 0x30,
	0x14, 0x47, 0xe9, 0x3f, 0xfa, 0x9a, 0x66, 0x45, 0xb4, 0xcc, 0x31, 0x23, 0x18, 0x9f, 0x72, 0x18,
	0x2a, 0x74, 0xa5, 0x97, 0x5d, 0xb6, 0xa4, 0xa3, 0x04, 0xd6, 0x1d, 0xbc, 0xb0, 0x1d, 0x87, 0x6a,
	0xbd, 0x79, 0x82, 0x46, 0xf2, 0x64, 0x85, 0xdc, 0x7b, 0xdd, 0x17, 0x18, 0xbb, 0x0c, 0xf6, 0x41,
	0xc7, 0xb0, 0xa5, 0xb5, 0x72, 0xdd, 0xe6, 0xd4, 0x93, 0xa5, 0xf7, 0x7e, 0xd2, 0xef, 0x8f, 0xf5,
	0xe0, 0xac, 0xd0, 0xd7, 0x5c, 0x15, 0x2c, 0xd7, 0xca, 0x70, 0xb1, 0xd2, 0x5a, 0x30, 0x85, 0xf6,
	0x98, 0x97, 0xb2, 0x3a, 0x2e, 0x8c, 0x5e, 0x96, 0xb8, 0xe0, 0xf2, 0x3a, 0x58, 0xb2, 0xd2, 0x68,
	0xab, 0x29, 0xdc, 0x55, 0x62, 0xb6, 0xe6, 0x8e, 0x5c, 0x2f, 0x16, 0x5a, 0xf9, 0x8f, 0x3b, 0x1b,
	0xbf, 0x5c, 0x83, 0x77, 0x74, 0x01, 0x53, 0x3a, 0x85, 0xfd, 0x99, 0xba, 0xd2, 0x4b, 0x25, 0xa6,
	0x5a, 0x7d, 0x95, 0x05, 0x1d, 0x40, 0x6f, 0x76, 0x1e, 0x91, 0x84, 0x8c, 0x37, 0xb3, 0xde, 0xec,
	0x9c, 0xa6, 0xd0, 0xf7, 0x80, 0x77, 0xf5, 0xb1, 0xa8, 0x97, 0x90, 0xf1, 0x6e, 0xd6, 0xaa, 0xa5,
	0x3f, 0x09, 0x3c, 0xcb, 0x30, 0x97, 0xa5, 0x44, 0x65, 0x1f, 0xb9, 0xe7, 0xcb, 0x3d, 0xa2, 0xe6,
	0xa2, 0xbd, 0x93, 0x21, 0x0b, 0xcc, 0xb7, 0x00, 0x93, 0xd1, 0xaf, 0x9b, 0xe1, 0xf6, 0x52, 0x2a,
	0x7b, 0x76, 0xfa, 0xe7, 0x66, 0x78, 0x20, 0x5d, 0x33, 0x6f, 0x9a, 0x4c, 0x8a, 0xec, 0x9e, 0xf0,
	0x43, 0xd8, 0x72, 0x0a, 0x37, 0x1a, 0x85, 0x6e, 0x93, 0xfe, 0x25, 0xb0, 0xd7, 0xac, 0xe6, 0xdf,
	0x0c, 0x72, 0xd1, 0x91, 0xc5, 0x80, 0xce, 0x8d, 0x2c, 0x0a, 0x34, 0x1f, 0x51, 0x09, 0x34, 0xa1,
	0xc9, 0x07, 0x3a, 0xf4, 0x14, 0x8e, 0x7c, 0xf5, 0xd6, 0x70, 0xc8, 0xfa, 0x70, 0x93, 0x46, 0xb0,
	0x33, 0x35, 0xc8, 0x2d, 0x8a, 0x68, 0x33, 0x21, 0xe3, 0xfd, 0xec, 0xff, 0xb6, 0x1b, 0xcb, 0xd6,
	0xd3, 0xc6, 0x92, 0xfe, 0x26, 0x70, 0xe0, 0xbc, 0xdf, 0x6a, 0xaa, 0x3a, 0x29, 0x7c, 0x6e, 0x85,
	0xe4, 0x7f, 0xcd, 0xf3, 0x50, 0x43, 0xd0, 0x9e, 0xbc, 0x68, 0x29, 0x18, 0x34, 0x00, 0xdb, 0xb4,
	0x6a, 0xfe, 0x56, 0xdc, 0x29, 0xf4, 0x9b, 0xed, 0x5b, 0x21, 0x0c, 0x56, 0x95, 0x4f, 0xa9, 0x55,
	0x4b, 0xe7, 0x30, 0xf8, 0x80, 0xab, 0xf7, 0xb2, 0xb2, 0x19, 0x7e, 0x5f, 0x62, 0x65, 0x3b, 0x6f,
	0x8e, 0x74, 0xdf, 0x1c, 0x1d, 0x01, 0xdc, 0x19, 0x8a, 0x7a, 0xc9, 0xc6, 0x78, 0x37, 0x0b, 0x2a,
	0x27, 0x3f, 0x08, 0xc0, 0x45, 0xad, 0xdf, 0xc1, 0xdf, 0xc0, 0x8e, 0x27, 0xa1, 0x71, 0xe8, 0xab,
	0xcd, 0x1c, 0x3f, 0x9e, 0x3b, 0x7d, 0x0d, 0x87, 0x17, 0x68, 0x2f, 0x75, 0x0d, 0xce, 0x51, 0xd9,
	0x4b, 0xac, 0x2a, 0x5e, 0x20, 0xed, 0x33, 0x3f, 0x7e, 0x9f, 0xb4, 0x14, 0xf1, 0x11, 0x73, 0x67,
	0x33, 0xbe, 0x9a, 0x2d, 0x78, 0xe9, 0x41, 0x93, 0x04, 0x46, 0x0a, 0x6d, 0x38, 0x93, 0xf5, 0x3c,
	0x06, 0x64, 0x57, 0xdb, 0xcd, 0x3c, 0xbe, 0xfa, 0x17, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x7c, 0xd7,
	0x3b, 0x33, 0x04, 0x00, 0x00,
}
