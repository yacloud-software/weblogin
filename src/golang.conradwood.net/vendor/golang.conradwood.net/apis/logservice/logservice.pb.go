// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/logservice/logservice.proto
// DO NOT EDIT!

/*
Package logservice is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/logservice/logservice.proto

It has these top-level messages:
	LogAppDef
	LogLine
	LogRequest
	LogResponse
	LogFilter
	GetLogRequest
	LogEntry
	GetLogResponse
	GetHostLogResponse
	GetHostLogRequest
	GetAppsResponse
	CloseLogRequest
*/
package logservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LogAppDef struct {
	Appname      string `protobuf:"bytes,2,opt,name=Appname" json:"Appname,omitempty"`
	Repository   string `protobuf:"bytes,3,opt,name=Repository" json:"Repository,omitempty"`
	Groupname    string `protobuf:"bytes,4,opt,name=Groupname" json:"Groupname,omitempty"`
	Namespace    string `protobuf:"bytes,5,opt,name=Namespace" json:"Namespace,omitempty"`
	DeploymentID string `protobuf:"bytes,6,opt,name=DeploymentID" json:"DeploymentID,omitempty"`
	StartupID    string `protobuf:"bytes,7,opt,name=StartupID" json:"StartupID,omitempty"`
	RepoID       uint64 `protobuf:"varint,8,opt,name=RepoID" json:"RepoID,omitempty"`
}

func (m *LogAppDef) Reset()                    { *m = LogAppDef{} }
func (m *LogAppDef) String() string            { return proto.CompactTextString(m) }
func (*LogAppDef) ProtoMessage()               {}
func (*LogAppDef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LogAppDef) GetAppname() string {
	if m != nil {
		return m.Appname
	}
	return ""
}

func (m *LogAppDef) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *LogAppDef) GetGroupname() string {
	if m != nil {
		return m.Groupname
	}
	return ""
}

func (m *LogAppDef) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *LogAppDef) GetDeploymentID() string {
	if m != nil {
		return m.DeploymentID
	}
	return ""
}

func (m *LogAppDef) GetStartupID() string {
	if m != nil {
		return m.StartupID
	}
	return ""
}

func (m *LogAppDef) GetRepoID() uint64 {
	if m != nil {
		return m.RepoID
	}
	return 0
}

type LogLine struct {
	Time   int64  `protobuf:"varint,1,opt,name=Time" json:"Time,omitempty"`
	Line   string `protobuf:"bytes,2,opt,name=Line" json:"Line,omitempty"`
	Level  int32  `protobuf:"varint,3,opt,name=Level" json:"Level,omitempty"`
	Status string `protobuf:"bytes,4,opt,name=Status" json:"Status,omitempty"`
}

func (m *LogLine) Reset()                    { *m = LogLine{} }
func (m *LogLine) String() string            { return proto.CompactTextString(m) }
func (*LogLine) ProtoMessage()               {}
func (*LogLine) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LogLine) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *LogLine) GetLine() string {
	if m != nil {
		return m.Line
	}
	return ""
}

func (m *LogLine) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *LogLine) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type LogRequest struct {
	AppDef *LogAppDef `protobuf:"bytes,1,opt,name=AppDef" json:"AppDef,omitempty"`
	Lines  []*LogLine `protobuf:"bytes,2,rep,name=Lines" json:"Lines,omitempty"`
}

func (m *LogRequest) Reset()                    { *m = LogRequest{} }
func (m *LogRequest) String() string            { return proto.CompactTextString(m) }
func (*LogRequest) ProtoMessage()               {}
func (*LogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LogRequest) GetAppDef() *LogAppDef {
	if m != nil {
		return m.AppDef
	}
	return nil
}

func (m *LogRequest) GetLines() []*LogLine {
	if m != nil {
		return m.Lines
	}
	return nil
}

type LogResponse struct {
}

func (m *LogResponse) Reset()                    { *m = LogResponse{} }
func (m *LogResponse) String() string            { return proto.CompactTextString(m) }
func (*LogResponse) ProtoMessage()               {}
func (*LogResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type LogFilter struct {
	Host       string     `protobuf:"bytes,1,opt,name=Host" json:"Host,omitempty"`
	UserName   string     `protobuf:"bytes,2,opt,name=UserName" json:"UserName,omitempty"`
	AppDef     *LogAppDef `protobuf:"bytes,3,opt,name=AppDef" json:"AppDef,omitempty"`
	FuzzyMatch string     `protobuf:"bytes,4,opt,name=FuzzyMatch" json:"FuzzyMatch,omitempty"`
}

func (m *LogFilter) Reset()                    { *m = LogFilter{} }
func (m *LogFilter) String() string            { return proto.CompactTextString(m) }
func (*LogFilter) ProtoMessage()               {}
func (*LogFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LogFilter) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *LogFilter) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *LogFilter) GetAppDef() *LogAppDef {
	if m != nil {
		return m.AppDef
	}
	return nil
}

func (m *LogFilter) GetFuzzyMatch() string {
	if m != nil {
		return m.FuzzyMatch
	}
	return ""
}

type GetLogRequest struct {
	// logical OR of stuff to retrieve - if null means EVERYTHING
	LogFilter []*LogFilter `protobuf:"bytes,1,rep,name=LogFilter" json:"LogFilter,omitempty"`
	// minimum logid to retrieve (0=all) (negative means last n lines)
	MinimumLogID int64 `protobuf:"varint,2,opt,name=MinimumLogID" json:"MinimumLogID,omitempty"`
}

func (m *GetLogRequest) Reset()                    { *m = GetLogRequest{} }
func (m *GetLogRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLogRequest) ProtoMessage()               {}
func (*GetLogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetLogRequest) GetLogFilter() []*LogFilter {
	if m != nil {
		return m.LogFilter
	}
	return nil
}

func (m *GetLogRequest) GetMinimumLogID() int64 {
	if m != nil {
		return m.MinimumLogID
	}
	return 0
}

type LogEntry struct {
	ID       uint64     `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Host     string     `protobuf:"bytes,2,opt,name=Host" json:"Host,omitempty"`
	UserName string     `protobuf:"bytes,3,opt,name=UserName" json:"UserName,omitempty"`
	Occured  uint64     `protobuf:"varint,4,opt,name=Occured" json:"Occured,omitempty"`
	AppDef   *LogAppDef `protobuf:"bytes,5,opt,name=AppDef" json:"AppDef,omitempty"`
	Line     string     `protobuf:"bytes,6,opt,name=Line" json:"Line,omitempty"`
	Status   string     `protobuf:"bytes,7,opt,name=Status" json:"Status,omitempty"`
}

func (m *LogEntry) Reset()                    { *m = LogEntry{} }
func (m *LogEntry) String() string            { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()               {}
func (*LogEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *LogEntry) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *LogEntry) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *LogEntry) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *LogEntry) GetOccured() uint64 {
	if m != nil {
		return m.Occured
	}
	return 0
}

func (m *LogEntry) GetAppDef() *LogAppDef {
	if m != nil {
		return m.AppDef
	}
	return nil
}

func (m *LogEntry) GetLine() string {
	if m != nil {
		return m.Line
	}
	return ""
}

func (m *LogEntry) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type GetLogResponse struct {
	Entries []*LogEntry `protobuf:"bytes,1,rep,name=Entries" json:"Entries,omitempty"`
}

func (m *GetLogResponse) Reset()                    { *m = GetLogResponse{} }
func (m *GetLogResponse) String() string            { return proto.CompactTextString(m) }
func (*GetLogResponse) ProtoMessage()               {}
func (*GetLogResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetLogResponse) GetEntries() []*LogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type GetHostLogResponse struct {
	// grouped by host
	Entries []*GetLogResponse `protobuf:"bytes,1,rep,name=Entries" json:"Entries,omitempty"`
}

func (m *GetHostLogResponse) Reset()                    { *m = GetHostLogResponse{} }
func (m *GetHostLogResponse) String() string            { return proto.CompactTextString(m) }
func (*GetHostLogResponse) ProtoMessage()               {}
func (*GetHostLogResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetHostLogResponse) GetEntries() []*GetLogResponse {
	if m != nil {
		return m.Entries
	}
	return nil
}

type GetHostLogRequest struct {
	// logical OR of stuff to retrieve - if null means EVERYTHING
	LogFilter []*LogFilter `protobuf:"bytes,1,rep,name=LogFilter" json:"LogFilter,omitempty"`
	// minimum logid to retrieve (0=all) (negative means last n lines)
	MinimumLogID int64 `protobuf:"varint,2,opt,name=MinimumLogID" json:"MinimumLogID,omitempty"`
}

func (m *GetHostLogRequest) Reset()                    { *m = GetHostLogRequest{} }
func (m *GetHostLogRequest) String() string            { return proto.CompactTextString(m) }
func (*GetHostLogRequest) ProtoMessage()               {}
func (*GetHostLogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetHostLogRequest) GetLogFilter() []*LogFilter {
	if m != nil {
		return m.LogFilter
	}
	return nil
}

func (m *GetHostLogRequest) GetMinimumLogID() int64 {
	if m != nil {
		return m.MinimumLogID
	}
	return 0
}

type GetAppsResponse struct {
	AppDef []*LogAppDef `protobuf:"bytes,1,rep,name=AppDef" json:"AppDef,omitempty"`
}

func (m *GetAppsResponse) Reset()                    { *m = GetAppsResponse{} }
func (m *GetAppsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAppsResponse) ProtoMessage()               {}
func (*GetAppsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetAppsResponse) GetAppDef() []*LogAppDef {
	if m != nil {
		return m.AppDef
	}
	return nil
}

type CloseLogRequest struct {
	AppDef   *LogAppDef `protobuf:"bytes,1,opt,name=AppDef" json:"AppDef,omitempty"`
	ExitCode int32      `protobuf:"varint,2,opt,name=ExitCode" json:"ExitCode,omitempty"`
}

func (m *CloseLogRequest) Reset()                    { *m = CloseLogRequest{} }
func (m *CloseLogRequest) String() string            { return proto.CompactTextString(m) }
func (*CloseLogRequest) ProtoMessage()               {}
func (*CloseLogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CloseLogRequest) GetAppDef() *LogAppDef {
	if m != nil {
		return m.AppDef
	}
	return nil
}

func (m *CloseLogRequest) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

func init() {
	proto.RegisterType((*LogAppDef)(nil), "logservice.LogAppDef")
	proto.RegisterType((*LogLine)(nil), "logservice.LogLine")
	proto.RegisterType((*LogRequest)(nil), "logservice.LogRequest")
	proto.RegisterType((*LogResponse)(nil), "logservice.LogResponse")
	proto.RegisterType((*LogFilter)(nil), "logservice.LogFilter")
	proto.RegisterType((*GetLogRequest)(nil), "logservice.GetLogRequest")
	proto.RegisterType((*LogEntry)(nil), "logservice.LogEntry")
	proto.RegisterType((*GetLogResponse)(nil), "logservice.GetLogResponse")
	proto.RegisterType((*GetHostLogResponse)(nil), "logservice.GetHostLogResponse")
	proto.RegisterType((*GetHostLogRequest)(nil), "logservice.GetHostLogRequest")
	proto.RegisterType((*GetAppsResponse)(nil), "logservice.GetAppsResponse")
	proto.RegisterType((*CloseLogRequest)(nil), "logservice.CloseLogRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for LogService service

type LogServiceClient interface {
	LogCommandStdout(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
	GetLogCommandStdout(ctx context.Context, in *GetLogRequest, opts ...grpc.CallOption) (*GetLogResponse, error)
	GetApps(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*GetAppsResponse, error)
	CloseLog(ctx context.Context, in *CloseLogRequest, opts ...grpc.CallOption) (*common.Void, error)
	// the entries for an application
	GetAppLastEntries(ctx context.Context, in *GetHostLogRequest, opts ...grpc.CallOption) (*GetHostLogResponse, error)
}

type logServiceClient struct {
	cc *grpc.ClientConn
}

func NewLogServiceClient(cc *grpc.ClientConn) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) LogCommandStdout(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := grpc.Invoke(ctx, "/logservice.LogService/LogCommandStdout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) GetLogCommandStdout(ctx context.Context, in *GetLogRequest, opts ...grpc.CallOption) (*GetLogResponse, error) {
	out := new(GetLogResponse)
	err := grpc.Invoke(ctx, "/logservice.LogService/GetLogCommandStdout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) GetApps(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*GetAppsResponse, error) {
	out := new(GetAppsResponse)
	err := grpc.Invoke(ctx, "/logservice.LogService/GetApps", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) CloseLog(ctx context.Context, in *CloseLogRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/logservice.LogService/CloseLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) GetAppLastEntries(ctx context.Context, in *GetHostLogRequest, opts ...grpc.CallOption) (*GetHostLogResponse, error) {
	out := new(GetHostLogResponse)
	err := grpc.Invoke(ctx, "/logservice.LogService/GetAppLastEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LogService service

type LogServiceServer interface {
	LogCommandStdout(context.Context, *LogRequest) (*LogResponse, error)
	GetLogCommandStdout(context.Context, *GetLogRequest) (*GetLogResponse, error)
	GetApps(context.Context, *common.Void) (*GetAppsResponse, error)
	CloseLog(context.Context, *CloseLogRequest) (*common.Void, error)
	// the entries for an application
	GetAppLastEntries(context.Context, *GetHostLogRequest) (*GetHostLogResponse, error)
}

func RegisterLogServiceServer(s *grpc.Server, srv LogServiceServer) {
	s.RegisterService(&_LogService_serviceDesc, srv)
}

func _LogService_LogCommandStdout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).LogCommandStdout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logservice.LogService/LogCommandStdout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).LogCommandStdout(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_GetLogCommandStdout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).GetLogCommandStdout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logservice.LogService/GetLogCommandStdout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).GetLogCommandStdout(ctx, req.(*GetLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_GetApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).GetApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logservice.LogService/GetApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).GetApps(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_CloseLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).CloseLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logservice.LogService/CloseLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).CloseLog(ctx, req.(*CloseLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_GetAppLastEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).GetAppLastEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logservice.LogService/GetAppLastEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).GetAppLastEntries(ctx, req.(*GetHostLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logservice.LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogCommandStdout",
			Handler:    _LogService_LogCommandStdout_Handler,
		},
		{
			MethodName: "GetLogCommandStdout",
			Handler:    _LogService_GetLogCommandStdout_Handler,
		},
		{
			MethodName: "GetApps",
			Handler:    _LogService_GetApps_Handler,
		},
		{
			MethodName: "CloseLog",
			Handler:    _LogService_CloseLog_Handler,
		},
		{
			MethodName: "GetAppLastEntries",
			Handler:    _LogService_GetAppLastEntries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/logservice/logservice.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/logservice/logservice.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 711 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x55, 0x5d, 0x6f, 0xd3, 0x3c,
	0x14, 0x56, 0xbf, 0xdb, 0xb3, 0xaf, 0xf7, 0xf5, 0xf6, 0xee, 0x0d, 0x01, 0xa6, 0x2a, 0x12, 0xa2,
	0x5c, 0xd0, 0x49, 0x1b, 0x70, 0xbd, 0xd2, 0x6c, 0xa5, 0x28, 0x1b, 0x92, 0x0b, 0x5c, 0x21, 0xa1,
	0xd0, 0x7a, 0x59, 0xa4, 0x26, 0x36, 0xb1, 0x33, 0xe8, 0x7e, 0x02, 0x7f, 0x8a, 0x1f, 0xc2, 0x0d,
	0x3f, 0x05, 0xc5, 0x76, 0x53, 0x27, 0xb0, 0x31, 0x21, 0x71, 0xd5, 0x9c, 0x0f, 0x3f, 0xe7, 0x3c,
	0xcf, 0x39, 0xae, 0xe1, 0x59, 0x40, 0xe7, 0x7e, 0x1c, 0xf4, 0xa7, 0x34, 0x4e, 0xfc, 0xd9, 0x27,
	0x4a, 0x67, 0xfd, 0x98, 0x88, 0x7d, 0x9f, 0x85, 0x7c, 0x7f, 0x4e, 0x03, 0x4e, 0x92, 0xcb, 0x70,
	0x4a, 0x8c, 0xcf, 0x3e, 0x4b, 0xa8, 0xa0, 0x08, 0x56, 0x1e, 0xbb, 0x7f, 0x03, 0xc6, 0x94, 0x46,
	0x11, 0x8d, 0xf5, 0x8f, 0x3a, 0xeb, 0x7c, 0xab, 0x40, 0xc7, 0xa3, 0xc1, 0x80, 0x31, 0x97, 0x9c,
	0x23, 0x0b, 0x5a, 0x03, 0xc6, 0x62, 0x3f, 0x22, 0x56, 0xb5, 0x5b, 0xe9, 0x75, 0xf0, 0xd2, 0x44,
	0x7b, 0x00, 0x98, 0x30, 0xca, 0x43, 0x41, 0x93, 0x85, 0x55, 0x93, 0x41, 0xc3, 0x83, 0xee, 0x41,
	0x67, 0x94, 0xd0, 0x54, 0x9d, 0xad, 0xcb, 0xf0, 0xca, 0x91, 0x45, 0xcf, 0xfc, 0x88, 0x70, 0xe6,
	0x4f, 0x89, 0xd5, 0x50, 0xd1, 0xdc, 0x81, 0x1c, 0x58, 0x77, 0x09, 0x9b, 0xd3, 0x45, 0x44, 0x62,
	0x31, 0x76, 0xad, 0xa6, 0x4c, 0x28, 0xf8, 0x32, 0x84, 0x89, 0xf0, 0x13, 0x91, 0xb2, 0xb1, 0x6b,
	0xb5, 0x14, 0x42, 0xee, 0x40, 0xbb, 0xd0, 0xcc, 0x7a, 0x19, 0xbb, 0x56, 0xbb, 0x5b, 0xe9, 0xd5,
	0xb1, 0xb6, 0x9c, 0xf7, 0xd0, 0xf2, 0x68, 0xe0, 0x85, 0x31, 0x41, 0x08, 0xea, 0xaf, 0xc3, 0x88,
	0x58, 0x95, 0x6e, 0xa5, 0x57, 0xc3, 0xf2, 0x3b, 0xf3, 0x65, 0x31, 0xcd, 0x55, 0x7e, 0xa3, 0x1d,
	0x68, 0x78, 0xe4, 0x92, 0xcc, 0x25, 0xc7, 0x06, 0x56, 0x46, 0x56, 0x60, 0x22, 0x7c, 0x91, 0x72,
	0xcd, 0x4d, 0x5b, 0xce, 0x39, 0x80, 0x47, 0x03, 0x4c, 0x3e, 0xa6, 0x84, 0x0b, 0xf4, 0x18, 0x9a,
	0x4a, 0x48, 0x59, 0x65, 0xed, 0xe0, 0xbf, 0xbe, 0x31, 0xab, 0x5c, 0x65, 0xac, 0x93, 0xd0, 0x23,
	0x68, 0x64, 0x25, 0xb9, 0x55, 0xed, 0xd6, 0x7a, 0x6b, 0x07, 0xdb, 0xa5, 0xec, 0x2c, 0x86, 0x55,
	0x86, 0xb3, 0x01, 0x6b, 0xb2, 0x0e, 0x67, 0x34, 0xe6, 0xc4, 0xf9, 0xa2, 0xa6, 0x76, 0x12, 0xce,
	0x05, 0x49, 0x32, 0x1a, 0x2f, 0x28, 0x17, 0xb2, 0x68, 0x07, 0xcb, 0x6f, 0x64, 0x43, 0xfb, 0x0d,
	0x27, 0xc9, 0xd9, 0x6a, 0x94, 0xb9, 0x6d, 0xb4, 0x59, 0xbb, 0x4d, 0x9b, 0x7b, 0x00, 0x27, 0xe9,
	0xd5, 0xd5, 0xe2, 0xd4, 0x17, 0xd3, 0x0b, 0xcd, 0xdf, 0xf0, 0x38, 0x17, 0xb0, 0x31, 0x22, 0xc2,
	0x90, 0xe1, 0xd0, 0x68, 0xce, 0xaa, 0x48, 0x6e, 0xe5, 0x12, 0x2a, 0x88, 0x0d, 0x12, 0x0e, 0xac,
	0x9f, 0x86, 0x71, 0x18, 0xa5, 0x91, 0x47, 0x83, 0xb1, 0x2b, 0x9b, 0xae, 0xe1, 0x82, 0xcf, 0xf9,
	0x5a, 0x81, 0xb6, 0x47, 0x83, 0xe3, 0x58, 0x24, 0x0b, 0xb4, 0x09, 0xd5, 0xb1, 0x2b, 0x39, 0xd7,
	0x71, 0x75, 0xec, 0xe6, 0x2a, 0x54, 0xaf, 0x51, 0xa1, 0x56, 0x52, 0xc1, 0x82, 0xd6, 0xab, 0xe9,
	0x34, 0x4d, 0xc8, 0x4c, 0x72, 0xaa, 0xe3, 0xa5, 0x69, 0xe8, 0xd3, 0xb8, 0x8d, 0x3e, 0xcb, 0x2d,
	0x6a, 0x1a, 0x5b, 0xb4, 0xda, 0x97, 0x56, 0x61, 0x5f, 0x8e, 0x60, 0x73, 0xa9, 0x95, 0x1a, 0x25,
	0xea, 0x43, 0x2b, 0xe3, 0x13, 0x12, 0xae, 0xa5, 0xda, 0x29, 0x55, 0x93, 0x6c, 0xf1, 0x32, 0xc9,
	0x79, 0x09, 0x68, 0x44, 0x44, 0xc6, 0xce, 0x44, 0x79, 0x52, 0x46, 0xb1, 0x4d, 0x94, 0x62, 0xc9,
	0x15, 0xd6, 0x1c, 0xfe, 0x35, 0xb1, 0xfe, 0xf2, 0xf4, 0x8e, 0x60, 0x6b, 0x44, 0xc4, 0x80, 0x31,
	0x9e, 0xb7, 0x6d, 0x5e, 0x98, 0xda, 0x6f, 0x95, 0x76, 0xde, 0xc1, 0xd6, 0x70, 0x4e, 0x39, 0xf9,
	0xf3, 0x2b, 0x67, 0x43, 0xfb, 0xf8, 0x73, 0x28, 0x86, 0x74, 0xa6, 0xae, 0x45, 0x03, 0xe7, 0xf6,
	0xc1, 0xf7, 0xaa, 0xbc, 0xcc, 0x13, 0x75, 0x18, 0x0d, 0xe1, 0x1f, 0x8f, 0x06, 0x43, 0x1a, 0x45,
	0x7e, 0x3c, 0x9b, 0x88, 0x19, 0x4d, 0x05, 0xda, 0x2d, 0xa1, 0xeb, 0x2e, 0xec, 0xff, 0x7f, 0xf2,
	0x6b, 0x82, 0x1e, 0x6c, 0x2b, 0xf1, 0x8b, 0x38, 0x77, 0x7e, 0x35, 0x1d, 0x05, 0x75, 0xc3, 0xe0,
	0xb2, 0x29, 0x6b, 0x05, 0xd1, 0x7a, 0x5f, 0xff, 0x8d, 0xbf, 0xa5, 0xe1, 0xcc, 0xbe, 0x5b, 0x3a,
	0x54, 0x10, 0xf9, 0x29, 0xb4, 0x97, 0xaa, 0xa1, 0x42, 0x62, 0x49, 0x4b, 0xbb, 0x80, 0x89, 0xb0,
	0x5c, 0x8e, 0x01, 0x63, 0x9e, 0xcf, 0x85, 0xde, 0x18, 0x74, 0xbf, 0x54, 0xa8, 0xb8, 0x3b, 0xf6,
	0xde, 0x75, 0x61, 0xd5, 0xca, 0xf3, 0x87, 0xf0, 0x20, 0x26, 0xc2, 0x7c, 0x9c, 0xf4, 0x73, 0x95,
	0xbd, 0x4f, 0xc6, 0xd9, 0x0f, 0x4d, 0xf9, 0x3a, 0x1d, 0xfe, 0x08, 0x00, 0x00, 0xff, 0xff, 0x58,
	0xf3, 0x92, 0x52, 0x13, 0x07, 0x00, 0x00,
}
