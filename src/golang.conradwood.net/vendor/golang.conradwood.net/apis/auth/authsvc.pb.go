// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/auth/authsvc.proto
// DO NOT EDIT!

package auth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type KeyResponse struct {
	Key       []byte `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	CloudName string `protobuf:"bytes,2,opt,name=CloudName" json:"CloudName,omitempty"`
}

func (m *KeyResponse) Reset()                    { *m = KeyResponse{} }
func (m *KeyResponse) String() string            { return proto.CompactTextString(m) }
func (*KeyResponse) ProtoMessage()               {}
func (*KeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *KeyResponse) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KeyResponse) GetCloudName() string {
	if m != nil {
		return m.CloudName
	}
	return ""
}

type AuthenticatePasswordRequest struct {
	Email    string `protobuf:"bytes,1,opt,name=Email" json:"Email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password" json:"Password,omitempty"`
}

func (m *AuthenticatePasswordRequest) Reset()                    { *m = AuthenticatePasswordRequest{} }
func (m *AuthenticatePasswordRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthenticatePasswordRequest) ProtoMessage()               {}
func (*AuthenticatePasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *AuthenticatePasswordRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *AuthenticatePasswordRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type AuthenticateTokenRequest struct {
	Token string `protobuf:"bytes,1,opt,name=Token" json:"Token,omitempty"`
}

func (m *AuthenticateTokenRequest) Reset()                    { *m = AuthenticateTokenRequest{} }
func (m *AuthenticateTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthenticateTokenRequest) ProtoMessage()               {}
func (*AuthenticateTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *AuthenticateTokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*KeyResponse)(nil), "auth.KeyResponse")
	proto.RegisterType((*AuthenticatePasswordRequest)(nil), "auth.AuthenticatePasswordRequest")
	proto.RegisterType((*AuthenticateTokenRequest)(nil), "auth.AuthenticateTokenRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AuthenticationService service

type AuthenticationServiceClient interface {
	// DEPRECATED authenticate a user by username/password, return token
	GetByPassword(ctx context.Context, in *AuthenticatePasswordRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	// DEPRECATED authenticate a user by token, return same token
	GetByToken(ctx context.Context, in *AuthenticateTokenRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	// authenticate a user by username/password, return token
	SignedGetByPassword(ctx context.Context, in *AuthenticatePasswordRequest, opts ...grpc.CallOption) (*SignedAuthResponse, error)
	// authenticate a user by token, return same token
	SignedGetByToken(ctx context.Context, in *AuthenticateTokenRequest, opts ...grpc.CallOption) (*SignedAuthResponse, error)
	// get the public signing key
	GetPublicSigningKey(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*KeyResponse, error)
}

type authenticationServiceClient struct {
	cc *grpc.ClientConn
}

func NewAuthenticationServiceClient(cc *grpc.ClientConn) AuthenticationServiceClient {
	return &authenticationServiceClient{cc}
}

func (c *authenticationServiceClient) GetByPassword(ctx context.Context, in *AuthenticatePasswordRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := grpc.Invoke(ctx, "/auth.AuthenticationService/GetByPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) GetByToken(ctx context.Context, in *AuthenticateTokenRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := grpc.Invoke(ctx, "/auth.AuthenticationService/GetByToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) SignedGetByPassword(ctx context.Context, in *AuthenticatePasswordRequest, opts ...grpc.CallOption) (*SignedAuthResponse, error) {
	out := new(SignedAuthResponse)
	err := grpc.Invoke(ctx, "/auth.AuthenticationService/SignedGetByPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) SignedGetByToken(ctx context.Context, in *AuthenticateTokenRequest, opts ...grpc.CallOption) (*SignedAuthResponse, error) {
	out := new(SignedAuthResponse)
	err := grpc.Invoke(ctx, "/auth.AuthenticationService/SignedGetByToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) GetPublicSigningKey(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*KeyResponse, error) {
	out := new(KeyResponse)
	err := grpc.Invoke(ctx, "/auth.AuthenticationService/GetPublicSigningKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthenticationService service

type AuthenticationServiceServer interface {
	// DEPRECATED authenticate a user by username/password, return token
	GetByPassword(context.Context, *AuthenticatePasswordRequest) (*AuthResponse, error)
	// DEPRECATED authenticate a user by token, return same token
	GetByToken(context.Context, *AuthenticateTokenRequest) (*AuthResponse, error)
	// authenticate a user by username/password, return token
	SignedGetByPassword(context.Context, *AuthenticatePasswordRequest) (*SignedAuthResponse, error)
	// authenticate a user by token, return same token
	SignedGetByToken(context.Context, *AuthenticateTokenRequest) (*SignedAuthResponse, error)
	// get the public signing key
	GetPublicSigningKey(context.Context, *common.Void) (*KeyResponse, error)
}

func RegisterAuthenticationServiceServer(s *grpc.Server, srv AuthenticationServiceServer) {
	s.RegisterService(&_AuthenticationService_serviceDesc, srv)
}

func _AuthenticationService_GetByPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).GetByPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthenticationService/GetByPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).GetByPassword(ctx, req.(*AuthenticatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_GetByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).GetByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthenticationService/GetByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).GetByToken(ctx, req.(*AuthenticateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_SignedGetByPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).SignedGetByPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthenticationService/SignedGetByPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).SignedGetByPassword(ctx, req.(*AuthenticatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_SignedGetByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).SignedGetByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthenticationService/SignedGetByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).SignedGetByToken(ctx, req.(*AuthenticateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_GetPublicSigningKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).GetPublicSigningKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthenticationService/GetPublicSigningKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).GetPublicSigningKey(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthenticationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthenticationService",
	HandlerType: (*AuthenticationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByPassword",
			Handler:    _AuthenticationService_GetByPassword_Handler,
		},
		{
			MethodName: "GetByToken",
			Handler:    _AuthenticationService_GetByToken_Handler,
		},
		{
			MethodName: "SignedGetByPassword",
			Handler:    _AuthenticationService_SignedGetByPassword_Handler,
		},
		{
			MethodName: "SignedGetByToken",
			Handler:    _AuthenticationService_SignedGetByToken_Handler,
		},
		{
			MethodName: "GetPublicSigningKey",
			Handler:    _AuthenticationService_GetPublicSigningKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/auth/authsvc.proto",
}

func init() { proto.RegisterFile("golang.conradwood.net/apis/auth/authsvc.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x92, 0xcf, 0x4f, 0xfa, 0x40,
	0x10, 0xc5, 0x03, 0xdf, 0x1f, 0x91, 0x11, 0x13, 0x5c, 0x34, 0x69, 0xaa, 0x51, 0xe0, 0x44, 0x4c,
	0x2c, 0x46, 0x13, 0x6f, 0x26, 0x8a, 0x51, 0x0e, 0x18, 0x25, 0xc5, 0x78, 0x5f, 0xda, 0x49, 0xd9,
	0xd8, 0xee, 0x60, 0xbb, 0x85, 0xf0, 0xb7, 0x7b, 0x31, 0xdd, 0x16, 0x58, 0xa3, 0x12, 0xbc, 0xb4,
	0x7d, 0xed, 0x7b, 0x9f, 0x4e, 0x66, 0x1f, 0x9c, 0x06, 0x14, 0x72, 0x19, 0x38, 0x1e, 0xc9, 0x98,
	0xfb, 0x33, 0x22, 0xdf, 0x91, 0xa8, 0x3a, 0x7c, 0x22, 0x92, 0x0e, 0x4f, 0xd5, 0x58, 0x5f, 0x92,
	0xa9, 0xe7, 0x4c, 0x62, 0x52, 0xc4, 0xfe, 0x66, 0xd2, 0x3e, 0xd9, 0x24, 0x94, 0x27, 0x6c, 0x67,
	0x8d, 0xd7, 0xa3, 0x28, 0x22, 0x59, 0xdc, 0x72, 0x7f, 0xeb, 0x0a, 0xb6, 0xfb, 0x38, 0x77, 0x31,
	0x99, 0x90, 0x4c, 0x90, 0xd5, 0xe0, 0x4f, 0x1f, 0xe7, 0x56, 0xa9, 0x51, 0x6a, 0x57, 0xdd, 0xec,
	0x91, 0x1d, 0x42, 0xe5, 0x36, 0xa4, 0xd4, 0x7f, 0xe4, 0x11, 0x5a, 0xe5, 0x46, 0xa9, 0x5d, 0x71,
	0x57, 0x2f, 0x5a, 0x4f, 0x70, 0x70, 0x93, 0xaa, 0x31, 0x4a, 0x25, 0x3c, 0xae, 0x70, 0xc0, 0x93,
	0x64, 0x46, 0xb1, 0xef, 0xe2, 0x5b, 0x8a, 0x89, 0x62, 0x7b, 0xf0, 0xef, 0x2e, 0xe2, 0x22, 0xd4,
	0xc0, 0x8a, 0x9b, 0x0b, 0x66, 0xc3, 0xd6, 0xc2, 0x58, 0x10, 0x97, 0xba, 0x75, 0x06, 0x96, 0x09,
	0x7c, 0xa6, 0x57, 0x94, 0x06, 0x4d, 0xeb, 0x05, 0x4d, 0x8b, 0xf3, 0xf7, 0x32, 0xec, 0x1b, 0x11,
	0x41, 0x72, 0x88, 0xf1, 0x54, 0x78, 0xc8, 0xee, 0x61, 0xa7, 0x87, 0xaa, 0x3b, 0x5f, 0xc0, 0x59,
	0xd3, 0xd1, 0x9b, 0x5a, 0x33, 0xb1, 0xcd, 0x56, 0x96, 0xe5, 0x52, 0xae, 0x01, 0x34, 0x47, 0xff,
	0x8f, 0x1d, 0x7d, 0x85, 0x98, 0x53, 0x7e, 0x4b, 0x70, 0xa1, 0x3e, 0x14, 0x81, 0x44, 0xff, 0xd7,
	0xf3, 0x58, 0xb9, 0x25, 0x4f, 0x7f, 0x62, 0x3e, 0x40, 0xcd, 0x60, 0x6e, 0x36, 0xdb, 0xcf, 0xb4,
	0x4b, 0xa8, 0xf7, 0x50, 0x0d, 0xd2, 0x51, 0x28, 0xbc, 0xec, 0xb3, 0x90, 0x41, 0x76, 0xfa, 0x55,
	0xa7, 0x68, 0xcb, 0x0b, 0x09, 0xdf, 0xde, 0xcd, 0xe3, 0x46, 0x61, 0xba, 0x4d, 0x38, 0x96, 0xa8,
	0xcc, 0xba, 0x15, 0x05, 0xcc, 0x1a, 0xa7, 0xed, 0xa3, 0xff, 0xba, 0x69, 0x17, 0x1f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x32, 0xc0, 0x47, 0xb7, 0xfc, 0x02, 0x00, 0x00,
}
