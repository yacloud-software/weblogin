// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/auth/auth.proto
// DO NOT EDIT!

/*
Package auth is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/auth/auth.proto

It has these top-level messages:
	AuthResponse
	SignedAuthResponse
	SignedUser
	User
	LinkGroupOrganisation
	Organisation
	Group
	GroupList
	AddToGroupRequest
	RemoveFromGroupRequest
	ListGroupRequest
	UserListResponse
	UpdatePasswordRequest
	ElevateAccessRequest
	ForceUpdatePasswordRequest
	EditAnyUserRequest
	EditSelfRequest
	CreateGroup
	CreateGroupRequest
	CreateGroupResponse
	GetGroupRequest
	GetGroupResponse
	GroupDescriptionRequest
	CreateServiceRequest
	NewService
	ResetRequest
	ExpireTokenRequest
	VerifyEmailRequest
	VerifyEmailResponse
	GetTokenRequest
	TokenResponse
	UserList
	ByAbbrevRequest
	RemoteStoreRequest
	RemoteUserRequest
	RemoteUser
	RemoteUserDetail
	SudoRequest
	TokenCompromisedRequest
	NewToken
	VerifyRequest
	VerifyResponse
	ByIDRequest
	VerifyPasswordResponse
	CreateUserRequest
	ByEmailRequest
	UserEmailAddressList
	ListAllGroupsRequest
	NewPasswordResponse
	UserDef
	AddTokenRequest
	KeyResponse
	AuthenticatePasswordRequest
	AuthenticateTokenRequest
	UserDetail
	UserTokens
	GroupDB
	EmailVerifyPins
	SudoStatus
*/
package auth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TokenType int32

const (
	TokenType_UNDEFINED TokenType = 0
	TokenType_PERMANENT TokenType = 1
	TokenType_SESSION   TokenType = 2
)

var TokenType_name = map[int32]string{
	0: "UNDEFINED",
	1: "PERMANENT",
	2: "SESSION",
}
var TokenType_value = map[string]int32{
	"UNDEFINED": 0,
	"PERMANENT": 1,
	"SESSION":   2,
}

func (x TokenType) String() string {
	return proto.EnumName(TokenType_name, int32(x))
}
func (TokenType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AuthResponse struct {
	Valid         bool   `protobuf:"varint,1,opt,name=Valid" json:"Valid,omitempty"`
	PublicMessage string `protobuf:"bytes,2,opt,name=PublicMessage" json:"PublicMessage,omitempty"`
	LogMessage    string `protobuf:"bytes,3,opt,name=LogMessage" json:"LogMessage,omitempty"`
	User          *User  `protobuf:"bytes,4,opt,name=User" json:"User,omitempty"`
	Token         string `protobuf:"bytes,5,opt,name=Token" json:"Token,omitempty"`
}

func (m *AuthResponse) Reset()                    { *m = AuthResponse{} }
func (m *AuthResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthResponse) ProtoMessage()               {}
func (*AuthResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AuthResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *AuthResponse) GetPublicMessage() string {
	if m != nil {
		return m.PublicMessage
	}
	return ""
}

func (m *AuthResponse) GetLogMessage() string {
	if m != nil {
		return m.LogMessage
	}
	return ""
}

func (m *AuthResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *AuthResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type SignedAuthResponse struct {
	Valid         bool        `protobuf:"varint,1,opt,name=Valid" json:"Valid,omitempty"`
	PublicMessage string      `protobuf:"bytes,2,opt,name=PublicMessage" json:"PublicMessage,omitempty"`
	LogMessage    string      `protobuf:"bytes,3,opt,name=LogMessage" json:"LogMessage,omitempty"`
	User          *SignedUser `protobuf:"bytes,4,opt,name=User" json:"User,omitempty"`
	Token         string      `protobuf:"bytes,5,opt,name=Token" json:"Token,omitempty"`
}

func (m *SignedAuthResponse) Reset()                    { *m = SignedAuthResponse{} }
func (m *SignedAuthResponse) String() string            { return proto.CompactTextString(m) }
func (*SignedAuthResponse) ProtoMessage()               {}
func (*SignedAuthResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SignedAuthResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *SignedAuthResponse) GetPublicMessage() string {
	if m != nil {
		return m.PublicMessage
	}
	return ""
}

func (m *SignedAuthResponse) GetLogMessage() string {
	if m != nil {
		return m.LogMessage
	}
	return ""
}

func (m *SignedAuthResponse) GetUser() *SignedUser {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *SignedAuthResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

//
// this message contains a serialised proto and the signature over the serialised proto
// we are migrating towards this, as it allows us to update the proto in future without
// breaking backwards compatibility. The Signature within SignedUser.User is non-defined
// and may contain random bytes or 0. The only guarantee is that go-easyops can verify it as valid.
type SignedUser struct {
	User      []byte `protobuf:"bytes,1,opt,name=User,proto3" json:"User,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (m *SignedUser) Reset()                    { *m = SignedUser{} }
func (m *SignedUser) String() string            { return proto.CompactTextString(m) }
func (*SignedUser) ProtoMessage()               {}
func (*SignedUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SignedUser) GetUser() []byte {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *SignedUser) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

//
// this message is cryptographically signed.
// Adding/removing fields must be done carefully so that the signature matches all fields.
// It also makes backwards compatibility difficult.
// read the code in auth-service/.../authbe/sign.go and go-easyops/.../auth/sign_verify.go
type User struct {
	ID             string   `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Email          string   `protobuf:"bytes,2,opt,name=Email" json:"Email,omitempty"`
	FirstName      string   `protobuf:"bytes,3,opt,name=FirstName" json:"FirstName,omitempty"`
	LastName       string   `protobuf:"bytes,4,opt,name=LastName" json:"LastName,omitempty"`
	Password       string   `protobuf:"bytes,5,opt,name=Password" json:"Password,omitempty"`
	Groups         []*Group `protobuf:"bytes,6,rep,name=Groups" json:"Groups,omitempty"`
	Abbrev         string   `protobuf:"bytes,7,opt,name=Abbrev" json:"Abbrev,omitempty"`
	Active         bool     `protobuf:"varint,8,opt,name=Active" json:"Active,omitempty"`
	ServiceAccount bool     `protobuf:"varint,9,opt,name=ServiceAccount" json:"ServiceAccount,omitempty"`
	EmailVerified  bool     `protobuf:"varint,10,opt,name=EmailVerified" json:"EmailVerified,omitempty"`
	//
	// 0:not signed, otherwise version:
	// Version 2: ed25519 over ID, Email, FirstName, LastName, Active,Abbrev, GroupIDs, ServiceAccount, EmailVerified
	SignatureVersion uint32 `protobuf:"varint,11,opt,name=SignatureVersion" json:"SignatureVersion,omitempty"`
	SignedAt         uint32 `protobuf:"varint,12,opt,name=SignedAt" json:"SignedAt,omitempty"`
	SignatureID      []byte `protobuf:"bytes,13,opt,name=SignatureID,proto3" json:"SignatureID,omitempty"`
	SignatureFull    []byte `protobuf:"bytes,14,opt,name=SignatureFull,proto3" json:"SignatureFull,omitempty"`
	OrganisationID   string `protobuf:"bytes,15,opt,name=OrganisationID" json:"OrganisationID,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *User) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *User) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *User) GetAbbrev() string {
	if m != nil {
		return m.Abbrev
	}
	return ""
}

func (m *User) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *User) GetServiceAccount() bool {
	if m != nil {
		return m.ServiceAccount
	}
	return false
}

func (m *User) GetEmailVerified() bool {
	if m != nil {
		return m.EmailVerified
	}
	return false
}

func (m *User) GetSignatureVersion() uint32 {
	if m != nil {
		return m.SignatureVersion
	}
	return 0
}

func (m *User) GetSignedAt() uint32 {
	if m != nil {
		return m.SignedAt
	}
	return 0
}

func (m *User) GetSignatureID() []byte {
	if m != nil {
		return m.SignatureID
	}
	return nil
}

func (m *User) GetSignatureFull() []byte {
	if m != nil {
		return m.SignatureFull
	}
	return nil
}

func (m *User) GetOrganisationID() string {
	if m != nil {
		return m.OrganisationID
	}
	return ""
}

type LinkGroupOrganisation struct {
	ID      uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	OrgID   uint64 `protobuf:"varint,2,opt,name=OrgID" json:"OrgID,omitempty"`
	GroupID uint64 `protobuf:"varint,3,opt,name=GroupID" json:"GroupID,omitempty"`
}

func (m *LinkGroupOrganisation) Reset()                    { *m = LinkGroupOrganisation{} }
func (m *LinkGroupOrganisation) String() string            { return proto.CompactTextString(m) }
func (*LinkGroupOrganisation) ProtoMessage()               {}
func (*LinkGroupOrganisation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LinkGroupOrganisation) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *LinkGroupOrganisation) GetOrgID() uint64 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *LinkGroupOrganisation) GetGroupID() uint64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

type Organisation struct {
	ID   uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
}

func (m *Organisation) Reset()                    { *m = Organisation{} }
func (m *Organisation) String() string            { return proto.CompactTextString(m) }
func (*Organisation) ProtoMessage()               {}
func (*Organisation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Organisation) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Organisation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Group struct {
	ID   string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	// a free text field describing the usage of this group
	Description string `protobuf:"bytes,3,opt,name=Description" json:"Description,omitempty"`
}

func (m *Group) Reset()                    { *m = Group{} }
func (m *Group) String() string            { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()               {}
func (*Group) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Group) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Group) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Group) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type GroupList struct {
	Groups []*Group `protobuf:"bytes,1,rep,name=Groups" json:"Groups,omitempty"`
}

func (m *GroupList) Reset()                    { *m = GroupList{} }
func (m *GroupList) String() string            { return proto.CompactTextString(m) }
func (*GroupList) ProtoMessage()               {}
func (*GroupList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GroupList) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

type AddToGroupRequest struct {
	UserID  string `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
	GroupID string `protobuf:"bytes,2,opt,name=GroupID" json:"GroupID,omitempty"`
}

func (m *AddToGroupRequest) Reset()                    { *m = AddToGroupRequest{} }
func (m *AddToGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*AddToGroupRequest) ProtoMessage()               {}
func (*AddToGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *AddToGroupRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *AddToGroupRequest) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

type RemoveFromGroupRequest struct {
	UserID  string `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
	GroupID string `protobuf:"bytes,2,opt,name=GroupID" json:"GroupID,omitempty"`
}

func (m *RemoveFromGroupRequest) Reset()                    { *m = RemoveFromGroupRequest{} }
func (m *RemoveFromGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveFromGroupRequest) ProtoMessage()               {}
func (*RemoveFromGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RemoveFromGroupRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *RemoveFromGroupRequest) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

type ListGroupRequest struct {
	GroupID              string `protobuf:"bytes,1,opt,name=GroupID" json:"GroupID,omitempty"`
	IncludeInactiveUsers bool   `protobuf:"varint,2,opt,name=IncludeInactiveUsers" json:"IncludeInactiveUsers,omitempty"`
}

func (m *ListGroupRequest) Reset()                    { *m = ListGroupRequest{} }
func (m *ListGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*ListGroupRequest) ProtoMessage()               {}
func (*ListGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ListGroupRequest) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *ListGroupRequest) GetIncludeInactiveUsers() bool {
	if m != nil {
		return m.IncludeInactiveUsers
	}
	return false
}

type UserListResponse struct {
	Users []*User `protobuf:"bytes,1,rep,name=Users" json:"Users,omitempty"`
}

func (m *UserListResponse) Reset()                    { *m = UserListResponse{} }
func (m *UserListResponse) String() string            { return proto.CompactTextString(m) }
func (*UserListResponse) ProtoMessage()               {}
func (*UserListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *UserListResponse) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type UpdatePasswordRequest struct {
	NewPassword string `protobuf:"bytes,1,opt,name=NewPassword" json:"NewPassword,omitempty"`
}

func (m *UpdatePasswordRequest) Reset()                    { *m = UpdatePasswordRequest{} }
func (m *UpdatePasswordRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdatePasswordRequest) ProtoMessage()               {}
func (*UpdatePasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *UpdatePasswordRequest) GetNewPassword() string {
	if m != nil {
		return m.NewPassword
	}
	return ""
}

type ElevateAccessRequest struct {
	// groupids I want to be part of. If this contains existing groups, the call will be rejected.
	GroupIDs []string `protobuf:"bytes,1,rep,name=GroupIDs" json:"GroupIDs,omitempty"`
	// after this many seconds have elapsed the access will be downgraded again
	DurationSecs uint32 `protobuf:"varint,2,opt,name=DurationSecs" json:"DurationSecs,omitempty"`
}

func (m *ElevateAccessRequest) Reset()                    { *m = ElevateAccessRequest{} }
func (m *ElevateAccessRequest) String() string            { return proto.CompactTextString(m) }
func (*ElevateAccessRequest) ProtoMessage()               {}
func (*ElevateAccessRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ElevateAccessRequest) GetGroupIDs() []string {
	if m != nil {
		return m.GroupIDs
	}
	return nil
}

func (m *ElevateAccessRequest) GetDurationSecs() uint32 {
	if m != nil {
		return m.DurationSecs
	}
	return 0
}

type ForceUpdatePasswordRequest struct {
	UserID      string `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
	NewPassword string `protobuf:"bytes,2,opt,name=NewPassword" json:"NewPassword,omitempty"`
}

func (m *ForceUpdatePasswordRequest) Reset()                    { *m = ForceUpdatePasswordRequest{} }
func (m *ForceUpdatePasswordRequest) String() string            { return proto.CompactTextString(m) }
func (*ForceUpdatePasswordRequest) ProtoMessage()               {}
func (*ForceUpdatePasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ForceUpdatePasswordRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *ForceUpdatePasswordRequest) GetNewPassword() string {
	if m != nil {
		return m.NewPassword
	}
	return ""
}

// authorised by "root_auth_admin" group members
type EditAnyUserRequest struct {
	UserID    string `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
	FirstName string `protobuf:"bytes,2,opt,name=FirstName" json:"FirstName,omitempty"`
	LastName  string `protobuf:"bytes,3,opt,name=LastName" json:"LastName,omitempty"`
}

func (m *EditAnyUserRequest) Reset()                    { *m = EditAnyUserRequest{} }
func (m *EditAnyUserRequest) String() string            { return proto.CompactTextString(m) }
func (*EditAnyUserRequest) ProtoMessage()               {}
func (*EditAnyUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *EditAnyUserRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *EditAnyUserRequest) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *EditAnyUserRequest) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

type EditSelfRequest struct {
	FirstName string `protobuf:"bytes,1,opt,name=FirstName" json:"FirstName,omitempty"`
	LastName  string `protobuf:"bytes,2,opt,name=LastName" json:"LastName,omitempty"`
}

func (m *EditSelfRequest) Reset()                    { *m = EditSelfRequest{} }
func (m *EditSelfRequest) String() string            { return proto.CompactTextString(m) }
func (*EditSelfRequest) ProtoMessage()               {}
func (*EditSelfRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *EditSelfRequest) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *EditSelfRequest) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

// CreateGroup holds the details required for creating a group
type CreateGroup struct {
	Name        string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=Description" json:"Description,omitempty"`
}

func (m *CreateGroup) Reset()                    { *m = CreateGroup{} }
func (m *CreateGroup) String() string            { return proto.CompactTextString(m) }
func (*CreateGroup) ProtoMessage()               {}
func (*CreateGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *CreateGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateGroup) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// CreateGroupRequest holds the details of a request to create a group
type CreateGroupRequest struct {
	CreateGroup *CreateGroup `protobuf:"bytes,1,opt,name=CreateGroup" json:"CreateGroup,omitempty"`
}

func (m *CreateGroupRequest) Reset()                    { *m = CreateGroupRequest{} }
func (m *CreateGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateGroupRequest) ProtoMessage()               {}
func (*CreateGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *CreateGroupRequest) GetCreateGroup() *CreateGroup {
	if m != nil {
		return m.CreateGroup
	}
	return nil
}

// CreateGroupResponse returns the details of a group that has been created
type CreateGroupResponse struct {
	Group *Group `protobuf:"bytes,1,opt,name=Group" json:"Group,omitempty"`
}

func (m *CreateGroupResponse) Reset()                    { *m = CreateGroupResponse{} }
func (m *CreateGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateGroupResponse) ProtoMessage()               {}
func (*CreateGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *CreateGroupResponse) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

type GetGroupRequest struct {
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *GetGroupRequest) Reset()                    { *m = GetGroupRequest{} }
func (m *GetGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*GetGroupRequest) ProtoMessage()               {}
func (*GetGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *GetGroupRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type GetGroupResponse struct {
	Group *Group `protobuf:"bytes,1,opt,name=Group" json:"Group,omitempty"`
}

func (m *GetGroupResponse) Reset()                    { *m = GetGroupResponse{} }
func (m *GetGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*GetGroupResponse) ProtoMessage()               {}
func (*GetGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *GetGroupResponse) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

type GroupDescriptionRequest struct {
	GroupID     string `protobuf:"bytes,1,opt,name=GroupID" json:"GroupID,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=Description" json:"Description,omitempty"`
}

func (m *GroupDescriptionRequest) Reset()                    { *m = GroupDescriptionRequest{} }
func (m *GroupDescriptionRequest) String() string            { return proto.CompactTextString(m) }
func (*GroupDescriptionRequest) ProtoMessage()               {}
func (*GroupDescriptionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *GroupDescriptionRequest) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *GroupDescriptionRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type CreateServiceRequest struct {
	ServiceName string `protobuf:"bytes,1,opt,name=ServiceName" json:"ServiceName,omitempty"`
	Token       string `protobuf:"bytes,2,opt,name=Token" json:"Token,omitempty"`
}

func (m *CreateServiceRequest) Reset()                    { *m = CreateServiceRequest{} }
func (m *CreateServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateServiceRequest) ProtoMessage()               {}
func (*CreateServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *CreateServiceRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *CreateServiceRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type NewService struct {
	User  *User  `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=Token" json:"Token,omitempty"`
}

func (m *NewService) Reset()                    { *m = NewService{} }
func (m *NewService) String() string            { return proto.CompactTextString(m) }
func (*NewService) ProtoMessage()               {}
func (*NewService) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *NewService) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *NewService) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type ResetRequest struct {
	Email string `protobuf:"bytes,1,opt,name=Email" json:"Email,omitempty"`
}

func (m *ResetRequest) Reset()                    { *m = ResetRequest{} }
func (m *ResetRequest) String() string            { return proto.CompactTextString(m) }
func (*ResetRequest) ProtoMessage()               {}
func (*ResetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *ResetRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type ExpireTokenRequest struct {
	Token string `protobuf:"bytes,1,opt,name=Token" json:"Token,omitempty"`
}

func (m *ExpireTokenRequest) Reset()                    { *m = ExpireTokenRequest{} }
func (m *ExpireTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*ExpireTokenRequest) ProtoMessage()               {}
func (*ExpireTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *ExpireTokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type VerifyEmailRequest struct {
	Pin string `protobuf:"bytes,1,opt,name=Pin" json:"Pin,omitempty"`
}

func (m *VerifyEmailRequest) Reset()                    { *m = VerifyEmailRequest{} }
func (m *VerifyEmailRequest) String() string            { return proto.CompactTextString(m) }
func (*VerifyEmailRequest) ProtoMessage()               {}
func (*VerifyEmailRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *VerifyEmailRequest) GetPin() string {
	if m != nil {
		return m.Pin
	}
	return ""
}

type VerifyEmailResponse struct {
	Verified bool `protobuf:"varint,1,opt,name=Verified" json:"Verified,omitempty"`
}

func (m *VerifyEmailResponse) Reset()                    { *m = VerifyEmailResponse{} }
func (m *VerifyEmailResponse) String() string            { return proto.CompactTextString(m) }
func (*VerifyEmailResponse) ProtoMessage()               {}
func (*VerifyEmailResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *VerifyEmailResponse) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

type GetTokenRequest struct {
	DurationSecs uint64 `protobuf:"varint,1,opt,name=DurationSecs" json:"DurationSecs,omitempty"`
}

func (m *GetTokenRequest) Reset()                    { *m = GetTokenRequest{} }
func (m *GetTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTokenRequest) ProtoMessage()               {}
func (*GetTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *GetTokenRequest) GetDurationSecs() uint64 {
	if m != nil {
		return m.DurationSecs
	}
	return 0
}

type TokenResponse struct {
	Expiry uint32 `protobuf:"varint,1,opt,name=Expiry" json:"Expiry,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=Token" json:"Token,omitempty"`
}

func (m *TokenResponse) Reset()                    { *m = TokenResponse{} }
func (m *TokenResponse) String() string            { return proto.CompactTextString(m) }
func (*TokenResponse) ProtoMessage()               {}
func (*TokenResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *TokenResponse) GetExpiry() uint32 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *TokenResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type UserList struct {
	Users []*SignedUser `protobuf:"bytes,1,rep,name=Users" json:"Users,omitempty"`
}

func (m *UserList) Reset()                    { *m = UserList{} }
func (m *UserList) String() string            { return proto.CompactTextString(m) }
func (*UserList) ProtoMessage()               {}
func (*UserList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *UserList) GetUsers() []*SignedUser {
	if m != nil {
		return m.Users
	}
	return nil
}

type ByAbbrevRequest struct {
	Abbrev string `protobuf:"bytes,1,opt,name=Abbrev" json:"Abbrev,omitempty"`
}

func (m *ByAbbrevRequest) Reset()                    { *m = ByAbbrevRequest{} }
func (m *ByAbbrevRequest) String() string            { return proto.CompactTextString(m) }
func (*ByAbbrevRequest) ProtoMessage()               {}
func (*ByAbbrevRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *ByAbbrevRequest) GetAbbrev() string {
	if m != nil {
		return m.Abbrev
	}
	return ""
}

type RemoteStoreRequest struct {
	UserID       string `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
	OurToken     string `protobuf:"bytes,2,opt,name=OurToken" json:"OurToken,omitempty"`
	RemoteUserID string `protobuf:"bytes,3,opt,name=RemoteUserID" json:"RemoteUserID,omitempty"`
	Provider     string `protobuf:"bytes,4,opt,name=Provider" json:"Provider,omitempty"`
}

func (m *RemoteStoreRequest) Reset()                    { *m = RemoteStoreRequest{} }
func (m *RemoteStoreRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoteStoreRequest) ProtoMessage()               {}
func (*RemoteStoreRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *RemoteStoreRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *RemoteStoreRequest) GetOurToken() string {
	if m != nil {
		return m.OurToken
	}
	return ""
}

func (m *RemoteStoreRequest) GetRemoteUserID() string {
	if m != nil {
		return m.RemoteUserID
	}
	return ""
}

func (m *RemoteStoreRequest) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

type RemoteUserRequest struct {
	OurToken string `protobuf:"bytes,1,opt,name=OurToken" json:"OurToken,omitempty"`
}

func (m *RemoteUserRequest) Reset()                    { *m = RemoteUserRequest{} }
func (m *RemoteUserRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoteUserRequest) ProtoMessage()               {}
func (*RemoteUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *RemoteUserRequest) GetOurToken() string {
	if m != nil {
		return m.OurToken
	}
	return ""
}

type RemoteUser struct {
	User    *User               `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
	Details []*RemoteUserDetail `protobuf:"bytes,2,rep,name=Details" json:"Details,omitempty"`
}

func (m *RemoteUser) Reset()                    { *m = RemoteUser{} }
func (m *RemoteUser) String() string            { return proto.CompactTextString(m) }
func (*RemoteUser) ProtoMessage()               {}
func (*RemoteUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *RemoteUser) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *RemoteUser) GetDetails() []*RemoteUserDetail {
	if m != nil {
		return m.Details
	}
	return nil
}

type RemoteUserDetail struct {
	ID           uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	UserID       string `protobuf:"bytes,2,opt,name=UserID" json:"UserID,omitempty"`
	Provider     string `protobuf:"bytes,3,opt,name=Provider" json:"Provider,omitempty"`
	OurToken     string `protobuf:"bytes,4,opt,name=OurToken" json:"OurToken,omitempty"`
	Created      uint32 `protobuf:"varint,5,opt,name=Created" json:"Created,omitempty"`
	RemoteUserID string `protobuf:"bytes,6,opt,name=RemoteUserID" json:"RemoteUserID,omitempty"`
}

func (m *RemoteUserDetail) Reset()                    { *m = RemoteUserDetail{} }
func (m *RemoteUserDetail) String() string            { return proto.CompactTextString(m) }
func (*RemoteUserDetail) ProtoMessage()               {}
func (*RemoteUserDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *RemoteUserDetail) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *RemoteUserDetail) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *RemoteUserDetail) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *RemoteUserDetail) GetOurToken() string {
	if m != nil {
		return m.OurToken
	}
	return ""
}

func (m *RemoteUserDetail) GetCreated() uint32 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *RemoteUserDetail) GetRemoteUserID() string {
	if m != nil {
		return m.RemoteUserID
	}
	return ""
}

type SudoRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=Reason" json:"Reason,omitempty"`
}

func (m *SudoRequest) Reset()                    { *m = SudoRequest{} }
func (m *SudoRequest) String() string            { return proto.CompactTextString(m) }
func (*SudoRequest) ProtoMessage()               {}
func (*SudoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *SudoRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *SudoRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type TokenCompromisedRequest struct {
	Token string `protobuf:"bytes,1,opt,name=Token" json:"Token,omitempty"`
}

func (m *TokenCompromisedRequest) Reset()                    { *m = TokenCompromisedRequest{} }
func (m *TokenCompromisedRequest) String() string            { return proto.CompactTextString(m) }
func (*TokenCompromisedRequest) ProtoMessage()               {}
func (*TokenCompromisedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *TokenCompromisedRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type NewToken struct {
	Token string `protobuf:"bytes,1,opt,name=Token" json:"Token,omitempty"`
}

func (m *NewToken) Reset()                    { *m = NewToken{} }
func (m *NewToken) String() string            { return proto.CompactTextString(m) }
func (*NewToken) ProtoMessage()               {}
func (*NewToken) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *NewToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type VerifyRequest struct {
	Token string `protobuf:"bytes,1,opt,name=Token" json:"Token,omitempty"`
}

func (m *VerifyRequest) Reset()                    { *m = VerifyRequest{} }
func (m *VerifyRequest) String() string            { return proto.CompactTextString(m) }
func (*VerifyRequest) ProtoMessage()               {}
func (*VerifyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *VerifyRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type VerifyResponse struct {
	Valid bool  `protobuf:"varint,1,opt,name=Valid" json:"Valid,omitempty"`
	User  *User `protobuf:"bytes,2,opt,name=User" json:"User,omitempty"`
}

func (m *VerifyResponse) Reset()                    { *m = VerifyResponse{} }
func (m *VerifyResponse) String() string            { return proto.CompactTextString(m) }
func (*VerifyResponse) ProtoMessage()               {}
func (*VerifyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *VerifyResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *VerifyResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type ByIDRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
}

func (m *ByIDRequest) Reset()                    { *m = ByIDRequest{} }
func (m *ByIDRequest) String() string            { return proto.CompactTextString(m) }
func (*ByIDRequest) ProtoMessage()               {}
func (*ByIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *ByIDRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type VerifyPasswordResponse struct {
	User  *User  `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=Token" json:"Token,omitempty"`
}

func (m *VerifyPasswordResponse) Reset()                    { *m = VerifyPasswordResponse{} }
func (m *VerifyPasswordResponse) String() string            { return proto.CompactTextString(m) }
func (*VerifyPasswordResponse) ProtoMessage()               {}
func (*VerifyPasswordResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *VerifyPasswordResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *VerifyPasswordResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type CreateUserRequest struct {
	Email         string `protobuf:"bytes,1,opt,name=Email" json:"Email,omitempty"`
	FirstName     string `protobuf:"bytes,2,opt,name=FirstName" json:"FirstName,omitempty"`
	LastName      string `protobuf:"bytes,3,opt,name=LastName" json:"LastName,omitempty"`
	Password      string `protobuf:"bytes,4,opt,name=Password" json:"Password,omitempty"`
	Abbrev        string `protobuf:"bytes,5,opt,name=Abbrev" json:"Abbrev,omitempty"`
	EmailVerified bool   `protobuf:"varint,6,opt,name=EmailVerified" json:"EmailVerified,omitempty"`
}

func (m *CreateUserRequest) Reset()                    { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()               {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *CreateUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CreateUserRequest) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *CreateUserRequest) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *CreateUserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *CreateUserRequest) GetAbbrev() string {
	if m != nil {
		return m.Abbrev
	}
	return ""
}

func (m *CreateUserRequest) GetEmailVerified() bool {
	if m != nil {
		return m.EmailVerified
	}
	return false
}

type ByEmailRequest struct {
	Email string `protobuf:"bytes,1,opt,name=Email" json:"Email,omitempty"`
}

func (m *ByEmailRequest) Reset()                    { *m = ByEmailRequest{} }
func (m *ByEmailRequest) String() string            { return proto.CompactTextString(m) }
func (*ByEmailRequest) ProtoMessage()               {}
func (*ByEmailRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *ByEmailRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type UserEmailAddressList struct {
	Emails []string `protobuf:"bytes,1,rep,name=Emails" json:"Emails,omitempty"`
}

func (m *UserEmailAddressList) Reset()                    { *m = UserEmailAddressList{} }
func (m *UserEmailAddressList) String() string            { return proto.CompactTextString(m) }
func (*UserEmailAddressList) ProtoMessage()               {}
func (*UserEmailAddressList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *UserEmailAddressList) GetEmails() []string {
	if m != nil {
		return m.Emails
	}
	return nil
}

type ListAllGroupsRequest struct {
}

func (m *ListAllGroupsRequest) Reset()                    { *m = ListAllGroupsRequest{} }
func (m *ListAllGroupsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListAllGroupsRequest) ProtoMessage()               {}
func (*ListAllGroupsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

type NewPasswordResponse struct {
	Password string `protobuf:"bytes,1,opt,name=Password" json:"Password,omitempty"`
}

func (m *NewPasswordResponse) Reset()                    { *m = NewPasswordResponse{} }
func (m *NewPasswordResponse) String() string            { return proto.CompactTextString(m) }
func (*NewPasswordResponse) ProtoMessage()               {}
func (*NewPasswordResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *NewPasswordResponse) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type UserDef struct {
	UserID string `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
}

func (m *UserDef) Reset()                    { *m = UserDef{} }
func (m *UserDef) String() string            { return proto.CompactTextString(m) }
func (*UserDef) ProtoMessage()               {}
func (*UserDef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *UserDef) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type AddTokenRequest struct {
	UserID          string `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
	Token           string `protobuf:"bytes,2,opt,name=Token" json:"Token,omitempty"`
	ExpiryTimestamp uint32 `protobuf:"varint,3,opt,name=ExpiryTimestamp" json:"ExpiryTimestamp,omitempty"`
}

func (m *AddTokenRequest) Reset()                    { *m = AddTokenRequest{} }
func (m *AddTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*AddTokenRequest) ProtoMessage()               {}
func (*AddTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *AddTokenRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *AddTokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *AddTokenRequest) GetExpiryTimestamp() uint32 {
	if m != nil {
		return m.ExpiryTimestamp
	}
	return 0
}

type KeyResponse struct {
	Key       []byte `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	CloudName string `protobuf:"bytes,2,opt,name=CloudName" json:"CloudName,omitempty"`
}

func (m *KeyResponse) Reset()                    { *m = KeyResponse{} }
func (m *KeyResponse) String() string            { return proto.CompactTextString(m) }
func (*KeyResponse) ProtoMessage()               {}
func (*KeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *KeyResponse) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KeyResponse) GetCloudName() string {
	if m != nil {
		return m.CloudName
	}
	return ""
}

type AuthenticatePasswordRequest struct {
	Email    string `protobuf:"bytes,1,opt,name=Email" json:"Email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password" json:"Password,omitempty"`
}

func (m *AuthenticatePasswordRequest) Reset()                    { *m = AuthenticatePasswordRequest{} }
func (m *AuthenticatePasswordRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthenticatePasswordRequest) ProtoMessage()               {}
func (*AuthenticatePasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *AuthenticatePasswordRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *AuthenticatePasswordRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type AuthenticateTokenRequest struct {
	Token string `protobuf:"bytes,1,opt,name=Token" json:"Token,omitempty"`
}

func (m *AuthenticateTokenRequest) Reset()                    { *m = AuthenticateTokenRequest{} }
func (m *AuthenticateTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthenticateTokenRequest) ProtoMessage()               {}
func (*AuthenticateTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *AuthenticateTokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

//
// id            | bigint                      |           | not null |
// email         | character varying(1000)     |           | not null |
// emailverified | integer                     |           | not null |
// firstname     | character varying(1000)     |           | not null |
// lastname      | character varying(1000)     |           | not null |
// password      | character varying(1000)     |           | not null |
// created       | timestamp without time zone |           | not null |
// lastmodified  | timestamp without time zone |           | not null |
// creator_id    | bigint                      |           | not null |
// modifiedby_id | bigint                      |           | not null |
// admin         | boolean                     |           | not null |
type UserDetail struct {
	ID            uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Email         string `protobuf:"bytes,2,opt,name=Email" json:"Email,omitempty"`
	FirstName     string `protobuf:"bytes,3,opt,name=FirstName" json:"FirstName,omitempty"`
	LastName      string `protobuf:"bytes,4,opt,name=LastName" json:"LastName,omitempty"`
	Password      string `protobuf:"bytes,5,opt,name=Password" json:"Password,omitempty"`
	Admin         bool   `protobuf:"varint,6,opt,name=Admin" json:"Admin,omitempty"`
	EmailVerified uint32 `protobuf:"varint,7,opt,name=EmailVerified" json:"EmailVerified,omitempty"`
}

func (m *UserDetail) Reset()                    { *m = UserDetail{} }
func (m *UserDetail) String() string            { return proto.CompactTextString(m) }
func (*UserDetail) ProtoMessage()               {}
func (*UserDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *UserDetail) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *UserDetail) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserDetail) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *UserDetail) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *UserDetail) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *UserDetail) GetAdmin() bool {
	if m != nil {
		return m.Admin
	}
	return false
}

func (m *UserDetail) GetEmailVerified() uint32 {
	if m != nil {
		return m.EmailVerified
	}
	return 0
}

type UserTokens struct {
	ID        uint64    `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	UserID    uint64    `protobuf:"varint,2,opt,name=UserID" json:"UserID,omitempty"`
	Token     string    `protobuf:"bytes,3,opt,name=Token" json:"Token,omitempty"`
	Created   uint32    `protobuf:"varint,4,opt,name=Created" json:"Created,omitempty"`
	Expiry    uint32    `protobuf:"varint,5,opt,name=Expiry" json:"Expiry,omitempty"`
	TokenType TokenType `protobuf:"varint,6,opt,name=TokenType,enum=auth.TokenType" json:"TokenType,omitempty"`
}

func (m *UserTokens) Reset()                    { *m = UserTokens{} }
func (m *UserTokens) String() string            { return proto.CompactTextString(m) }
func (*UserTokens) ProtoMessage()               {}
func (*UserTokens) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *UserTokens) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *UserTokens) GetUserID() uint64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *UserTokens) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *UserTokens) GetCreated() uint32 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *UserTokens) GetExpiry() uint32 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *UserTokens) GetTokenType() TokenType {
	if m != nil {
		return m.TokenType
	}
	return TokenType_UNDEFINED
}

type GroupDB struct {
	ID          uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=Description" json:"Description,omitempty"`
}

func (m *GroupDB) Reset()                    { *m = GroupDB{} }
func (m *GroupDB) String() string            { return proto.CompactTextString(m) }
func (*GroupDB) ProtoMessage()               {}
func (*GroupDB) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *GroupDB) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *GroupDB) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GroupDB) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type EmailVerifyPins struct {
	ID       uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	UserID   uint64 `protobuf:"varint,2,opt,name=UserID" json:"UserID,omitempty"`
	Pin      string `protobuf:"bytes,3,opt,name=Pin" json:"Pin,omitempty"`
	Created  uint64 `protobuf:"varint,4,opt,name=Created" json:"Created,omitempty"`
	Accepted uint64 `protobuf:"varint,5,opt,name=Accepted" json:"Accepted,omitempty"`
}

func (m *EmailVerifyPins) Reset()                    { *m = EmailVerifyPins{} }
func (m *EmailVerifyPins) String() string            { return proto.CompactTextString(m) }
func (*EmailVerifyPins) ProtoMessage()               {}
func (*EmailVerifyPins) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *EmailVerifyPins) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *EmailVerifyPins) GetUserID() uint64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *EmailVerifyPins) GetPin() string {
	if m != nil {
		return m.Pin
	}
	return ""
}

func (m *EmailVerifyPins) GetCreated() uint64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *EmailVerifyPins) GetAccepted() uint64 {
	if m != nil {
		return m.Accepted
	}
	return 0
}

type SudoStatus struct {
	ID uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	// which user has sudoed
	UserID uint64 `protobuf:"varint,2,opt,name=UserID" json:"UserID,omitempty"`
	// to which group? typcially root
	GroupID string `protobuf:"bytes,3,opt,name=GroupID" json:"GroupID,omitempty"`
	// for how long?
	Expiry uint32 `protobuf:"varint,4,opt,name=Expiry" json:"Expiry,omitempty"`
}

func (m *SudoStatus) Reset()                    { *m = SudoStatus{} }
func (m *SudoStatus) String() string            { return proto.CompactTextString(m) }
func (*SudoStatus) ProtoMessage()               {}
func (*SudoStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *SudoStatus) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SudoStatus) GetUserID() uint64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *SudoStatus) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *SudoStatus) GetExpiry() uint32 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func init() {
	proto.RegisterType((*AuthResponse)(nil), "auth.AuthResponse")
	proto.RegisterType((*SignedAuthResponse)(nil), "auth.SignedAuthResponse")
	proto.RegisterType((*SignedUser)(nil), "auth.SignedUser")
	proto.RegisterType((*User)(nil), "auth.User")
	proto.RegisterType((*LinkGroupOrganisation)(nil), "auth.LinkGroupOrganisation")
	proto.RegisterType((*Organisation)(nil), "auth.Organisation")
	proto.RegisterType((*Group)(nil), "auth.Group")
	proto.RegisterType((*GroupList)(nil), "auth.GroupList")
	proto.RegisterType((*AddToGroupRequest)(nil), "auth.AddToGroupRequest")
	proto.RegisterType((*RemoveFromGroupRequest)(nil), "auth.RemoveFromGroupRequest")
	proto.RegisterType((*ListGroupRequest)(nil), "auth.ListGroupRequest")
	proto.RegisterType((*UserListResponse)(nil), "auth.UserListResponse")
	proto.RegisterType((*UpdatePasswordRequest)(nil), "auth.UpdatePasswordRequest")
	proto.RegisterType((*ElevateAccessRequest)(nil), "auth.ElevateAccessRequest")
	proto.RegisterType((*ForceUpdatePasswordRequest)(nil), "auth.ForceUpdatePasswordRequest")
	proto.RegisterType((*EditAnyUserRequest)(nil), "auth.EditAnyUserRequest")
	proto.RegisterType((*EditSelfRequest)(nil), "auth.EditSelfRequest")
	proto.RegisterType((*CreateGroup)(nil), "auth.CreateGroup")
	proto.RegisterType((*CreateGroupRequest)(nil), "auth.CreateGroupRequest")
	proto.RegisterType((*CreateGroupResponse)(nil), "auth.CreateGroupResponse")
	proto.RegisterType((*GetGroupRequest)(nil), "auth.GetGroupRequest")
	proto.RegisterType((*GetGroupResponse)(nil), "auth.GetGroupResponse")
	proto.RegisterType((*GroupDescriptionRequest)(nil), "auth.GroupDescriptionRequest")
	proto.RegisterType((*CreateServiceRequest)(nil), "auth.CreateServiceRequest")
	proto.RegisterType((*NewService)(nil), "auth.NewService")
	proto.RegisterType((*ResetRequest)(nil), "auth.ResetRequest")
	proto.RegisterType((*ExpireTokenRequest)(nil), "auth.ExpireTokenRequest")
	proto.RegisterType((*VerifyEmailRequest)(nil), "auth.VerifyEmailRequest")
	proto.RegisterType((*VerifyEmailResponse)(nil), "auth.VerifyEmailResponse")
	proto.RegisterType((*GetTokenRequest)(nil), "auth.GetTokenRequest")
	proto.RegisterType((*TokenResponse)(nil), "auth.TokenResponse")
	proto.RegisterType((*UserList)(nil), "auth.UserList")
	proto.RegisterType((*ByAbbrevRequest)(nil), "auth.ByAbbrevRequest")
	proto.RegisterType((*RemoteStoreRequest)(nil), "auth.RemoteStoreRequest")
	proto.RegisterType((*RemoteUserRequest)(nil), "auth.RemoteUserRequest")
	proto.RegisterType((*RemoteUser)(nil), "auth.RemoteUser")
	proto.RegisterType((*RemoteUserDetail)(nil), "auth.RemoteUserDetail")
	proto.RegisterType((*SudoRequest)(nil), "auth.SudoRequest")
	proto.RegisterType((*TokenCompromisedRequest)(nil), "auth.TokenCompromisedRequest")
	proto.RegisterType((*NewToken)(nil), "auth.NewToken")
	proto.RegisterType((*VerifyRequest)(nil), "auth.VerifyRequest")
	proto.RegisterType((*VerifyResponse)(nil), "auth.VerifyResponse")
	proto.RegisterType((*ByIDRequest)(nil), "auth.ByIDRequest")
	proto.RegisterType((*VerifyPasswordResponse)(nil), "auth.VerifyPasswordResponse")
	proto.RegisterType((*CreateUserRequest)(nil), "auth.CreateUserRequest")
	proto.RegisterType((*ByEmailRequest)(nil), "auth.ByEmailRequest")
	proto.RegisterType((*UserEmailAddressList)(nil), "auth.UserEmailAddressList")
	proto.RegisterType((*ListAllGroupsRequest)(nil), "auth.ListAllGroupsRequest")
	proto.RegisterType((*NewPasswordResponse)(nil), "auth.NewPasswordResponse")
	proto.RegisterType((*UserDef)(nil), "auth.UserDef")
	proto.RegisterType((*AddTokenRequest)(nil), "auth.AddTokenRequest")
	proto.RegisterType((*KeyResponse)(nil), "auth.KeyResponse")
	proto.RegisterType((*AuthenticatePasswordRequest)(nil), "auth.AuthenticatePasswordRequest")
	proto.RegisterType((*AuthenticateTokenRequest)(nil), "auth.AuthenticateTokenRequest")
	proto.RegisterType((*UserDetail)(nil), "auth.UserDetail")
	proto.RegisterType((*UserTokens)(nil), "auth.UserTokens")
	proto.RegisterType((*GroupDB)(nil), "auth.GroupDB")
	proto.RegisterType((*EmailVerifyPins)(nil), "auth.EmailVerifyPins")
	proto.RegisterType((*SudoStatus)(nil), "auth.SudoStatus")
	proto.RegisterEnum("auth.TokenType", TokenType_name, TokenType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AuthManagerService service

type AuthManagerServiceClient interface {
	// very dangerous. updates *any* user.
	// calls to this method are limited to specific services
	ForceUpdatePassword(ctx context.Context, in *ForceUpdatePasswordRequest, opts ...grpc.CallOption) (*common.Void, error)
	// also limited to staff only
	ListGroups(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*GroupList, error)
	// get a user by ID - DEPRECATED
	GetUserByID(ctx context.Context, in *ByIDRequest, opts ...grpc.CallOption) (*User, error)
	// get a user by Email - DEPRECATED
	GetUserByEmail(ctx context.Context, in *ByEmailRequest, opts ...grpc.CallOption) (*User, error)
	// get a user by ID
	SignedGetUserByID(ctx context.Context, in *ByIDRequest, opts ...grpc.CallOption) (*SignedUser, error)
	// get a user by Email
	SignedGetUserByEmail(ctx context.Context, in *ByEmailRequest, opts ...grpc.CallOption) (*SignedUser, error)
	// create a serviceaccount
	CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*NewService, error)
	// requires root user manager access - see code
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)
	// requires root user manager access - see code. a "fake" user is used, for example, for the prober. it has an extremly short lifespan (<60 secs) and is severly limited in what it can do (e.g. cannot log in). Also it does not add/modify userids
	CreateFakeUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)
	// create an email to user to reset password
	ResetPasswordEmail(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*common.Void, error)
	// expire token
	ExpireToken(ctx context.Context, in *ExpireTokenRequest, opts ...grpc.CallOption) (*common.Void, error)
	// reset a users' password (the one whose context this is)
	UpdateMyPassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*common.Void, error)
	// send an emailverification email
	SendEmailVerify(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	// verify an email verification pin
	VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error)
	// get me another token
	GetTokenForMe(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	// get *me* (my useraccount)
	WhoAmI(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*User, error)
	// if a token was compromised, replace it with a different one
	TokenCompromised(ctx context.Context, in *TokenCompromisedRequest, opts ...grpc.CallOption) (*NewToken, error)
	// temporarily become root. User objects for the current user will include group 'root' for a short while
	Sudo(ctx context.Context, in *SudoRequest, opts ...grpc.CallOption) (*common.Void, error)
	// get a group by id - if user has access to it
	GetGroupByID(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*Group, error)
	// if we have just linked some account (e.g. via Google Oauth) we need to store the information. Use this call to do so. (this is obviously privileged and for some services only)
	StoreRemote(ctx context.Context, in *RemoteStoreRequest, opts ...grpc.CallOption) (*common.Void, error)
	// if all we have is a oauth thing (which we stored with StoreOAuth) we can get a user with this
	UserByRemoteToken(ctx context.Context, in *RemoteUserRequest, opts ...grpc.CallOption) (*RemoteUser, error)
	// if we have a user but want its OAuthDetails we can get them with this
	GetMyRemoteDetails(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*RemoteUser, error)
	// expire all (non-permanent) tokens for Me
	LogMeOut(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*User, error)
	// logout some other user (privileged operation)
	LogSomeoneOut(ctx context.Context, in *ByIDRequest, opts ...grpc.CallOption) (*User, error)
	// get user by abbreviation
	GetByAbbreviation(ctx context.Context, in *ByAbbrevRequest, opts ...grpc.CallOption) (*User, error)
	// get all users, root only, very privileged call
	GetAllUsers(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*UserList, error)
}

type authManagerServiceClient struct {
	cc *grpc.ClientConn
}

func NewAuthManagerServiceClient(cc *grpc.ClientConn) AuthManagerServiceClient {
	return &authManagerServiceClient{cc}
}

func (c *authManagerServiceClient) ForceUpdatePassword(ctx context.Context, in *ForceUpdatePasswordRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/auth.AuthManagerService/ForceUpdatePassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagerServiceClient) ListGroups(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*GroupList, error) {
	out := new(GroupList)
	err := grpc.Invoke(ctx, "/auth.AuthManagerService/ListGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagerServiceClient) GetUserByID(ctx context.Context, in *ByIDRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/auth.AuthManagerService/GetUserByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagerServiceClient) GetUserByEmail(ctx context.Context, in *ByEmailRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/auth.AuthManagerService/GetUserByEmail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagerServiceClient) SignedGetUserByID(ctx context.Context, in *ByIDRequest, opts ...grpc.CallOption) (*SignedUser, error) {
	out := new(SignedUser)
	err := grpc.Invoke(ctx, "/auth.AuthManagerService/SignedGetUserByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagerServiceClient) SignedGetUserByEmail(ctx context.Context, in *ByEmailRequest, opts ...grpc.CallOption) (*SignedUser, error) {
	out := new(SignedUser)
	err := grpc.Invoke(ctx, "/auth.AuthManagerService/SignedGetUserByEmail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagerServiceClient) CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*NewService, error) {
	out := new(NewService)
	err := grpc.Invoke(ctx, "/auth.AuthManagerService/CreateService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagerServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/auth.AuthManagerService/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagerServiceClient) CreateFakeUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/auth.AuthManagerService/CreateFakeUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagerServiceClient) ResetPasswordEmail(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/auth.AuthManagerService/ResetPasswordEmail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagerServiceClient) ExpireToken(ctx context.Context, in *ExpireTokenRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/auth.AuthManagerService/ExpireToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagerServiceClient) UpdateMyPassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/auth.AuthManagerService/UpdateMyPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagerServiceClient) SendEmailVerify(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/auth.AuthManagerService/SendEmailVerify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagerServiceClient) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error) {
	out := new(VerifyEmailResponse)
	err := grpc.Invoke(ctx, "/auth.AuthManagerService/VerifyEmail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagerServiceClient) GetTokenForMe(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := grpc.Invoke(ctx, "/auth.AuthManagerService/GetTokenForMe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagerServiceClient) WhoAmI(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/auth.AuthManagerService/WhoAmI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagerServiceClient) TokenCompromised(ctx context.Context, in *TokenCompromisedRequest, opts ...grpc.CallOption) (*NewToken, error) {
	out := new(NewToken)
	err := grpc.Invoke(ctx, "/auth.AuthManagerService/TokenCompromised", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagerServiceClient) Sudo(ctx context.Context, in *SudoRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/auth.AuthManagerService/Sudo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagerServiceClient) GetGroupByID(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := grpc.Invoke(ctx, "/auth.AuthManagerService/GetGroupByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagerServiceClient) StoreRemote(ctx context.Context, in *RemoteStoreRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/auth.AuthManagerService/StoreRemote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagerServiceClient) UserByRemoteToken(ctx context.Context, in *RemoteUserRequest, opts ...grpc.CallOption) (*RemoteUser, error) {
	out := new(RemoteUser)
	err := grpc.Invoke(ctx, "/auth.AuthManagerService/UserByRemoteToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagerServiceClient) GetMyRemoteDetails(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*RemoteUser, error) {
	out := new(RemoteUser)
	err := grpc.Invoke(ctx, "/auth.AuthManagerService/GetMyRemoteDetails", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagerServiceClient) LogMeOut(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/auth.AuthManagerService/LogMeOut", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagerServiceClient) LogSomeoneOut(ctx context.Context, in *ByIDRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/auth.AuthManagerService/LogSomeoneOut", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagerServiceClient) GetByAbbreviation(ctx context.Context, in *ByAbbrevRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/auth.AuthManagerService/GetByAbbreviation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagerServiceClient) GetAllUsers(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*UserList, error) {
	out := new(UserList)
	err := grpc.Invoke(ctx, "/auth.AuthManagerService/GetAllUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthManagerService service

type AuthManagerServiceServer interface {
	// very dangerous. updates *any* user.
	// calls to this method are limited to specific services
	ForceUpdatePassword(context.Context, *ForceUpdatePasswordRequest) (*common.Void, error)
	// also limited to staff only
	ListGroups(context.Context, *common.Void) (*GroupList, error)
	// get a user by ID - DEPRECATED
	GetUserByID(context.Context, *ByIDRequest) (*User, error)
	// get a user by Email - DEPRECATED
	GetUserByEmail(context.Context, *ByEmailRequest) (*User, error)
	// get a user by ID
	SignedGetUserByID(context.Context, *ByIDRequest) (*SignedUser, error)
	// get a user by Email
	SignedGetUserByEmail(context.Context, *ByEmailRequest) (*SignedUser, error)
	// create a serviceaccount
	CreateService(context.Context, *CreateServiceRequest) (*NewService, error)
	// requires root user manager access - see code
	CreateUser(context.Context, *CreateUserRequest) (*User, error)
	// requires root user manager access - see code. a "fake" user is used, for example, for the prober. it has an extremly short lifespan (<60 secs) and is severly limited in what it can do (e.g. cannot log in). Also it does not add/modify userids
	CreateFakeUser(context.Context, *CreateUserRequest) (*User, error)
	// create an email to user to reset password
	ResetPasswordEmail(context.Context, *ResetRequest) (*common.Void, error)
	// expire token
	ExpireToken(context.Context, *ExpireTokenRequest) (*common.Void, error)
	// reset a users' password (the one whose context this is)
	UpdateMyPassword(context.Context, *UpdatePasswordRequest) (*common.Void, error)
	// send an emailverification email
	SendEmailVerify(context.Context, *common.Void) (*common.Void, error)
	// verify an email verification pin
	VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error)
	// get me another token
	GetTokenForMe(context.Context, *GetTokenRequest) (*TokenResponse, error)
	// get *me* (my useraccount)
	WhoAmI(context.Context, *common.Void) (*User, error)
	// if a token was compromised, replace it with a different one
	TokenCompromised(context.Context, *TokenCompromisedRequest) (*NewToken, error)
	// temporarily become root. User objects for the current user will include group 'root' for a short while
	Sudo(context.Context, *SudoRequest) (*common.Void, error)
	// get a group by id - if user has access to it
	GetGroupByID(context.Context, *GetGroupRequest) (*Group, error)
	// if we have just linked some account (e.g. via Google Oauth) we need to store the information. Use this call to do so. (this is obviously privileged and for some services only)
	StoreRemote(context.Context, *RemoteStoreRequest) (*common.Void, error)
	// if all we have is a oauth thing (which we stored with StoreOAuth) we can get a user with this
	UserByRemoteToken(context.Context, *RemoteUserRequest) (*RemoteUser, error)
	// if we have a user but want its OAuthDetails we can get them with this
	GetMyRemoteDetails(context.Context, *common.Void) (*RemoteUser, error)
	// expire all (non-permanent) tokens for Me
	LogMeOut(context.Context, *common.Void) (*User, error)
	// logout some other user (privileged operation)
	LogSomeoneOut(context.Context, *ByIDRequest) (*User, error)
	// get user by abbreviation
	GetByAbbreviation(context.Context, *ByAbbrevRequest) (*User, error)
	// get all users, root only, very privileged call
	GetAllUsers(context.Context, *common.Void) (*UserList, error)
}

func RegisterAuthManagerServiceServer(s *grpc.Server, srv AuthManagerServiceServer) {
	s.RegisterService(&_AuthManagerService_serviceDesc, srv)
}

func _AuthManagerService_ForceUpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceUpdatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServiceServer).ForceUpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthManagerService/ForceUpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServiceServer).ForceUpdatePassword(ctx, req.(*ForceUpdatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManagerService_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServiceServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthManagerService/ListGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServiceServer).ListGroups(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManagerService_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServiceServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthManagerService/GetUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServiceServer).GetUserByID(ctx, req.(*ByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManagerService_GetUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServiceServer).GetUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthManagerService/GetUserByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServiceServer).GetUserByEmail(ctx, req.(*ByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManagerService_SignedGetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServiceServer).SignedGetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthManagerService/SignedGetUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServiceServer).SignedGetUserByID(ctx, req.(*ByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManagerService_SignedGetUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServiceServer).SignedGetUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthManagerService/SignedGetUserByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServiceServer).SignedGetUserByEmail(ctx, req.(*ByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManagerService_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServiceServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthManagerService/CreateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServiceServer).CreateService(ctx, req.(*CreateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManagerService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthManagerService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManagerService_CreateFakeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServiceServer).CreateFakeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthManagerService/CreateFakeUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServiceServer).CreateFakeUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManagerService_ResetPasswordEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServiceServer).ResetPasswordEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthManagerService/ResetPasswordEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServiceServer).ResetPasswordEmail(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManagerService_ExpireToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpireTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServiceServer).ExpireToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthManagerService/ExpireToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServiceServer).ExpireToken(ctx, req.(*ExpireTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManagerService_UpdateMyPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServiceServer).UpdateMyPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthManagerService/UpdateMyPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServiceServer).UpdateMyPassword(ctx, req.(*UpdatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManagerService_SendEmailVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServiceServer).SendEmailVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthManagerService/SendEmailVerify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServiceServer).SendEmailVerify(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManagerService_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServiceServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthManagerService/VerifyEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServiceServer).VerifyEmail(ctx, req.(*VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManagerService_GetTokenForMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServiceServer).GetTokenForMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthManagerService/GetTokenForMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServiceServer).GetTokenForMe(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManagerService_WhoAmI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServiceServer).WhoAmI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthManagerService/WhoAmI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServiceServer).WhoAmI(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManagerService_TokenCompromised_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenCompromisedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServiceServer).TokenCompromised(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthManagerService/TokenCompromised",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServiceServer).TokenCompromised(ctx, req.(*TokenCompromisedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManagerService_Sudo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SudoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServiceServer).Sudo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthManagerService/Sudo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServiceServer).Sudo(ctx, req.(*SudoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManagerService_GetGroupByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServiceServer).GetGroupByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthManagerService/GetGroupByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServiceServer).GetGroupByID(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManagerService_StoreRemote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServiceServer).StoreRemote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthManagerService/StoreRemote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServiceServer).StoreRemote(ctx, req.(*RemoteStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManagerService_UserByRemoteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServiceServer).UserByRemoteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthManagerService/UserByRemoteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServiceServer).UserByRemoteToken(ctx, req.(*RemoteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManagerService_GetMyRemoteDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServiceServer).GetMyRemoteDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthManagerService/GetMyRemoteDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServiceServer).GetMyRemoteDetails(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManagerService_LogMeOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServiceServer).LogMeOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthManagerService/LogMeOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServiceServer).LogMeOut(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManagerService_LogSomeoneOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServiceServer).LogSomeoneOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthManagerService/LogSomeoneOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServiceServer).LogSomeoneOut(ctx, req.(*ByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManagerService_GetByAbbreviation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByAbbrevRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServiceServer).GetByAbbreviation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthManagerService/GetByAbbreviation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServiceServer).GetByAbbreviation(ctx, req.(*ByAbbrevRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManagerService_GetAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServiceServer).GetAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthManagerService/GetAllUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServiceServer).GetAllUsers(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthManagerService",
	HandlerType: (*AuthManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ForceUpdatePassword",
			Handler:    _AuthManagerService_ForceUpdatePassword_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _AuthManagerService_ListGroups_Handler,
		},
		{
			MethodName: "GetUserByID",
			Handler:    _AuthManagerService_GetUserByID_Handler,
		},
		{
			MethodName: "GetUserByEmail",
			Handler:    _AuthManagerService_GetUserByEmail_Handler,
		},
		{
			MethodName: "SignedGetUserByID",
			Handler:    _AuthManagerService_SignedGetUserByID_Handler,
		},
		{
			MethodName: "SignedGetUserByEmail",
			Handler:    _AuthManagerService_SignedGetUserByEmail_Handler,
		},
		{
			MethodName: "CreateService",
			Handler:    _AuthManagerService_CreateService_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _AuthManagerService_CreateUser_Handler,
		},
		{
			MethodName: "CreateFakeUser",
			Handler:    _AuthManagerService_CreateFakeUser_Handler,
		},
		{
			MethodName: "ResetPasswordEmail",
			Handler:    _AuthManagerService_ResetPasswordEmail_Handler,
		},
		{
			MethodName: "ExpireToken",
			Handler:    _AuthManagerService_ExpireToken_Handler,
		},
		{
			MethodName: "UpdateMyPassword",
			Handler:    _AuthManagerService_UpdateMyPassword_Handler,
		},
		{
			MethodName: "SendEmailVerify",
			Handler:    _AuthManagerService_SendEmailVerify_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _AuthManagerService_VerifyEmail_Handler,
		},
		{
			MethodName: "GetTokenForMe",
			Handler:    _AuthManagerService_GetTokenForMe_Handler,
		},
		{
			MethodName: "WhoAmI",
			Handler:    _AuthManagerService_WhoAmI_Handler,
		},
		{
			MethodName: "TokenCompromised",
			Handler:    _AuthManagerService_TokenCompromised_Handler,
		},
		{
			MethodName: "Sudo",
			Handler:    _AuthManagerService_Sudo_Handler,
		},
		{
			MethodName: "GetGroupByID",
			Handler:    _AuthManagerService_GetGroupByID_Handler,
		},
		{
			MethodName: "StoreRemote",
			Handler:    _AuthManagerService_StoreRemote_Handler,
		},
		{
			MethodName: "UserByRemoteToken",
			Handler:    _AuthManagerService_UserByRemoteToken_Handler,
		},
		{
			MethodName: "GetMyRemoteDetails",
			Handler:    _AuthManagerService_GetMyRemoteDetails_Handler,
		},
		{
			MethodName: "LogMeOut",
			Handler:    _AuthManagerService_LogMeOut_Handler,
		},
		{
			MethodName: "LogSomeoneOut",
			Handler:    _AuthManagerService_LogSomeoneOut_Handler,
		},
		{
			MethodName: "GetByAbbreviation",
			Handler:    _AuthManagerService_GetByAbbreviation_Handler,
		},
		{
			MethodName: "GetAllUsers",
			Handler:    _AuthManagerService_GetAllUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/auth/auth.proto",
}

// Client API for AuthenticationService service

type AuthenticationServiceClient interface {
	// DEPRECATED authenticate a user by username/password, return token
	GetByPassword(ctx context.Context, in *AuthenticatePasswordRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	// DEPRECATED authenticate a user by token, return same token
	GetByToken(ctx context.Context, in *AuthenticateTokenRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	// authenticate a user by username/password, return token
	SignedGetByPassword(ctx context.Context, in *AuthenticatePasswordRequest, opts ...grpc.CallOption) (*SignedAuthResponse, error)
	// authenticate a user by token, return same token
	SignedGetByToken(ctx context.Context, in *AuthenticateTokenRequest, opts ...grpc.CallOption) (*SignedAuthResponse, error)
	// get the public signing key
	GetPublicSigningKey(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*KeyResponse, error)
}

type authenticationServiceClient struct {
	cc *grpc.ClientConn
}

func NewAuthenticationServiceClient(cc *grpc.ClientConn) AuthenticationServiceClient {
	return &authenticationServiceClient{cc}
}

func (c *authenticationServiceClient) GetByPassword(ctx context.Context, in *AuthenticatePasswordRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := grpc.Invoke(ctx, "/auth.AuthenticationService/GetByPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) GetByToken(ctx context.Context, in *AuthenticateTokenRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := grpc.Invoke(ctx, "/auth.AuthenticationService/GetByToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) SignedGetByPassword(ctx context.Context, in *AuthenticatePasswordRequest, opts ...grpc.CallOption) (*SignedAuthResponse, error) {
	out := new(SignedAuthResponse)
	err := grpc.Invoke(ctx, "/auth.AuthenticationService/SignedGetByPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) SignedGetByToken(ctx context.Context, in *AuthenticateTokenRequest, opts ...grpc.CallOption) (*SignedAuthResponse, error) {
	out := new(SignedAuthResponse)
	err := grpc.Invoke(ctx, "/auth.AuthenticationService/SignedGetByToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) GetPublicSigningKey(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*KeyResponse, error) {
	out := new(KeyResponse)
	err := grpc.Invoke(ctx, "/auth.AuthenticationService/GetPublicSigningKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthenticationService service

type AuthenticationServiceServer interface {
	// DEPRECATED authenticate a user by username/password, return token
	GetByPassword(context.Context, *AuthenticatePasswordRequest) (*AuthResponse, error)
	// DEPRECATED authenticate a user by token, return same token
	GetByToken(context.Context, *AuthenticateTokenRequest) (*AuthResponse, error)
	// authenticate a user by username/password, return token
	SignedGetByPassword(context.Context, *AuthenticatePasswordRequest) (*SignedAuthResponse, error)
	// authenticate a user by token, return same token
	SignedGetByToken(context.Context, *AuthenticateTokenRequest) (*SignedAuthResponse, error)
	// get the public signing key
	GetPublicSigningKey(context.Context, *common.Void) (*KeyResponse, error)
}

func RegisterAuthenticationServiceServer(s *grpc.Server, srv AuthenticationServiceServer) {
	s.RegisterService(&_AuthenticationService_serviceDesc, srv)
}

func _AuthenticationService_GetByPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).GetByPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthenticationService/GetByPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).GetByPassword(ctx, req.(*AuthenticatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_GetByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).GetByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthenticationService/GetByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).GetByToken(ctx, req.(*AuthenticateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_SignedGetByPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).SignedGetByPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthenticationService/SignedGetByPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).SignedGetByPassword(ctx, req.(*AuthenticatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_SignedGetByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).SignedGetByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthenticationService/SignedGetByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).SignedGetByToken(ctx, req.(*AuthenticateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_GetPublicSigningKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).GetPublicSigningKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthenticationService/GetPublicSigningKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).GetPublicSigningKey(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthenticationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthenticationService",
	HandlerType: (*AuthenticationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByPassword",
			Handler:    _AuthenticationService_GetByPassword_Handler,
		},
		{
			MethodName: "GetByToken",
			Handler:    _AuthenticationService_GetByToken_Handler,
		},
		{
			MethodName: "SignedGetByPassword",
			Handler:    _AuthenticationService_SignedGetByPassword_Handler,
		},
		{
			MethodName: "SignedGetByToken",
			Handler:    _AuthenticationService_SignedGetByToken_Handler,
		},
		{
			MethodName: "GetPublicSigningKey",
			Handler:    _AuthenticationService_GetPublicSigningKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/auth/auth.proto",
}

func init() { proto.RegisterFile("golang.conradwood.net/apis/auth/auth.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2105 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x19, 0xcb, 0x72, 0xdb, 0xc8,
	0x31, 0x20, 0x21, 0x8a, 0x6a, 0x3e, 0x35, 0xa2, 0x64, 0x84, 0x9b, 0x38, 0xd4, 0xc4, 0xeb, 0x28,
	0xde, 0xac, 0xec, 0xe5, 0xae, 0x5d, 0x9b, 0x4a, 0xd9, 0x15, 0xca, 0x24, 0x55, 0x8c, 0x25, 0x4a,
	0x05, 0xca, 0xda, 0x5b, 0x2a, 0x10, 0x31, 0xa2, 0x51, 0x26, 0x01, 0x06, 0x00, 0xa5, 0xe8, 0x98,
	0x5b, 0xfe, 0x20, 0xd7, 0xdc, 0x93, 0x43, 0x7e, 0x20, 0xb7, 0xfc, 0x46, 0xbe, 0x24, 0x97, 0xd4,
	0x3c, 0x00, 0xcc, 0x00, 0x14, 0x29, 0x6f, 0xaa, 0xf6, 0x62, 0xa3, 0x7b, 0xba, 0x7b, 0xfa, 0x3d,
	0xdd, 0x22, 0x3c, 0x9b, 0x78, 0x53, 0xcb, 0x9d, 0x1c, 0x8e, 0x3d, 0xd7, 0xb7, 0xec, 0x5b, 0xcf,
	0xb3, 0x0f, 0x5d, 0x12, 0x3e, 0xb7, 0xe6, 0x4e, 0xf0, 0xdc, 0x5a, 0x84, 0x1f, 0xd8, 0x3f, 0x87,
	0x73, 0xdf, 0x0b, 0x3d, 0xa4, 0xd3, 0xef, 0xe6, 0xe1, 0x0a, 0x8e, 0xb1, 0x37, 0x9b, 0x79, 0xae,
	0xf8, 0x8f, 0x73, 0xe1, 0xbf, 0x69, 0x50, 0xee, 0x2c, 0xc2, 0x0f, 0x26, 0x09, 0xe6, 0x9e, 0x1b,
	0x10, 0xd4, 0x80, 0x8d, 0x4b, 0x6b, 0xea, 0xd8, 0x86, 0xd6, 0xd2, 0x0e, 0x8a, 0x26, 0x07, 0xd0,
	0x13, 0xa8, 0x9c, 0x2f, 0xae, 0xa6, 0xce, 0xf8, 0x94, 0x04, 0x81, 0x35, 0x21, 0x46, 0xae, 0xa5,
	0x1d, 0x6c, 0x99, 0x2a, 0x12, 0x3d, 0x06, 0x38, 0xf1, 0x26, 0x11, 0x49, 0x9e, 0x91, 0x48, 0x18,
	0xf4, 0x18, 0xf4, 0xf7, 0x01, 0xf1, 0x0d, 0xbd, 0xa5, 0x1d, 0x94, 0xda, 0x70, 0xc8, 0xb4, 0xa7,
	0x18, 0x93, 0xe1, 0xe9, 0xdd, 0x17, 0xde, 0x47, 0xe2, 0x1a, 0x1b, 0x8c, 0x95, 0x03, 0xf8, 0x1f,
	0x1a, 0xa0, 0x91, 0x33, 0x71, 0x89, 0xfd, 0x83, 0x29, 0xfa, 0x44, 0x51, 0xb4, 0xce, 0x15, 0xe5,
	0x3a, 0xac, 0x55, 0xf7, 0x0d, 0x40, 0x42, 0x89, 0x90, 0x90, 0x44, 0x95, 0x2c, 0x0b, 0xbe, 0x9f,
	0xc0, 0x16, 0xa5, 0xb0, 0xc2, 0x85, 0xcf, 0xf5, 0x2b, 0x9b, 0x09, 0x02, 0xff, 0x27, 0xcf, 0x59,
	0x50, 0x15, 0x72, 0x83, 0x2e, 0x63, 0xdc, 0x32, 0x73, 0x83, 0x2e, 0xbd, 0xae, 0x37, 0xb3, 0x9c,
	0xa9, 0x30, 0x89, 0x03, 0x54, 0x58, 0xdf, 0xf1, 0x83, 0x70, 0x68, 0xcd, 0x22, 0x4b, 0x12, 0x04,
	0x6a, 0x42, 0xf1, 0xc4, 0x12, 0x87, 0x3a, 0x3b, 0x8c, 0x61, 0x7a, 0x76, 0x6e, 0x05, 0xc1, 0xad,
	0xe7, 0xdb, 0xc2, 0x82, 0x18, 0x46, 0x3f, 0x87, 0xc2, 0xb1, 0xef, 0x2d, 0xe6, 0x81, 0x51, 0x68,
	0xe5, 0x0f, 0x4a, 0xed, 0x12, 0x77, 0x01, 0xc3, 0x99, 0xe2, 0x08, 0xed, 0x41, 0xa1, 0x73, 0x75,
	0xe5, 0x93, 0x1b, 0x63, 0x93, 0xb1, 0x0b, 0x88, 0xe1, 0xc7, 0xa1, 0x73, 0x43, 0x8c, 0x22, 0x0b,
	0x8d, 0x80, 0xd0, 0x53, 0xa8, 0x8e, 0x88, 0x7f, 0xe3, 0x8c, 0x49, 0x67, 0x3c, 0xf6, 0x16, 0x6e,
	0x68, 0x6c, 0xb1, 0xf3, 0x14, 0x96, 0xc6, 0x90, 0xd9, 0x76, 0x49, 0x7c, 0xe7, 0xda, 0x21, 0xb6,
	0x01, 0x8c, 0x4c, 0x45, 0xa2, 0x67, 0x50, 0x8f, 0x9d, 0x76, 0x49, 0xfc, 0xc0, 0xf1, 0x5c, 0xa3,
	0xd4, 0xd2, 0x0e, 0x2a, 0x66, 0x06, 0x4f, 0x4d, 0x15, 0x19, 0x14, 0x1a, 0x65, 0x46, 0x13, 0xc3,
	0xa8, 0x05, 0xa5, 0x98, 0x7e, 0xd0, 0x35, 0x2a, 0x2c, 0x1e, 0x32, 0x8a, 0xea, 0x13, 0x83, 0xfd,
	0xc5, 0x74, 0x6a, 0x54, 0x19, 0x8d, 0x8a, 0xa4, 0xd6, 0x9d, 0xf9, 0x13, 0xcb, 0x75, 0x02, 0x2b,
	0x74, 0x3c, 0x77, 0xd0, 0x35, 0x6a, 0xcc, 0x2b, 0x29, 0x2c, 0xfe, 0x0e, 0x76, 0x4f, 0x1c, 0xf7,
	0x23, 0xf3, 0xa1, 0x7c, 0x24, 0xc5, 0x5b, 0x8f, 0xe2, 0x7d, 0xe6, 0x4f, 0x06, 0x5d, 0x16, 0x6f,
	0xdd, 0xe4, 0x00, 0x32, 0x60, 0x93, 0xb1, 0x0e, 0xba, 0x2c, 0xda, 0xba, 0x19, 0x81, 0xb8, 0x0d,
	0xe5, 0x95, 0xf2, 0x10, 0xe8, 0x2c, 0x0f, 0x78, 0xfa, 0xb0, 0x6f, 0x7c, 0x0a, 0x1b, 0x8c, 0x3d,
	0x93, 0x6c, 0x4b, 0x88, 0xa9, 0xa7, 0xba, 0x24, 0x18, 0xfb, 0xce, 0x9c, 0xca, 0x17, 0xc9, 0x26,
	0xa3, 0xf0, 0x0b, 0xd8, 0x62, 0xe2, 0x4e, 0x9c, 0x20, 0x94, 0x72, 0x48, 0xbb, 0x37, 0x87, 0x70,
	0x0f, 0xb6, 0x3b, 0xb6, 0x7d, 0xe1, 0x71, 0x2c, 0xf9, 0xe3, 0x82, 0x04, 0x21, 0x4d, 0x20, 0x5a,
	0x01, 0xb1, 0x42, 0x02, 0x92, 0x6d, 0xe7, 0x7a, 0xc5, 0xb6, 0xff, 0x0e, 0xf6, 0x4c, 0x32, 0xf3,
	0x6e, 0x48, 0xdf, 0xf7, 0x66, 0xff, 0xa7, 0xac, 0x3f, 0x40, 0x9d, 0xea, 0xaf, 0x48, 0x91, 0xa8,
	0x35, 0x85, 0x1a, 0xb5, 0xa1, 0x31, 0x70, 0xc7, 0xd3, 0x85, 0x4d, 0x06, 0xae, 0xc5, 0xf2, 0x9c,
	0x5e, 0x10, 0x30, 0xa1, 0x45, 0x73, 0xe9, 0x19, 0xfe, 0x06, 0xea, 0xf4, 0x83, 0xde, 0x12, 0xb7,
	0xb3, 0x16, 0x6c, 0x70, 0x46, 0xee, 0x2c, 0xb9, 0x39, 0xf2, 0x03, 0xfc, 0x6b, 0xd8, 0x7d, 0x3f,
	0xb7, 0xad, 0x90, 0x44, 0x55, 0x1a, 0x29, 0xd7, 0x82, 0xd2, 0x90, 0xdc, 0xc6, 0xb5, 0xcc, 0x15,
	0x94, 0x51, 0xf8, 0x12, 0x1a, 0xbd, 0x29, 0xb9, 0xb1, 0x42, 0x5a, 0x63, 0x24, 0x08, 0x22, 0xce,
	0x26, 0x14, 0x85, 0x1d, 0xfc, 0xde, 0x2d, 0x33, 0x86, 0x11, 0x86, 0x72, 0x77, 0xe1, 0xb3, 0x54,
	0x1a, 0x91, 0x31, 0x37, 0xa8, 0x62, 0x2a, 0x38, 0x7c, 0x09, 0xcd, 0xbe, 0xe7, 0x8f, 0xc9, 0x72,
	0xbd, 0xee, 0x73, 0x7d, 0x4a, 0xdf, 0x5c, 0x56, 0xdf, 0x6b, 0x40, 0x3d, 0xdb, 0x09, 0x3b, 0xee,
	0x1d, 0x73, 0xc0, 0x1a, 0x79, 0x4a, 0x0b, 0xcc, 0xad, 0x6a, 0x81, 0x79, 0xb5, 0x05, 0xe2, 0x77,
	0x50, 0xa3, 0xf7, 0x8c, 0xc8, 0xf4, 0x3a, 0xba, 0x44, 0x11, 0xa6, 0xad, 0x12, 0x96, 0x4b, 0x09,
	0x7b, 0x0b, 0xa5, 0xb7, 0x3e, 0xb1, 0x42, 0xc2, 0x2b, 0x2a, 0xaa, 0x20, 0xed, 0xfe, 0x0a, 0xd2,
	0xb3, 0x15, 0x34, 0x00, 0x24, 0x09, 0x89, 0x94, 0xfa, 0x5a, 0x11, 0xcd, 0x44, 0x96, 0xda, 0xdb,
	0x3c, 0x45, 0x64, 0x72, 0x99, 0x0a, 0x7f, 0x0b, 0x3b, 0x8a, 0x28, 0x91, 0x68, 0xfb, 0xa2, 0xe4,
	0x85, 0x14, 0xa5, 0x2a, 0xf9, 0x09, 0xde, 0x87, 0xda, 0x31, 0x51, 0x0b, 0x20, 0xd5, 0x1f, 0xf0,
	0x4b, 0xa8, 0x27, 0x24, 0x0f, 0x97, 0xfc, 0x1e, 0x1e, 0xb1, 0x0f, 0xc9, 0xe4, 0xf5, 0x25, 0x96,
	0xf2, 0x5a, 0x2e, 0xeb, 0xb5, 0x21, 0x34, 0xb8, 0xa9, 0xe2, 0x25, 0x91, 0x2a, 0x43, 0x60, 0xa4,
	0x50, 0xc8, 0xa8, 0xe4, 0x0d, 0xcf, 0xc9, 0x6f, 0xf8, 0x11, 0xc0, 0x90, 0xdc, 0x0a, 0xba, 0x78,
	0x6c, 0xd1, 0xd6, 0x8d, 0x2d, 0x8a, 0x8c, 0x27, 0x50, 0x36, 0x49, 0x40, 0xc2, 0x48, 0x97, 0xf8,
	0xf9, 0xd6, 0xa4, 0xe7, 0x1b, 0x3f, 0x03, 0xd4, 0xfb, 0xd3, 0xdc, 0xf1, 0x09, 0x63, 0x92, 0x68,
	0xb9, 0x44, 0x4d, 0x96, 0xf8, 0x14, 0x10, 0x7b, 0xfd, 0xee, 0x18, 0x6b, 0x44, 0x5b, 0x87, 0xfc,
	0xb9, 0x13, 0x51, 0xd2, 0x4f, 0xfc, 0x15, 0xec, 0x28, 0x74, 0x22, 0x3c, 0x4d, 0x28, 0xc6, 0x2f,
	0x2a, 0x9f, 0x99, 0x62, 0x18, 0xbf, 0x64, 0x11, 0x57, 0x74, 0x48, 0xd7, 0x3f, 0x7f, 0x48, 0xd4,
	0xfa, 0x7f, 0x0d, 0x15, 0xc1, 0x23, 0xee, 0xd8, 0x83, 0x02, 0x33, 0xe7, 0x8e, 0x91, 0x57, 0x4c,
	0x01, 0xdd, 0xe3, 0xa2, 0x36, 0x14, 0xa3, 0x3e, 0x88, 0x9e, 0xaa, 0xfd, 0x2f, 0x3b, 0x73, 0x89,
	0x2e, 0xf8, 0x4b, 0xa8, 0x1d, 0xdd, 0xf1, 0x41, 0x43, 0xea, 0x0b, 0x62, 0x0e, 0xd1, 0xe4, 0x39,
	0x04, 0xff, 0x45, 0x03, 0x44, 0x5f, 0x85, 0x90, 0x8c, 0x42, 0xcf, 0x27, 0xeb, 0xda, 0x48, 0x13,
	0x8a, 0x67, 0x0b, 0x5f, 0x56, 0x33, 0x86, 0xa9, 0x33, 0xb8, 0x24, 0xc1, 0xc9, 0x1b, 0x89, 0x82,
	0x63, 0xf3, 0x94, 0xef, 0xdd, 0x38, 0xb6, 0x18, 0x1c, 0xe9, 0x3c, 0x25, 0x60, 0xfc, 0x1c, 0xb6,
	0x13, 0x5a, 0xa9, 0xfb, 0xc6, 0x17, 0x6a, 0xea, 0x85, 0xf8, 0xf7, 0x00, 0x09, 0xc3, 0xda, 0x0c,
	0x7c, 0x01, 0x9b, 0x5d, 0x12, 0x5a, 0xce, 0x94, 0xb6, 0x69, 0xea, 0xbe, 0x3d, 0x4e, 0x92, 0x88,
	0xe0, 0xc7, 0x66, 0x44, 0x86, 0xff, 0xa9, 0x41, 0x3d, 0x7d, 0x9a, 0x99, 0x18, 0x12, 0x4f, 0xe5,
	0xd2, 0x9e, 0x8a, 0x2d, 0xcd, 0xab, 0x96, 0x2a, 0x46, 0xe9, 0x29, 0x2f, 0x1a, 0xb0, 0xc9, 0xcb,
	0x94, 0x0f, 0x9c, 0x15, 0x33, 0x02, 0x33, 0xfe, 0x2d, 0x64, 0xfd, 0x8b, 0x5f, 0x43, 0x69, 0xb4,
	0xb0, 0xbd, 0x75, 0x61, 0xdc, 0x83, 0x82, 0x49, 0xac, 0x20, 0x6e, 0x14, 0x02, 0xc2, 0xcf, 0xe1,
	0x11, 0xd3, 0xe2, 0xad, 0x37, 0x9b, 0xfb, 0xde, 0xcc, 0x09, 0x88, 0xbd, 0xba, 0xdc, 0x5a, 0x50,
	0x1c, 0x92, 0x5b, 0xae, 0xf9, 0x72, 0x8a, 0xcf, 0xa1, 0xc2, 0x0b, 0x6d, 0xb5, 0xa0, 0x3e, 0x54,
	0x23, 0xb2, 0x95, 0xbb, 0x4b, 0x14, 0xe5, 0xdc, 0xf2, 0x28, 0xe3, 0xcf, 0xa1, 0x74, 0x74, 0x37,
	0xe8, 0xae, 0x71, 0x00, 0x1e, 0xc2, 0x1e, 0xbf, 0x2e, 0x79, 0x8f, 0xc5, 0xb5, 0xdf, 0xaf, 0x91,
	0xfd, 0x4b, 0x83, 0x6d, 0x1e, 0x27, 0x39, 0x79, 0x97, 0xb6, 0xb3, 0xef, 0xff, 0x14, 0x2b, 0xdb,
	0x88, 0x9e, 0xda, 0x46, 0x92, 0x02, 0xdf, 0x50, 0x16, 0x8d, 0xcc, 0xa2, 0x50, 0x58, 0xb2, 0x28,
	0xe0, 0xa7, 0x50, 0x3d, 0x52, 0x5b, 0xe6, 0xf2, 0x56, 0x7c, 0x08, 0x0d, 0x6a, 0x20, 0x03, 0x3a,
	0xb6, 0xed, 0x93, 0x20, 0x60, 0x9d, 0x89, 0xf6, 0xb4, 0x19, 0xab, 0x2d, 0x3e, 0x22, 0x09, 0x08,
	0xef, 0x41, 0x83, 0x9e, 0x77, 0xa6, 0x53, 0x3e, 0xcb, 0x0a, 0xe9, 0xb4, 0xfd, 0x4a, 0xb3, 0x8c,
	0xdc, 0x7e, 0x53, 0x23, 0x5a, 0x0c, 0xe3, 0x7d, 0xd8, 0xe4, 0x65, 0x78, 0x7d, 0x6f, 0x54, 0x1d,
	0xa8, 0xb1, 0x41, 0x59, 0xea, 0xd0, 0xf7, 0x55, 0xc0, 0xd2, 0x30, 0xa2, 0x03, 0xa8, 0xf1, 0x66,
	0x7c, 0xe1, 0xcc, 0x48, 0x10, 0x5a, 0xb3, 0x39, 0x8b, 0x41, 0xc5, 0x4c, 0xa3, 0x69, 0xa1, 0xbd,
	0x23, 0x49, 0xb2, 0xd6, 0x21, 0xff, 0x8e, 0xdc, 0x89, 0x0d, 0x96, 0x7e, 0xd2, 0x28, 0xbf, 0x9d,
	0x7a, 0x0b, 0x5b, 0x8e, 0x72, 0x8c, 0xc0, 0x67, 0xf0, 0x19, 0x5d, 0xd4, 0x89, 0x1b, 0x3a, 0xe3,
	0x25, 0x53, 0xe1, 0xf2, 0xc4, 0x91, 0xbd, 0x93, 0x4b, 0x79, 0xe7, 0x05, 0x18, 0xb2, 0xc0, 0x07,
	0xbc, 0x94, 0xff, 0xd6, 0x00, 0x56, 0xf4, 0xb5, 0x1f, 0x72, 0x93, 0x6e, 0xc0, 0x46, 0xc7, 0x9e,
	0x39, 0xae, 0xc8, 0x4d, 0x0e, 0x64, 0x33, 0x77, 0x93, 0x85, 0x22, 0x95, 0xb9, 0x7f, 0x17, 0x66,
	0x30, 0xa3, 0x82, 0x35, 0xed, 0x59, 0xcf, 0xc6, 0x3f, 0x2f, 0xc7, 0x5f, 0x6a, 0xbe, 0xba, 0xda,
	0x7c, 0x93, 0x47, 0x7b, 0x43, 0x79, 0xb4, 0xbf, 0x84, 0x2d, 0xc6, 0x7a, 0x71, 0x37, 0x27, 0x4c,
	0xfd, 0x6a, 0xbb, 0xc6, 0x7b, 0x46, 0x8c, 0x36, 0x13, 0x0a, 0x7c, 0x26, 0x06, 0xb8, 0xee, 0xd1,
	0x43, 0x56, 0xcf, 0x07, 0x6c, 0x93, 0x7f, 0xd6, 0xa0, 0x96, 0x38, 0xe4, 0xee, 0xdc, 0xf9, 0x04,
	0x1f, 0x88, 0xa9, 0x28, 0x1f, 0x4f, 0x45, 0x69, 0xfb, 0xf5, 0xc4, 0xfe, 0x26, 0x14, 0xe9, 0x5a,
	0x34, 0x8f, 0xde, 0x25, 0xdd, 0x8c, 0x61, 0x7c, 0x0d, 0x40, 0x1f, 0x9d, 0x51, 0x68, 0x85, 0x8b,
	0x87, 0xdf, 0x9e, 0x5a, 0xd2, 0xa5, 0x59, 0x36, 0xf1, 0xb5, 0x2e, 0xfb, 0xfa, 0xd9, 0x2b, 0xc9,
	0xd7, 0xa8, 0x02, 0x5b, 0xef, 0x87, 0xdd, 0x5e, 0x7f, 0x30, 0xec, 0x75, 0xeb, 0x3f, 0xa2, 0xe0,
	0x79, 0xcf, 0x3c, 0xed, 0x0c, 0x7b, 0xc3, 0x8b, 0xba, 0x86, 0x4a, 0xb0, 0x39, 0xea, 0x8d, 0x46,
	0x83, 0xb3, 0x61, 0x3d, 0xd7, 0xfe, 0x6b, 0x09, 0x10, 0x2d, 0x8e, 0x53, 0xcb, 0xb5, 0x26, 0xc4,
	0x8f, 0x46, 0xd6, 0x1e, 0xec, 0x2c, 0x59, 0xcc, 0x50, 0x8b, 0x87, 0xef, 0xfe, 0x9d, 0xad, 0x59,
	0x3e, 0x14, 0x7f, 0x1e, 0xbc, 0xf4, 0x1c, 0x1b, 0x7d, 0x01, 0x10, 0xaf, 0xc2, 0x01, 0x52, 0xce,
	0x9a, 0x35, 0x69, 0xbc, 0x67, 0x7d, 0xf2, 0x57, 0x50, 0x3a, 0x26, 0x21, 0xf5, 0x00, 0x7d, 0xa5,
	0x90, 0x58, 0x4f, 0xa4, 0x17, 0xab, 0x29, 0xbd, 0x38, 0xa8, 0x0d, 0xd5, 0x98, 0x9a, 0xd7, 0x5f,
	0x23, 0x62, 0x90, 0x7b, 0xb5, 0xc2, 0xf3, 0x2d, 0x6c, 0xf3, 0x81, 0x70, 0xcd, 0x3d, 0x99, 0xe1,
	0x11, 0xbd, 0x81, 0x46, 0x8a, 0x73, 0xd5, 0x9d, 0x59, 0xfe, 0xd7, 0x50, 0x51, 0x16, 0x0c, 0xd4,
	0x94, 0x97, 0x2f, 0x75, 0xeb, 0x88, 0xd8, 0xa5, 0x0d, 0xe2, 0x2b, 0x80, 0xe4, 0x05, 0x45, 0x8f,
	0x64, 0x5e, 0xe9, 0x4d, 0x55, 0x6c, 0x7d, 0x09, 0x55, 0x4e, 0xd0, 0xb7, 0x3e, 0x7e, 0x02, 0xdb,
	0x2b, 0x3a, 0xf2, 0x06, 0x24, 0x8c, 0xe2, 0xca, 0xcd, 0x44, 0xd1, 0x38, 0x98, 0xec, 0x23, 0xa9,
	0x48, 0xbf, 0x84, 0x92, 0xb4, 0x87, 0x20, 0x83, 0x33, 0x64, 0x57, 0x93, 0x14, 0xdb, 0x6b, 0xa8,
	0xf3, 0x3c, 0x3a, 0x8d, 0xa7, 0x0d, 0xf4, 0x99, 0x50, 0xe7, 0x01, 0xf9, 0xf5, 0x25, 0xd4, 0x46,
	0xc4, 0xb5, 0xa5, 0x22, 0x4f, 0x25, 0x99, 0x4a, 0x7e, 0x04, 0x25, 0x69, 0xb1, 0x89, 0x94, 0xcc,
	0xee, 0x44, 0xcd, 0x1f, 0x2f, 0x39, 0x11, 0xaf, 0xd9, 0x6f, 0xa0, 0x12, 0x6d, 0x3a, 0x7d, 0xcf,
	0x3f, 0x25, 0x68, 0x57, 0xe4, 0xb1, 0xba, 0xfe, 0x34, 0x77, 0xa4, 0x4e, 0x17, 0x33, 0x63, 0x28,
	0x7c, 0xf7, 0xc1, 0xeb, 0xcc, 0x06, 0x29, 0x35, 0xe5, 0x08, 0x74, 0xa0, 0x9e, 0x9e, 0x33, 0xd1,
	0x4f, 0x25, 0x61, 0xd9, 0xf9, 0xb3, 0x59, 0x8d, 0x13, 0x86, 0x7b, 0xff, 0x17, 0xa0, 0xd3, 0xa6,
	0x13, 0xa5, 0xb6, 0x34, 0xf5, 0xa6, 0x1c, 0xd2, 0x86, 0x72, 0xb4, 0x85, 0xb3, 0x5a, 0x48, 0x6c,
	0x91, 0x97, 0xf7, 0xa6, 0xbc, 0x89, 0xd3, 0x48, 0x8b, 0x75, 0x88, 0xce, 0xd6, 0x91, 0x13, 0xb3,
	0x7b, 0x52, 0xea, 0xaa, 0x37, 0xb0, 0xcd, 0x0b, 0x87, 0x53, 0x72, 0x45, 0x1f, 0xa5, 0xd7, 0x8c,
	0x54, 0x09, 0x48, 0x2b, 0xcc, 0x37, 0x80, 0x8e, 0x49, 0x78, 0x2a, 0xd8, 0xc5, 0x1a, 0x92, 0x72,
	0x63, 0x96, 0xeb, 0x09, 0x14, 0xd9, 0x9f, 0xe5, 0xcf, 0x16, 0xe1, 0x0a, 0x97, 0x1f, 0x42, 0xe5,
	0xc4, 0x9b, 0x8c, 0xbc, 0x19, 0xf1, 0x5c, 0x46, 0xba, 0xa6, 0xf7, 0xbc, 0x82, 0xed, 0x63, 0x12,
	0x46, 0x6b, 0xa4, 0xc3, 0xff, 0x5c, 0xba, 0x1b, 0xf1, 0x28, 0xcb, 0xa5, 0xc2, 0xf7, 0x05, 0xeb,
	0x70, 0x9d, 0xe9, 0x94, 0xad, 0xa2, 0x29, 0x85, 0xaa, 0x09, 0x21, 0x6d, 0x87, 0xed, 0xff, 0xe6,
	0x60, 0x57, 0x1a, 0x5b, 0xd8, 0xca, 0xcc, 0xbb, 0x41, 0x9f, 0xa5, 0xe0, 0x51, 0x52, 0x31, 0xfb,
	0x9c, 0x75, 0xc5, 0xd4, 0xd4, 0x44, 0x09, 0x49, 0x9c, 0x8d, 0xbf, 0x05, 0x60, 0x72, 0x78, 0x2c,
	0x1e, 0x67, 0x85, 0x28, 0x09, 0xbd, 0x4c, 0x82, 0x09, 0x3b, 0x71, 0x5b, 0xfc, 0x34, 0x7d, 0x0c,
	0xb9, 0x45, 0x2a, 0x32, 0x4f, 0xf8, 0xdf, 0xe5, 0x85, 0xcc, 0x87, 0xe9, 0x76, 0xbf, 0xb4, 0x57,
	0xb0, 0x73, 0x4c, 0x42, 0xfe, 0xeb, 0x0d, 0x3d, 0x76, 0xdc, 0x09, 0x9d, 0x40, 0x55, 0xd7, 0x8b,
	0x70, 0x4b, 0x43, 0xeb, 0xd1, 0x3e, 0xfc, 0xcc, 0x25, 0xa1, 0xfc, 0x33, 0x98, 0xf8, 0x61, 0xcc,
	0x9a, 0x3b, 0x01, 0x23, 0xbf, 0x2a, 0xb0, 0x5f, 0xc0, 0xbe, 0xfe, 0x5f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x89, 0x6e, 0x24, 0x15, 0x65, 0x1b, 0x00, 0x00,
}
