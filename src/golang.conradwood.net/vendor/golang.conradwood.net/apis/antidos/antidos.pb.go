// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/antidos/antidos.proto
// DO NOT EDIT!

/*
Package antidos is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/antidos/antidos.proto

It has these top-level messages:
	IPFailureRequest
	IPGoodRequest
	IPFailLog
	IPGoodLog
	BlockedIP
	IPList
	IPRequest
	IPResponse
*/
package antidos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IPFailureRequest struct {
	IP      string `protobuf:"bytes,1,opt,name=IP" json:"IP,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message" json:"Message,omitempty"`
}

func (m *IPFailureRequest) Reset()                    { *m = IPFailureRequest{} }
func (m *IPFailureRequest) String() string            { return proto.CompactTextString(m) }
func (*IPFailureRequest) ProtoMessage()               {}
func (*IPFailureRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IPFailureRequest) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *IPFailureRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type IPGoodRequest struct {
	IP          string `protobuf:"bytes,1,opt,name=IP" json:"IP,omitempty"`
	Permanently bool   `protobuf:"varint,2,opt,name=Permanently" json:"Permanently,omitempty"`
	Message     string `protobuf:"bytes,3,opt,name=Message" json:"Message,omitempty"`
}

func (m *IPGoodRequest) Reset()                    { *m = IPGoodRequest{} }
func (m *IPGoodRequest) String() string            { return proto.CompactTextString(m) }
func (*IPGoodRequest) ProtoMessage()               {}
func (*IPGoodRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IPGoodRequest) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *IPGoodRequest) GetPermanently() bool {
	if m != nil {
		return m.Permanently
	}
	return false
}

func (m *IPGoodRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type IPFailLog struct {
	ID        uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	IP        string `protobuf:"bytes,2,opt,name=IP" json:"IP,omitempty"`
	Timestamp uint32 `protobuf:"varint,3,opt,name=Timestamp" json:"Timestamp,omitempty"`
	Service   string `protobuf:"bytes,4,opt,name=Service" json:"Service,omitempty"`
	Message   string `protobuf:"bytes,5,opt,name=Message" json:"Message,omitempty"`
}

func (m *IPFailLog) Reset()                    { *m = IPFailLog{} }
func (m *IPFailLog) String() string            { return proto.CompactTextString(m) }
func (*IPFailLog) ProtoMessage()               {}
func (*IPFailLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *IPFailLog) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *IPFailLog) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *IPFailLog) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *IPFailLog) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *IPFailLog) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type IPGoodLog struct {
	ID          uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	IP          string `protobuf:"bytes,2,opt,name=IP" json:"IP,omitempty"`
	Timestamp   uint32 `protobuf:"varint,4,opt,name=Timestamp" json:"Timestamp,omitempty"`
	Permanently bool   `protobuf:"varint,5,opt,name=Permanently" json:"Permanently,omitempty"`
	Message     string `protobuf:"bytes,6,opt,name=Message" json:"Message,omitempty"`
}

func (m *IPGoodLog) Reset()                    { *m = IPGoodLog{} }
func (m *IPGoodLog) String() string            { return proto.CompactTextString(m) }
func (*IPGoodLog) ProtoMessage()               {}
func (*IPGoodLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *IPGoodLog) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *IPGoodLog) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *IPGoodLog) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *IPGoodLog) GetPermanently() bool {
	if m != nil {
		return m.Permanently
	}
	return false
}

func (m *IPGoodLog) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type BlockedIP struct {
	ID uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	IP string `protobuf:"bytes,2,opt,name=IP" json:"IP,omitempty"`
}

func (m *BlockedIP) Reset()                    { *m = BlockedIP{} }
func (m *BlockedIP) String() string            { return proto.CompactTextString(m) }
func (*BlockedIP) ProtoMessage()               {}
func (*BlockedIP) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BlockedIP) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *BlockedIP) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

type IPList struct {
	IP []string `protobuf:"bytes,1,rep,name=IP" json:"IP,omitempty"`
}

func (m *IPList) Reset()                    { *m = IPList{} }
func (m *IPList) String() string            { return proto.CompactTextString(m) }
func (*IPList) ProtoMessage()               {}
func (*IPList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *IPList) GetIP() []string {
	if m != nil {
		return m.IP
	}
	return nil
}

type IPRequest struct {
	IP string `protobuf:"bytes,1,opt,name=IP" json:"IP,omitempty"`
}

func (m *IPRequest) Reset()                    { *m = IPRequest{} }
func (m *IPRequest) String() string            { return proto.CompactTextString(m) }
func (*IPRequest) ProtoMessage()               {}
func (*IPRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *IPRequest) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

type IPResponse struct {
	Blocked           bool         `protobuf:"varint,1,opt,name=Blocked" json:"Blocked,omitempty"`
	BlockedTime       uint32       `protobuf:"varint,2,opt,name=BlockedTime" json:"BlockedTime,omitempty"`
	Good              bool         `protobuf:"varint,3,opt,name=Good" json:"Good,omitempty"`
	GoodTime          uint32       `protobuf:"varint,4,opt,name=GoodTime" json:"GoodTime,omitempty"`
	PermanentlyMarked bool         `protobuf:"varint,5,opt,name=PermanentlyMarked" json:"PermanentlyMarked,omitempty"`
	Failures          []*IPFailLog `protobuf:"bytes,6,rep,name=Failures" json:"Failures,omitempty"`
}

func (m *IPResponse) Reset()                    { *m = IPResponse{} }
func (m *IPResponse) String() string            { return proto.CompactTextString(m) }
func (*IPResponse) ProtoMessage()               {}
func (*IPResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *IPResponse) GetBlocked() bool {
	if m != nil {
		return m.Blocked
	}
	return false
}

func (m *IPResponse) GetBlockedTime() uint32 {
	if m != nil {
		return m.BlockedTime
	}
	return 0
}

func (m *IPResponse) GetGood() bool {
	if m != nil {
		return m.Good
	}
	return false
}

func (m *IPResponse) GetGoodTime() uint32 {
	if m != nil {
		return m.GoodTime
	}
	return 0
}

func (m *IPResponse) GetPermanentlyMarked() bool {
	if m != nil {
		return m.PermanentlyMarked
	}
	return false
}

func (m *IPResponse) GetFailures() []*IPFailLog {
	if m != nil {
		return m.Failures
	}
	return nil
}

func init() {
	proto.RegisterType((*IPFailureRequest)(nil), "antidos.IPFailureRequest")
	proto.RegisterType((*IPGoodRequest)(nil), "antidos.IPGoodRequest")
	proto.RegisterType((*IPFailLog)(nil), "antidos.IPFailLog")
	proto.RegisterType((*IPGoodLog)(nil), "antidos.IPGoodLog")
	proto.RegisterType((*BlockedIP)(nil), "antidos.BlockedIP")
	proto.RegisterType((*IPList)(nil), "antidos.IPList")
	proto.RegisterType((*IPRequest)(nil), "antidos.IPRequest")
	proto.RegisterType((*IPResponse)(nil), "antidos.IPResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AntiDOS service

type AntiDOSClient interface {
	// called each time an unauthenticated request fails at the network edge
	IPFailure(ctx context.Context, in *IPFailureRequest, opts ...grpc.CallOption) (*common.Void, error)
	GetAllBlocked(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*IPList, error)
	// mark an ip as 'good'. it'll cache for a few hours and not block it
	GoodRequest(ctx context.Context, in *IPGoodRequest, opts ...grpc.CallOption) (*common.Void, error)
	// totally unacceptable request. 100% certain it is a bot. block immediately
	BlockNow(ctx context.Context, in *IPFailureRequest, opts ...grpc.CallOption) (*common.Void, error)
	IPStatus(ctx context.Context, in *IPRequest, opts ...grpc.CallOption) (*IPResponse, error)
}

type antiDOSClient struct {
	cc *grpc.ClientConn
}

func NewAntiDOSClient(cc *grpc.ClientConn) AntiDOSClient {
	return &antiDOSClient{cc}
}

func (c *antiDOSClient) IPFailure(ctx context.Context, in *IPFailureRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/antidos.AntiDOS/IPFailure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiDOSClient) GetAllBlocked(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*IPList, error) {
	out := new(IPList)
	err := grpc.Invoke(ctx, "/antidos.AntiDOS/GetAllBlocked", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiDOSClient) GoodRequest(ctx context.Context, in *IPGoodRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/antidos.AntiDOS/GoodRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiDOSClient) BlockNow(ctx context.Context, in *IPFailureRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/antidos.AntiDOS/BlockNow", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiDOSClient) IPStatus(ctx context.Context, in *IPRequest, opts ...grpc.CallOption) (*IPResponse, error) {
	out := new(IPResponse)
	err := grpc.Invoke(ctx, "/antidos.AntiDOS/IPStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AntiDOS service

type AntiDOSServer interface {
	// called each time an unauthenticated request fails at the network edge
	IPFailure(context.Context, *IPFailureRequest) (*common.Void, error)
	GetAllBlocked(context.Context, *common.Void) (*IPList, error)
	// mark an ip as 'good'. it'll cache for a few hours and not block it
	GoodRequest(context.Context, *IPGoodRequest) (*common.Void, error)
	// totally unacceptable request. 100% certain it is a bot. block immediately
	BlockNow(context.Context, *IPFailureRequest) (*common.Void, error)
	IPStatus(context.Context, *IPRequest) (*IPResponse, error)
}

func RegisterAntiDOSServer(s *grpc.Server, srv AntiDOSServer) {
	s.RegisterService(&_AntiDOS_serviceDesc, srv)
}

func _AntiDOS_IPFailure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPFailureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiDOSServer).IPFailure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antidos.AntiDOS/IPFailure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiDOSServer).IPFailure(ctx, req.(*IPFailureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiDOS_GetAllBlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiDOSServer).GetAllBlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antidos.AntiDOS/GetAllBlocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiDOSServer).GetAllBlocked(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiDOS_GoodRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiDOSServer).GoodRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antidos.AntiDOS/GoodRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiDOSServer).GoodRequest(ctx, req.(*IPGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiDOS_BlockNow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPFailureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiDOSServer).BlockNow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antidos.AntiDOS/BlockNow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiDOSServer).BlockNow(ctx, req.(*IPFailureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiDOS_IPStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiDOSServer).IPStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antidos.AntiDOS/IPStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiDOSServer).IPStatus(ctx, req.(*IPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AntiDOS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "antidos.AntiDOS",
	HandlerType: (*AntiDOSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IPFailure",
			Handler:    _AntiDOS_IPFailure_Handler,
		},
		{
			MethodName: "GetAllBlocked",
			Handler:    _AntiDOS_GetAllBlocked_Handler,
		},
		{
			MethodName: "GoodRequest",
			Handler:    _AntiDOS_GoodRequest_Handler,
		},
		{
			MethodName: "BlockNow",
			Handler:    _AntiDOS_BlockNow_Handler,
		},
		{
			MethodName: "IPStatus",
			Handler:    _AntiDOS_IPStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/antidos/antidos.proto",
}

func init() { proto.RegisterFile("golang.conradwood.net/apis/antidos/antidos.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 502 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0x56, 0xd3, 0x6c, 0x9b, 0x4e, 0x29, 0x3f, 0x46, 0x42, 0xd9, 0x2e, 0x48, 0x55, 0x4e, 0x7b,
	0x40, 0x59, 0xb4, 0x85, 0x1b, 0x97, 0xad, 0x2a, 0x56, 0x91, 0x76, 0x21, 0x72, 0x11, 0x17, 0x4e,
	0xa6, 0xb1, 0xaa, 0x88, 0xc4, 0x53, 0x62, 0x87, 0x15, 0x07, 0x2e, 0x48, 0x5c, 0x79, 0x10, 0x1e,
	0x88, 0xe7, 0x41, 0x76, 0x7e, 0xea, 0x74, 0xb5, 0x15, 0x9c, 0xec, 0x19, 0x7b, 0xe6, 0xfb, 0xe6,
	0x1b, 0x8f, 0xe1, 0xc5, 0x06, 0x33, 0x26, 0x36, 0xe1, 0x1a, 0x45, 0xc1, 0x92, 0x1b, 0xc4, 0x24,
	0x14, 0x5c, 0x9d, 0xb1, 0x6d, 0x2a, 0xcf, 0x98, 0x50, 0x69, 0x82, 0xed, 0x1a, 0x6e, 0x0b, 0x54,
	0x48, 0x86, 0xb5, 0x39, 0x0d, 0x0f, 0x84, 0xae, 0x31, 0xcf, 0x51, 0xd4, 0x4b, 0x15, 0x18, 0xbc,
	0x86, 0x87, 0x51, 0xfc, 0x86, 0xa5, 0x59, 0x59, 0x70, 0xca, 0xbf, 0x94, 0x5c, 0x2a, 0x72, 0x1f,
	0x9c, 0x28, 0xf6, 0x7b, 0xb3, 0xde, 0xe9, 0x88, 0x3a, 0x51, 0x4c, 0x7c, 0x18, 0x5e, 0x73, 0x29,
	0xd9, 0x86, 0xfb, 0x8e, 0x71, 0x36, 0x66, 0xf0, 0x11, 0x26, 0x51, 0x7c, 0x89, 0x98, 0xdc, 0x15,
	0x3a, 0x83, 0x71, 0xcc, 0x8b, 0x9c, 0x09, 0x2e, 0x54, 0xf6, 0xcd, 0x84, 0x7b, 0xd4, 0x76, 0xd9,
	0xc9, 0xfb, 0xdd, 0xe4, 0xdf, 0x61, 0x54, 0x51, 0xbb, 0xc2, 0x8d, 0x49, 0xbc, 0x34, 0x89, 0x5d,
	0xea, 0x44, 0xcb, 0x1a, 0xc8, 0x69, 0x81, 0x9e, 0xc2, 0xe8, 0x7d, 0x9a, 0x73, 0xa9, 0x58, 0xbe,
	0x35, 0x89, 0x26, 0x74, 0xe7, 0xd0, 0x20, 0x2b, 0x5e, 0x7c, 0x4d, 0xd7, 0xdc, 0x77, 0x2b, 0x90,
	0xda, 0xb4, 0xe1, 0x8f, 0xba, 0xf0, 0x3f, 0x7b, 0x1a, 0x5f, 0x17, 0xf7, 0xdf, 0xf8, 0xee, 0x3e,
	0xfe, 0x9e, 0x0c, 0x47, 0x07, 0x65, 0x18, 0x74, 0x79, 0xbc, 0x82, 0xd1, 0x22, 0xc3, 0xf5, 0x67,
	0x9e, 0x44, 0xf1, 0x2d, 0x1a, 0xfe, 0x8e, 0xc6, 0xc2, 0xfb, 0xfd, 0xe3, 0xd8, 0x55, 0x45, 0xc9,
	0x35, 0xa1, 0xc0, 0x87, 0x41, 0x14, 0x5f, 0xa5, 0x56, 0x4f, 0xfa, 0x15, 0xd5, 0xe0, 0x44, 0xd7,
	0x75, 0x47, 0xc3, 0x82, 0x3f, 0x3d, 0x00, 0x7d, 0x2a, 0xb7, 0x28, 0xa4, 0x91, 0xa7, 0x06, 0x37,
	0x77, 0x3c, 0xda, 0x98, 0xba, 0xa4, 0x7a, 0xab, 0xcb, 0x34, 0x14, 0x26, 0xd4, 0x76, 0x11, 0x02,
	0xae, 0x56, 0xcf, 0x74, 0xc3, 0xa3, 0x66, 0x4f, 0xa6, 0xe0, 0xe9, 0xd5, 0x84, 0x54, 0x2a, 0xb5,
	0x36, 0x79, 0x0e, 0x8f, 0x2c, 0x45, 0xae, 0x59, 0xa1, 0x51, 0x2b, 0xa9, 0x6e, 0x1f, 0x90, 0x10,
	0xbc, 0xfa, 0xd9, 0x4a, 0x7f, 0x30, 0xeb, 0x9f, 0x8e, 0xcf, 0x49, 0xd8, 0xcc, 0x44, 0xfb, 0x6c,
	0x68, 0x7b, 0xe7, 0xfc, 0x97, 0x03, 0xc3, 0x0b, 0xa1, 0xd2, 0xe5, 0xbb, 0x15, 0x79, 0xd9, 0xbc,
	0xac, 0xb2, 0xe0, 0xe4, 0x78, 0x2f, 0x6c, 0x37, 0x08, 0xd3, 0x7b, 0x61, 0x3d, 0x2b, 0x1f, 0x30,
	0xd5, 0x88, 0x93, 0x4b, 0xae, 0x2e, 0xb2, 0xac, 0x91, 0xa0, 0x73, 0x3c, 0x7d, 0x60, 0xe5, 0x31,
	0xba, 0xcf, 0x61, 0x6c, 0x8f, 0xc6, 0x13, 0xeb, 0xdc, 0xf2, 0xef, 0x81, 0xcc, 0xc1, 0x33, 0xe9,
	0xdf, 0xe2, 0xcd, 0xbf, 0x33, 0x9b, 0x83, 0x17, 0xc5, 0x2b, 0xc5, 0x54, 0x29, 0x89, 0xad, 0x42,
	0x73, 0xfb, 0x71, 0xc7, 0x57, 0xb5, 0x76, 0xf1, 0x0c, 0x4e, 0x04, 0x57, 0xf6, 0x47, 0xa1, 0x3f,
	0x89, 0xe6, 0xe6, 0xa7, 0x81, 0xf9, 0x1f, 0xe6, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x00, 0x77,
	0x13, 0x92, 0x8c, 0x04, 0x00, 0x00,
}
